
Cube_QSPI_SDRAM_LTDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  90004430  90004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90004448  90004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90004450  90004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90004454  90004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  c0000000  90004458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001cc  c000000c  90004464  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  c00001d8  90004464  000201d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000de1a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e89  00000000  00000000  0002de56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c78  00000000  00000000  0002fce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b70  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00026f04  00000000  00000000  000314c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aec2  00000000  00000000  000583cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f02ad  00000000  00000000  0006328e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0015353b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003344  00000000  00000000  001535b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	c000000c 	.word	0xc000000c
900001e4:	00000000 	.word	0x00000000
900001e8:	90004418 	.word	0x90004418

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	c0000010 	.word	0xc0000010
90000204:	90004418 	.word	0x90004418

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b972 	b.w	90000504 <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9e08      	ldr	r6, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	4688      	mov	r8, r1
90000242:	2b00      	cmp	r3, #0
90000244:	d14b      	bne.n	900002de <__udivmoddi4+0xa6>
90000246:	428a      	cmp	r2, r1
90000248:	4615      	mov	r5, r2
9000024a:	d967      	bls.n	9000031c <__udivmoddi4+0xe4>
9000024c:	fab2 f282 	clz	r2, r2
90000250:	b14a      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000252:	f1c2 0720 	rsb	r7, r2, #32
90000256:	fa01 f302 	lsl.w	r3, r1, r2
9000025a:	fa20 f707 	lsr.w	r7, r0, r7
9000025e:	4095      	lsls	r5, r2
90000260:	ea47 0803 	orr.w	r8, r7, r3
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbb8 f7fe 	udiv	r7, r8, lr
90000270:	fa1f fc85 	uxth.w	ip, r5
90000274:	fb0e 8817 	mls	r8, lr, r7, r8
90000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
9000027c:	fb07 f10c 	mul.w	r1, r7, ip
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18eb      	adds	r3, r5, r3
90000286:	f107 30ff 	add.w	r0, r7, #4294967295
9000028a:	f080 811b 	bcs.w	900004c4 <__udivmoddi4+0x28c>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8118 	bls.w	900004c4 <__udivmoddi4+0x28c>
90000294:	3f02      	subs	r7, #2
90000296:	442b      	add	r3, r5
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0fe 	udiv	r0, r3, lr
900002a0:	fb0e 3310 	mls	r3, lr, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fc0c 	mul.w	ip, r0, ip
900002ac:	45a4      	cmp	ip, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	192c      	adds	r4, r5, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8107 	bcs.w	900004c8 <__udivmoddi4+0x290>
900002ba:	45a4      	cmp	ip, r4
900002bc:	f240 8104 	bls.w	900004c8 <__udivmoddi4+0x290>
900002c0:	3802      	subs	r0, #2
900002c2:	442c      	add	r4, r5
900002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
900002c8:	eba4 040c 	sub.w	r4, r4, ip
900002cc:	2700      	movs	r7, #0
900002ce:	b11e      	cbz	r6, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c6 4300 	strd	r4, r3, [r6]
900002d8:	4639      	mov	r1, r7
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	428b      	cmp	r3, r1
900002e0:	d909      	bls.n	900002f6 <__udivmoddi4+0xbe>
900002e2:	2e00      	cmp	r6, #0
900002e4:	f000 80eb 	beq.w	900004be <__udivmoddi4+0x286>
900002e8:	2700      	movs	r7, #0
900002ea:	e9c6 0100 	strd	r0, r1, [r6]
900002ee:	4638      	mov	r0, r7
900002f0:	4639      	mov	r1, r7
900002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002f6:	fab3 f783 	clz	r7, r3
900002fa:	2f00      	cmp	r7, #0
900002fc:	d147      	bne.n	9000038e <__udivmoddi4+0x156>
900002fe:	428b      	cmp	r3, r1
90000300:	d302      	bcc.n	90000308 <__udivmoddi4+0xd0>
90000302:	4282      	cmp	r2, r0
90000304:	f200 80fa 	bhi.w	900004fc <__udivmoddi4+0x2c4>
90000308:	1a84      	subs	r4, r0, r2
9000030a:	eb61 0303 	sbc.w	r3, r1, r3
9000030e:	2001      	movs	r0, #1
90000310:	4698      	mov	r8, r3
90000312:	2e00      	cmp	r6, #0
90000314:	d0e0      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000316:	e9c6 4800 	strd	r4, r8, [r6]
9000031a:	e7dd      	b.n	900002d8 <__udivmoddi4+0xa0>
9000031c:	b902      	cbnz	r2, 90000320 <__udivmoddi4+0xe8>
9000031e:	deff      	udf	#255	; 0xff
90000320:	fab2 f282 	clz	r2, r2
90000324:	2a00      	cmp	r2, #0
90000326:	f040 808f 	bne.w	90000448 <__udivmoddi4+0x210>
9000032a:	1b49      	subs	r1, r1, r5
9000032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
90000330:	fa1f f885 	uxth.w	r8, r5
90000334:	2701      	movs	r7, #1
90000336:	fbb1 fcfe 	udiv	ip, r1, lr
9000033a:	0c23      	lsrs	r3, r4, #16
9000033c:	fb0e 111c 	mls	r1, lr, ip, r1
90000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000344:	fb08 f10c 	mul.w	r1, r8, ip
90000348:	4299      	cmp	r1, r3
9000034a:	d907      	bls.n	9000035c <__udivmoddi4+0x124>
9000034c:	18eb      	adds	r3, r5, r3
9000034e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000352:	d202      	bcs.n	9000035a <__udivmoddi4+0x122>
90000354:	4299      	cmp	r1, r3
90000356:	f200 80cd 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
9000035a:	4684      	mov	ip, r0
9000035c:	1a59      	subs	r1, r3, r1
9000035e:	b2a3      	uxth	r3, r4
90000360:	fbb1 f0fe 	udiv	r0, r1, lr
90000364:	fb0e 1410 	mls	r4, lr, r0, r1
90000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
9000036c:	fb08 f800 	mul.w	r8, r8, r0
90000370:	45a0      	cmp	r8, r4
90000372:	d907      	bls.n	90000384 <__udivmoddi4+0x14c>
90000374:	192c      	adds	r4, r5, r4
90000376:	f100 33ff 	add.w	r3, r0, #4294967295
9000037a:	d202      	bcs.n	90000382 <__udivmoddi4+0x14a>
9000037c:	45a0      	cmp	r8, r4
9000037e:	f200 80b6 	bhi.w	900004ee <__udivmoddi4+0x2b6>
90000382:	4618      	mov	r0, r3
90000384:	eba4 0408 	sub.w	r4, r4, r8
90000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000038c:	e79f      	b.n	900002ce <__udivmoddi4+0x96>
9000038e:	f1c7 0c20 	rsb	ip, r7, #32
90000392:	40bb      	lsls	r3, r7
90000394:	fa22 fe0c 	lsr.w	lr, r2, ip
90000398:	ea4e 0e03 	orr.w	lr, lr, r3
9000039c:	fa01 f407 	lsl.w	r4, r1, r7
900003a0:	fa20 f50c 	lsr.w	r5, r0, ip
900003a4:	fa21 f30c 	lsr.w	r3, r1, ip
900003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
900003ac:	4325      	orrs	r5, r4
900003ae:	fbb3 f9f8 	udiv	r9, r3, r8
900003b2:	0c2c      	lsrs	r4, r5, #16
900003b4:	fb08 3319 	mls	r3, r8, r9, r3
900003b8:	fa1f fa8e 	uxth.w	sl, lr
900003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
900003c0:	fb09 f40a 	mul.w	r4, r9, sl
900003c4:	429c      	cmp	r4, r3
900003c6:	fa02 f207 	lsl.w	r2, r2, r7
900003ca:	fa00 f107 	lsl.w	r1, r0, r7
900003ce:	d90b      	bls.n	900003e8 <__udivmoddi4+0x1b0>
900003d0:	eb1e 0303 	adds.w	r3, lr, r3
900003d4:	f109 30ff 	add.w	r0, r9, #4294967295
900003d8:	f080 8087 	bcs.w	900004ea <__udivmoddi4+0x2b2>
900003dc:	429c      	cmp	r4, r3
900003de:	f240 8084 	bls.w	900004ea <__udivmoddi4+0x2b2>
900003e2:	f1a9 0902 	sub.w	r9, r9, #2
900003e6:	4473      	add	r3, lr
900003e8:	1b1b      	subs	r3, r3, r4
900003ea:	b2ad      	uxth	r5, r5
900003ec:	fbb3 f0f8 	udiv	r0, r3, r8
900003f0:	fb08 3310 	mls	r3, r8, r0, r3
900003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
900003f8:	fb00 fa0a 	mul.w	sl, r0, sl
900003fc:	45a2      	cmp	sl, r4
900003fe:	d908      	bls.n	90000412 <__udivmoddi4+0x1da>
90000400:	eb1e 0404 	adds.w	r4, lr, r4
90000404:	f100 33ff 	add.w	r3, r0, #4294967295
90000408:	d26b      	bcs.n	900004e2 <__udivmoddi4+0x2aa>
9000040a:	45a2      	cmp	sl, r4
9000040c:	d969      	bls.n	900004e2 <__udivmoddi4+0x2aa>
9000040e:	3802      	subs	r0, #2
90000410:	4474      	add	r4, lr
90000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000416:	fba0 8902 	umull	r8, r9, r0, r2
9000041a:	eba4 040a 	sub.w	r4, r4, sl
9000041e:	454c      	cmp	r4, r9
90000420:	46c2      	mov	sl, r8
90000422:	464b      	mov	r3, r9
90000424:	d354      	bcc.n	900004d0 <__udivmoddi4+0x298>
90000426:	d051      	beq.n	900004cc <__udivmoddi4+0x294>
90000428:	2e00      	cmp	r6, #0
9000042a:	d069      	beq.n	90000500 <__udivmoddi4+0x2c8>
9000042c:	ebb1 050a 	subs.w	r5, r1, sl
90000430:	eb64 0403 	sbc.w	r4, r4, r3
90000434:	fa04 fc0c 	lsl.w	ip, r4, ip
90000438:	40fd      	lsrs	r5, r7
9000043a:	40fc      	lsrs	r4, r7
9000043c:	ea4c 0505 	orr.w	r5, ip, r5
90000440:	e9c6 5400 	strd	r5, r4, [r6]
90000444:	2700      	movs	r7, #0
90000446:	e747      	b.n	900002d8 <__udivmoddi4+0xa0>
90000448:	f1c2 0320 	rsb	r3, r2, #32
9000044c:	fa20 f703 	lsr.w	r7, r0, r3
90000450:	4095      	lsls	r5, r2
90000452:	fa01 f002 	lsl.w	r0, r1, r2
90000456:	fa21 f303 	lsr.w	r3, r1, r3
9000045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
9000045e:	4338      	orrs	r0, r7
90000460:	0c01      	lsrs	r1, r0, #16
90000462:	fbb3 f7fe 	udiv	r7, r3, lr
90000466:	fa1f f885 	uxth.w	r8, r5
9000046a:	fb0e 3317 	mls	r3, lr, r7, r3
9000046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000472:	fb07 f308 	mul.w	r3, r7, r8
90000476:	428b      	cmp	r3, r1
90000478:	fa04 f402 	lsl.w	r4, r4, r2
9000047c:	d907      	bls.n	9000048e <__udivmoddi4+0x256>
9000047e:	1869      	adds	r1, r5, r1
90000480:	f107 3cff 	add.w	ip, r7, #4294967295
90000484:	d22f      	bcs.n	900004e6 <__udivmoddi4+0x2ae>
90000486:	428b      	cmp	r3, r1
90000488:	d92d      	bls.n	900004e6 <__udivmoddi4+0x2ae>
9000048a:	3f02      	subs	r7, #2
9000048c:	4429      	add	r1, r5
9000048e:	1acb      	subs	r3, r1, r3
90000490:	b281      	uxth	r1, r0
90000492:	fbb3 f0fe 	udiv	r0, r3, lr
90000496:	fb0e 3310 	mls	r3, lr, r0, r3
9000049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000049e:	fb00 f308 	mul.w	r3, r0, r8
900004a2:	428b      	cmp	r3, r1
900004a4:	d907      	bls.n	900004b6 <__udivmoddi4+0x27e>
900004a6:	1869      	adds	r1, r5, r1
900004a8:	f100 3cff 	add.w	ip, r0, #4294967295
900004ac:	d217      	bcs.n	900004de <__udivmoddi4+0x2a6>
900004ae:	428b      	cmp	r3, r1
900004b0:	d915      	bls.n	900004de <__udivmoddi4+0x2a6>
900004b2:	3802      	subs	r0, #2
900004b4:	4429      	add	r1, r5
900004b6:	1ac9      	subs	r1, r1, r3
900004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
900004bc:	e73b      	b.n	90000336 <__udivmoddi4+0xfe>
900004be:	4637      	mov	r7, r6
900004c0:	4630      	mov	r0, r6
900004c2:	e709      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c4:	4607      	mov	r7, r0
900004c6:	e6e7      	b.n	90000298 <__udivmoddi4+0x60>
900004c8:	4618      	mov	r0, r3
900004ca:	e6fb      	b.n	900002c4 <__udivmoddi4+0x8c>
900004cc:	4541      	cmp	r1, r8
900004ce:	d2ab      	bcs.n	90000428 <__udivmoddi4+0x1f0>
900004d0:	ebb8 0a02 	subs.w	sl, r8, r2
900004d4:	eb69 020e 	sbc.w	r2, r9, lr
900004d8:	3801      	subs	r0, #1
900004da:	4613      	mov	r3, r2
900004dc:	e7a4      	b.n	90000428 <__udivmoddi4+0x1f0>
900004de:	4660      	mov	r0, ip
900004e0:	e7e9      	b.n	900004b6 <__udivmoddi4+0x27e>
900004e2:	4618      	mov	r0, r3
900004e4:	e795      	b.n	90000412 <__udivmoddi4+0x1da>
900004e6:	4667      	mov	r7, ip
900004e8:	e7d1      	b.n	9000048e <__udivmoddi4+0x256>
900004ea:	4681      	mov	r9, r0
900004ec:	e77c      	b.n	900003e8 <__udivmoddi4+0x1b0>
900004ee:	3802      	subs	r0, #2
900004f0:	442c      	add	r4, r5
900004f2:	e747      	b.n	90000384 <__udivmoddi4+0x14c>
900004f4:	f1ac 0c02 	sub.w	ip, ip, #2
900004f8:	442b      	add	r3, r5
900004fa:	e72f      	b.n	9000035c <__udivmoddi4+0x124>
900004fc:	4638      	mov	r0, r7
900004fe:	e708      	b.n	90000312 <__udivmoddi4+0xda>
90000500:	4637      	mov	r7, r6
90000502:	e6e9      	b.n	900002d8 <__udivmoddi4+0xa0>

90000504 <__aeabi_idiv0>:
90000504:	4770      	bx	lr
90000506:	bf00      	nop

90000508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
90000508:	b480      	push	{r7}
9000050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
9000050c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000510:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000514:	4b0b      	ldr	r3, [pc, #44]	; (90000544 <SCB_EnableICache+0x3c>)
90000516:	2200      	movs	r2, #0
90000518:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000051c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000520:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000524:	4b07      	ldr	r3, [pc, #28]	; (90000544 <SCB_EnableICache+0x3c>)
90000526:	695b      	ldr	r3, [r3, #20]
90000528:	4a06      	ldr	r2, [pc, #24]	; (90000544 <SCB_EnableICache+0x3c>)
9000052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000534:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
90000538:	bf00      	nop
9000053a:	46bd      	mov	sp, r7
9000053c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000540:	4770      	bx	lr
90000542:	bf00      	nop
90000544:	e000ed00 	.word	0xe000ed00

90000548 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
90000548:	b480      	push	{r7}
9000054a:	b085      	sub	sp, #20
9000054c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
9000054e:	4b1d      	ldr	r3, [pc, #116]	; (900005c4 <SCB_EnableDCache+0x7c>)
90000550:	2200      	movs	r2, #0
90000552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000556:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000055a:	4b1a      	ldr	r3, [pc, #104]	; (900005c4 <SCB_EnableDCache+0x7c>)
9000055c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000560:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000562:	687b      	ldr	r3, [r7, #4]
90000564:	0b5b      	lsrs	r3, r3, #13
90000566:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000056a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000056c:	687b      	ldr	r3, [r7, #4]
9000056e:	08db      	lsrs	r3, r3, #3
90000570:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000574:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000576:	68fb      	ldr	r3, [r7, #12]
90000578:	015a      	lsls	r2, r3, #5
9000057a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
9000057e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000580:	68ba      	ldr	r2, [r7, #8]
90000582:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000584:	490f      	ldr	r1, [pc, #60]	; (900005c4 <SCB_EnableDCache+0x7c>)
90000586:	4313      	orrs	r3, r2
90000588:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000058c:	68bb      	ldr	r3, [r7, #8]
9000058e:	1e5a      	subs	r2, r3, #1
90000590:	60ba      	str	r2, [r7, #8]
90000592:	2b00      	cmp	r3, #0
90000594:	d1ef      	bne.n	90000576 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
90000596:	68fb      	ldr	r3, [r7, #12]
90000598:	1e5a      	subs	r2, r3, #1
9000059a:	60fa      	str	r2, [r7, #12]
9000059c:	2b00      	cmp	r3, #0
9000059e:	d1e5      	bne.n	9000056c <SCB_EnableDCache+0x24>
900005a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900005a4:	4b07      	ldr	r3, [pc, #28]	; (900005c4 <SCB_EnableDCache+0x7c>)
900005a6:	695b      	ldr	r3, [r3, #20]
900005a8:	4a06      	ldr	r2, [pc, #24]	; (900005c4 <SCB_EnableDCache+0x7c>)
900005aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900005ae:	6153      	str	r3, [r2, #20]
900005b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900005b4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
900005b8:	bf00      	nop
900005ba:	3714      	adds	r7, #20
900005bc:	46bd      	mov	sp, r7
900005be:	f85d 7b04 	ldr.w	r7, [sp], #4
900005c2:	4770      	bx	lr
900005c4:	e000ed00 	.word	0xe000ed00

900005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
900005c8:	b580      	push	{r7, lr}
900005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CPU_CACHE_Enable();
900005cc:	f000 fe00 	bl	900011d0 <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
900005d0:	f001 f8f1 	bl	900017b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
900005d4:	f000 f80e 	bl	900005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
900005d8:	f000 f9da 	bl	90000990 <MX_GPIO_Init>
  MX_FMC_Init();
900005dc:	f000 f988 	bl	900008f0 <MX_FMC_Init>
  MX_LTDC_Init();
900005e0:	f000 f8a8 	bl	90000734 <MX_LTDC_Init>
  MX_QUADSPI_Init();
900005e4:	f000 f928 	bl	90000838 <MX_QUADSPI_Init>
  MX_USART6_UART_Init();
900005e8:	f000 f952 	bl	90000890 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU_Config();
900005ec:	f000 fd5c 	bl	900010a8 <MPU_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
900005f0:	e7fe      	b.n	900005f0 <main+0x28>
	...

900005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
900005f4:	b580      	push	{r7, lr}
900005f6:	b0b4      	sub	sp, #208	; 0xd0
900005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900005fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
900005fe:	2230      	movs	r2, #48	; 0x30
90000600:	2100      	movs	r1, #0
90000602:	4618      	mov	r0, r3
90000604:	f003 ff00 	bl	90004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000608:	f107 038c 	add.w	r3, r7, #140	; 0x8c
9000060c:	2200      	movs	r2, #0
9000060e:	601a      	str	r2, [r3, #0]
90000610:	605a      	str	r2, [r3, #4]
90000612:	609a      	str	r2, [r3, #8]
90000614:	60da      	str	r2, [r3, #12]
90000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000618:	f107 0308 	add.w	r3, r7, #8
9000061c:	2284      	movs	r2, #132	; 0x84
9000061e:	2100      	movs	r1, #0
90000620:	4618      	mov	r0, r3
90000622:	f003 fef1 	bl	90004408 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
90000626:	f001 ffdb 	bl	900025e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
9000062a:	4b40      	ldr	r3, [pc, #256]	; (9000072c <SystemClock_Config+0x138>)
9000062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000062e:	4a3f      	ldr	r2, [pc, #252]	; (9000072c <SystemClock_Config+0x138>)
90000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000634:	6413      	str	r3, [r2, #64]	; 0x40
90000636:	4b3d      	ldr	r3, [pc, #244]	; (9000072c <SystemClock_Config+0x138>)
90000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000063e:	607b      	str	r3, [r7, #4]
90000640:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000642:	4b3b      	ldr	r3, [pc, #236]	; (90000730 <SystemClock_Config+0x13c>)
90000644:	681b      	ldr	r3, [r3, #0]
90000646:	4a3a      	ldr	r2, [pc, #232]	; (90000730 <SystemClock_Config+0x13c>)
90000648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000064c:	6013      	str	r3, [r2, #0]
9000064e:	4b38      	ldr	r3, [pc, #224]	; (90000730 <SystemClock_Config+0x13c>)
90000650:	681b      	ldr	r3, [r3, #0]
90000652:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000656:	603b      	str	r3, [r7, #0]
90000658:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
9000065a:	2302      	movs	r3, #2
9000065c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
90000660:	2301      	movs	r3, #1
90000662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
90000666:	2310      	movs	r3, #16
90000668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000066c:	2302      	movs	r3, #2
9000066e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
90000672:	2300      	movs	r3, #0
90000674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 16;
90000678:	2310      	movs	r3, #16
9000067a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
9000067e:	f44f 73c8 	mov.w	r3, #400	; 0x190
90000682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
90000686:	2302      	movs	r3, #2
90000688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
9000068c:	2302      	movs	r3, #2
9000068e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000692:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
90000696:	4618      	mov	r0, r3
90000698:	f002 f8c4 	bl	90002824 <HAL_RCC_OscConfig>
9000069c:	4603      	mov	r3, r0
9000069e:	2b00      	cmp	r3, #0
900006a0:	d001      	beq.n	900006a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
900006a2:	f000 fd9d 	bl	900011e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
900006a6:	f001 ffab 	bl	90002600 <HAL_PWREx_EnableOverDrive>
900006aa:	4603      	mov	r3, r0
900006ac:	2b00      	cmp	r3, #0
900006ae:	d001      	beq.n	900006b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
900006b0:	f000 fd96 	bl	900011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900006b4:	230f      	movs	r3, #15
900006b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900006ba:	2302      	movs	r3, #2
900006bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
900006c0:	2300      	movs	r3, #0
900006c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
900006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
900006ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
900006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900006d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
900006d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
900006da:	2106      	movs	r1, #6
900006dc:	4618      	mov	r0, r3
900006de:	f002 fb45 	bl	90002d6c <HAL_RCC_ClockConfig>
900006e2:	4603      	mov	r3, r0
900006e4:	2b00      	cmp	r3, #0
900006e6:	d001      	beq.n	900006ec <SystemClock_Config+0xf8>
  {
    Error_Handler();
900006e8:	f000 fd7a 	bl	900011e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART6;
900006ec:	f640 0308 	movw	r3, #2056	; 0x808
900006f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 190;
900006f2:	23be      	movs	r3, #190	; 0xbe
900006f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
900006f6:	2305      	movs	r3, #5
900006f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
900006fa:	2302      	movs	r3, #2
900006fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
900006fe:	2300      	movs	r3, #0
90000700:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
90000702:	2301      	movs	r3, #1
90000704:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
9000070a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
9000070c:	2300      	movs	r3, #0
9000070e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000710:	f107 0308 	add.w	r3, r7, #8
90000714:	4618      	mov	r0, r3
90000716:	f002 fcfb 	bl	90003110 <HAL_RCCEx_PeriphCLKConfig>
9000071a:	4603      	mov	r3, r0
9000071c:	2b00      	cmp	r3, #0
9000071e:	d001      	beq.n	90000724 <SystemClock_Config+0x130>
  {
    Error_Handler();
90000720:	f000 fd5e 	bl	900011e0 <Error_Handler>
  }
}
90000724:	bf00      	nop
90000726:	37d0      	adds	r7, #208	; 0xd0
90000728:	46bd      	mov	sp, r7
9000072a:	bd80      	pop	{r7, pc}
9000072c:	40023800 	.word	0x40023800
90000730:	40007000 	.word	0x40007000

90000734 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
90000734:	b580      	push	{r7, lr}
90000736:	b08e      	sub	sp, #56	; 0x38
90000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
9000073a:	1d3b      	adds	r3, r7, #4
9000073c:	2234      	movs	r2, #52	; 0x34
9000073e:	2100      	movs	r1, #0
90000740:	4618      	mov	r0, r3
90000742:	f003 fe61 	bl	90004408 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
90000746:	4b3a      	ldr	r3, [pc, #232]	; (90000830 <MX_LTDC_Init+0xfc>)
90000748:	4a3a      	ldr	r2, [pc, #232]	; (90000834 <MX_LTDC_Init+0x100>)
9000074a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000074c:	4b38      	ldr	r3, [pc, #224]	; (90000830 <MX_LTDC_Init+0xfc>)
9000074e:	2200      	movs	r2, #0
90000750:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90000752:	4b37      	ldr	r3, [pc, #220]	; (90000830 <MX_LTDC_Init+0xfc>)
90000754:	2200      	movs	r2, #0
90000756:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
90000758:	4b35      	ldr	r3, [pc, #212]	; (90000830 <MX_LTDC_Init+0xfc>)
9000075a:	2200      	movs	r2, #0
9000075c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000075e:	4b34      	ldr	r3, [pc, #208]	; (90000830 <MX_LTDC_Init+0xfc>)
90000760:	2200      	movs	r2, #0
90000762:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
90000764:	4b32      	ldr	r3, [pc, #200]	; (90000830 <MX_LTDC_Init+0xfc>)
90000766:	2200      	movs	r2, #0
90000768:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
9000076a:	4b31      	ldr	r3, [pc, #196]	; (90000830 <MX_LTDC_Init+0xfc>)
9000076c:	2209      	movs	r2, #9
9000076e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
90000770:	4b2f      	ldr	r3, [pc, #188]	; (90000830 <MX_LTDC_Init+0xfc>)
90000772:	222b      	movs	r2, #43	; 0x2b
90000774:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
90000776:	4b2e      	ldr	r3, [pc, #184]	; (90000830 <MX_LTDC_Init+0xfc>)
90000778:	2215      	movs	r2, #21
9000077a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
9000077c:	4b2c      	ldr	r3, [pc, #176]	; (90000830 <MX_LTDC_Init+0xfc>)
9000077e:	f240 220b 	movw	r2, #523	; 0x20b
90000782:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
90000784:	4b2a      	ldr	r3, [pc, #168]	; (90000830 <MX_LTDC_Init+0xfc>)
90000786:	f240 1225 	movw	r2, #293	; 0x125
9000078a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
9000078c:	4b28      	ldr	r3, [pc, #160]	; (90000830 <MX_LTDC_Init+0xfc>)
9000078e:	f240 2213 	movw	r2, #531	; 0x213
90000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
90000794:	4b26      	ldr	r3, [pc, #152]	; (90000830 <MX_LTDC_Init+0xfc>)
90000796:	f240 1229 	movw	r2, #297	; 0x129
9000079a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
9000079c:	4b24      	ldr	r3, [pc, #144]	; (90000830 <MX_LTDC_Init+0xfc>)
9000079e:	2200      	movs	r2, #0
900007a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
900007a4:	4b22      	ldr	r3, [pc, #136]	; (90000830 <MX_LTDC_Init+0xfc>)
900007a6:	2200      	movs	r2, #0
900007a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
900007ac:	4b20      	ldr	r3, [pc, #128]	; (90000830 <MX_LTDC_Init+0xfc>)
900007ae:	2200      	movs	r2, #0
900007b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900007b4:	481e      	ldr	r0, [pc, #120]	; (90000830 <MX_LTDC_Init+0xfc>)
900007b6:	f001 fba9 	bl	90001f0c <HAL_LTDC_Init>
900007ba:	4603      	mov	r3, r0
900007bc:	2b00      	cmp	r3, #0
900007be:	d001      	beq.n	900007c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
900007c0:	f000 fd0e 	bl	900011e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
900007c4:	2300      	movs	r3, #0
900007c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
900007c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
900007cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
900007ce:	2300      	movs	r3, #0
900007d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
900007d2:	f44f 7388 	mov.w	r3, #272	; 0x110
900007d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900007d8:	2302      	movs	r3, #2
900007da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
900007dc:	23ff      	movs	r3, #255	; 0xff
900007de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
900007e0:	2300      	movs	r3, #0
900007e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900007e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
900007e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900007ea:	2307      	movs	r3, #7
900007ec:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0; //(uint32_t)&spagett_RGB565_480x272;
900007ee:	2300      	movs	r3, #0
900007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
900007f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
900007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
900007f8:	f44f 7388 	mov.w	r3, #272	; 0x110
900007fc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
900007fe:	2300      	movs	r3, #0
90000800:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
90000804:	2300      	movs	r3, #0
90000806:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
9000080a:	2300      	movs	r3, #0
9000080c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90000810:	1d3b      	adds	r3, r7, #4
90000812:	2200      	movs	r2, #0
90000814:	4619      	mov	r1, r3
90000816:	4806      	ldr	r0, [pc, #24]	; (90000830 <MX_LTDC_Init+0xfc>)
90000818:	f001 fd0a 	bl	90002230 <HAL_LTDC_ConfigLayer>
9000081c:	4603      	mov	r3, r0
9000081e:	2b00      	cmp	r3, #0
90000820:	d001      	beq.n	90000826 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
90000822:	f000 fcdd 	bl	900011e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
90000826:	bf00      	nop
90000828:	3738      	adds	r7, #56	; 0x38
9000082a:	46bd      	mov	sp, r7
9000082c:	bd80      	pop	{r7, pc}
9000082e:	bf00      	nop
90000830:	c000002c 	.word	0xc000002c
90000834:	40016800 	.word	0x40016800

90000838 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
90000838:	b580      	push	{r7, lr}
9000083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
9000083c:	4b12      	ldr	r3, [pc, #72]	; (90000888 <MX_QUADSPI_Init+0x50>)
9000083e:	4a13      	ldr	r2, [pc, #76]	; (9000088c <MX_QUADSPI_Init+0x54>)
90000840:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
90000842:	4b11      	ldr	r3, [pc, #68]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000844:	2201      	movs	r2, #1
90000846:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
90000848:	4b0f      	ldr	r3, [pc, #60]	; (90000888 <MX_QUADSPI_Init+0x50>)
9000084a:	2204      	movs	r2, #4
9000084c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
9000084e:	4b0e      	ldr	r3, [pc, #56]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000850:	2210      	movs	r2, #16
90000852:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
90000854:	4b0c      	ldr	r3, [pc, #48]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000856:	2218      	movs	r2, #24
90000858:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
9000085a:	4b0b      	ldr	r3, [pc, #44]	; (90000888 <MX_QUADSPI_Init+0x50>)
9000085c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
90000860:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
90000862:	4b09      	ldr	r3, [pc, #36]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000864:	2200      	movs	r2, #0
90000866:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
90000868:	4b07      	ldr	r3, [pc, #28]	; (90000888 <MX_QUADSPI_Init+0x50>)
9000086a:	2200      	movs	r2, #0
9000086c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
9000086e:	4b06      	ldr	r3, [pc, #24]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000870:	2200      	movs	r2, #0
90000872:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
90000874:	4804      	ldr	r0, [pc, #16]	; (90000888 <MX_QUADSPI_Init+0x50>)
90000876:	f001 ff13 	bl	900026a0 <HAL_QSPI_Init>
9000087a:	4603      	mov	r3, r0
9000087c:	2b00      	cmp	r3, #0
9000087e:	d001      	beq.n	90000884 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
90000880:	f000 fcae 	bl	900011e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
90000884:	bf00      	nop
90000886:	bd80      	pop	{r7, pc}
90000888:	c0000188 	.word	0xc0000188
9000088c:	a0001000 	.word	0xa0001000

90000890 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
90000890:	b580      	push	{r7, lr}
90000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
90000894:	4b14      	ldr	r3, [pc, #80]	; (900008e8 <MX_USART6_UART_Init+0x58>)
90000896:	4a15      	ldr	r2, [pc, #84]	; (900008ec <MX_USART6_UART_Init+0x5c>)
90000898:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
9000089a:	4b13      	ldr	r3, [pc, #76]	; (900008e8 <MX_USART6_UART_Init+0x58>)
9000089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
900008a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
900008a2:	4b11      	ldr	r3, [pc, #68]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008a4:	2200      	movs	r2, #0
900008a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
900008a8:	4b0f      	ldr	r3, [pc, #60]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008aa:	2200      	movs	r2, #0
900008ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
900008ae:	4b0e      	ldr	r3, [pc, #56]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008b0:	2200      	movs	r2, #0
900008b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
900008b4:	4b0c      	ldr	r3, [pc, #48]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008b6:	220c      	movs	r2, #12
900008b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
900008ba:	4b0b      	ldr	r3, [pc, #44]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008bc:	2200      	movs	r2, #0
900008be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
900008c0:	4b09      	ldr	r3, [pc, #36]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008c2:	2200      	movs	r2, #0
900008c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
900008c6:	4b08      	ldr	r3, [pc, #32]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008c8:	2200      	movs	r2, #0
900008ca:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
900008cc:	4b06      	ldr	r3, [pc, #24]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008ce:	2200      	movs	r2, #0
900008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
900008d2:	4805      	ldr	r0, [pc, #20]	; (900008e8 <MX_USART6_UART_Init+0x58>)
900008d4:	f003 f83e 	bl	90003954 <HAL_UART_Init>
900008d8:	4603      	mov	r3, r0
900008da:	2b00      	cmp	r3, #0
900008dc:	d001      	beq.n	900008e2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
900008de:	f000 fc7f 	bl	900011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
900008e2:	bf00      	nop
900008e4:	bd80      	pop	{r7, pc}
900008e6:	bf00      	nop
900008e8:	c00000d4 	.word	0xc00000d4
900008ec:	40011400 	.word	0x40011400

900008f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
900008f0:	b580      	push	{r7, lr}
900008f2:	b088      	sub	sp, #32
900008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
900008f6:	1d3b      	adds	r3, r7, #4
900008f8:	2200      	movs	r2, #0
900008fa:	601a      	str	r2, [r3, #0]
900008fc:	605a      	str	r2, [r3, #4]
900008fe:	609a      	str	r2, [r3, #8]
90000900:	60da      	str	r2, [r3, #12]
90000902:	611a      	str	r2, [r3, #16]
90000904:	615a      	str	r2, [r3, #20]
90000906:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
90000908:	4b1f      	ldr	r3, [pc, #124]	; (90000988 <MX_FMC_Init+0x98>)
9000090a:	4a20      	ldr	r2, [pc, #128]	; (9000098c <MX_FMC_Init+0x9c>)
9000090c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
9000090e:	4b1e      	ldr	r3, [pc, #120]	; (90000988 <MX_FMC_Init+0x98>)
90000910:	2200      	movs	r2, #0
90000912:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
90000914:	4b1c      	ldr	r3, [pc, #112]	; (90000988 <MX_FMC_Init+0x98>)
90000916:	2200      	movs	r2, #0
90000918:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
9000091a:	4b1b      	ldr	r3, [pc, #108]	; (90000988 <MX_FMC_Init+0x98>)
9000091c:	2204      	movs	r2, #4
9000091e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90000920:	4b19      	ldr	r3, [pc, #100]	; (90000988 <MX_FMC_Init+0x98>)
90000922:	2210      	movs	r2, #16
90000924:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
90000926:	4b18      	ldr	r3, [pc, #96]	; (90000988 <MX_FMC_Init+0x98>)
90000928:	2200      	movs	r2, #0
9000092a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
9000092c:	4b16      	ldr	r3, [pc, #88]	; (90000988 <MX_FMC_Init+0x98>)
9000092e:	f44f 7280 	mov.w	r2, #256	; 0x100
90000932:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90000934:	4b14      	ldr	r3, [pc, #80]	; (90000988 <MX_FMC_Init+0x98>)
90000936:	2200      	movs	r2, #0
90000938:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
9000093a:	4b13      	ldr	r3, [pc, #76]	; (90000988 <MX_FMC_Init+0x98>)
9000093c:	f44f 6200 	mov.w	r2, #2048	; 0x800
90000940:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
90000942:	4b11      	ldr	r3, [pc, #68]	; (90000988 <MX_FMC_Init+0x98>)
90000944:	2200      	movs	r2, #0
90000946:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90000948:	4b0f      	ldr	r3, [pc, #60]	; (90000988 <MX_FMC_Init+0x98>)
9000094a:	2200      	movs	r2, #0
9000094c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
9000094e:	2302      	movs	r3, #2
90000950:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
90000952:	2307      	movs	r3, #7
90000954:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
90000956:	2304      	movs	r3, #4
90000958:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
9000095a:	2307      	movs	r3, #7
9000095c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
9000095e:	2302      	movs	r3, #2
90000960:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
90000962:	2302      	movs	r3, #2
90000964:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
90000966:	2302      	movs	r3, #2
90000968:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
9000096a:	1d3b      	adds	r3, r7, #4
9000096c:	4619      	mov	r1, r3
9000096e:	4806      	ldr	r0, [pc, #24]	; (90000988 <MX_FMC_Init+0x98>)
90000970:	f002 ffbc 	bl	900038ec <HAL_SDRAM_Init>
90000974:	4603      	mov	r3, r0
90000976:	2b00      	cmp	r3, #0
90000978:	d001      	beq.n	9000097e <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
9000097a:	f000 fc31 	bl	900011e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
9000097e:	bf00      	nop
90000980:	3720      	adds	r7, #32
90000982:	46bd      	mov	sp, r7
90000984:	bd80      	pop	{r7, pc}
90000986:	bf00      	nop
90000988:	c0000154 	.word	0xc0000154
9000098c:	a0000140 	.word	0xa0000140

90000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000990:	b580      	push	{r7, lr}
90000992:	b090      	sub	sp, #64	; 0x40
90000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000099a:	2200      	movs	r2, #0
9000099c:	601a      	str	r2, [r3, #0]
9000099e:	605a      	str	r2, [r3, #4]
900009a0:	609a      	str	r2, [r3, #8]
900009a2:	60da      	str	r2, [r3, #12]
900009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
900009a6:	4bae      	ldr	r3, [pc, #696]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009aa:	4aad      	ldr	r2, [pc, #692]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009ac:	f043 0310 	orr.w	r3, r3, #16
900009b0:	6313      	str	r3, [r2, #48]	; 0x30
900009b2:	4bab      	ldr	r3, [pc, #684]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009b6:	f003 0310 	and.w	r3, r3, #16
900009ba:	62bb      	str	r3, [r7, #40]	; 0x28
900009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
900009be:	4ba8      	ldr	r3, [pc, #672]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009c2:	4aa7      	ldr	r2, [pc, #668]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900009c8:	6313      	str	r3, [r2, #48]	; 0x30
900009ca:	4ba5      	ldr	r3, [pc, #660]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
900009d2:	627b      	str	r3, [r7, #36]	; 0x24
900009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
900009d6:	4ba2      	ldr	r3, [pc, #648]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009da:	4aa1      	ldr	r2, [pc, #644]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009dc:	f043 0302 	orr.w	r3, r3, #2
900009e0:	6313      	str	r3, [r2, #48]	; 0x30
900009e2:	4b9f      	ldr	r3, [pc, #636]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009e6:	f003 0302 	and.w	r3, r3, #2
900009ea:	623b      	str	r3, [r7, #32]
900009ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900009ee:	4b9c      	ldr	r3, [pc, #624]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009f2:	4a9b      	ldr	r2, [pc, #620]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009f4:	f043 0308 	orr.w	r3, r3, #8
900009f8:	6313      	str	r3, [r2, #48]	; 0x30
900009fa:	4b99      	ldr	r3, [pc, #612]	; (90000c60 <MX_GPIO_Init+0x2d0>)
900009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900009fe:	f003 0308 	and.w	r3, r3, #8
90000a02:	61fb      	str	r3, [r7, #28]
90000a04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000a06:	4b96      	ldr	r3, [pc, #600]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a0a:	4a95      	ldr	r2, [pc, #596]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a0c:	f043 0304 	orr.w	r3, r3, #4
90000a10:	6313      	str	r3, [r2, #48]	; 0x30
90000a12:	4b93      	ldr	r3, [pc, #588]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a16:	f003 0304 	and.w	r3, r3, #4
90000a1a:	61bb      	str	r3, [r7, #24]
90000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000a1e:	4b90      	ldr	r3, [pc, #576]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a22:	4a8f      	ldr	r2, [pc, #572]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a24:	f043 0301 	orr.w	r3, r3, #1
90000a28:	6313      	str	r3, [r2, #48]	; 0x30
90000a2a:	4b8d      	ldr	r3, [pc, #564]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a2e:	f003 0301 	and.w	r3, r3, #1
90000a32:	617b      	str	r3, [r7, #20]
90000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000a36:	4b8a      	ldr	r3, [pc, #552]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a3a:	4a89      	ldr	r2, [pc, #548]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90000a40:	6313      	str	r3, [r2, #48]	; 0x30
90000a42:	4b87      	ldr	r3, [pc, #540]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
90000a4a:	613b      	str	r3, [r7, #16]
90000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000a4e:	4b84      	ldr	r3, [pc, #528]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a52:	4a83      	ldr	r2, [pc, #524]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90000a58:	6313      	str	r3, [r2, #48]	; 0x30
90000a5a:	4b81      	ldr	r3, [pc, #516]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000a62:	60fb      	str	r3, [r7, #12]
90000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000a66:	4b7e      	ldr	r3, [pc, #504]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a6a:	4a7d      	ldr	r2, [pc, #500]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90000a70:	6313      	str	r3, [r2, #48]	; 0x30
90000a72:	4b7b      	ldr	r3, [pc, #492]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000a7a:	60bb      	str	r3, [r7, #8]
90000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90000a7e:	4b78      	ldr	r3, [pc, #480]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a82:	4a77      	ldr	r2, [pc, #476]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a84:	f043 0320 	orr.w	r3, r3, #32
90000a88:	6313      	str	r3, [r2, #48]	; 0x30
90000a8a:	4b75      	ldr	r3, [pc, #468]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a8e:	f003 0320 	and.w	r3, r3, #32
90000a92:	607b      	str	r3, [r7, #4]
90000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000a96:	4b72      	ldr	r3, [pc, #456]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a9a:	4a71      	ldr	r2, [pc, #452]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000aa0:	6313      	str	r3, [r2, #48]	; 0x30
90000aa2:	4b6f      	ldr	r3, [pc, #444]	; (90000c60 <MX_GPIO_Init+0x2d0>)
90000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000aaa:	603b      	str	r3, [r7, #0]
90000aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
90000aae:	2201      	movs	r2, #1
90000ab0:	2120      	movs	r1, #32
90000ab2:	486c      	ldr	r0, [pc, #432]	; (90000c64 <MX_GPIO_Init+0x2d4>)
90000ab4:	f001 fa10 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
90000ab8:	2200      	movs	r2, #0
90000aba:	210c      	movs	r1, #12
90000abc:	486a      	ldr	r0, [pc, #424]	; (90000c68 <MX_GPIO_Init+0x2d8>)
90000abe:	f001 fa0b 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90000ac2:	2200      	movs	r2, #0
90000ac4:	2108      	movs	r1, #8
90000ac6:	4869      	ldr	r0, [pc, #420]	; (90000c6c <MX_GPIO_Init+0x2dc>)
90000ac8:	f001 fa06 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
90000acc:	2201      	movs	r2, #1
90000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000ad2:	4865      	ldr	r0, [pc, #404]	; (90000c68 <MX_GPIO_Init+0x2d8>)
90000ad4:	f001 fa00 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
90000ad8:	2200      	movs	r2, #0
90000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90000ade:	4864      	ldr	r0, [pc, #400]	; (90000c70 <MX_GPIO_Init+0x2e0>)
90000ae0:	f001 f9fa 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
90000ae4:	2200      	movs	r2, #0
90000ae6:	21c8      	movs	r1, #200	; 0xc8
90000ae8:	4862      	ldr	r0, [pc, #392]	; (90000c74 <MX_GPIO_Init+0x2e4>)
90000aea:	f001 f9f5 	bl	90001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
90000aee:	2308      	movs	r3, #8
90000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000af2:	2300      	movs	r3, #0
90000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000af6:	2300      	movs	r3, #0
90000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000afe:	4619      	mov	r1, r3
90000b00:	485d      	ldr	r0, [pc, #372]	; (90000c78 <MX_GPIO_Init+0x2e8>)
90000b02:	f001 f83f 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
90000b06:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
90000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b0c:	2302      	movs	r3, #2
90000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b10:	2300      	movs	r3, #0
90000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000b14:	2303      	movs	r3, #3
90000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000b18:	230b      	movs	r3, #11
90000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b20:	4619      	mov	r1, r3
90000b22:	4854      	ldr	r0, [pc, #336]	; (90000c74 <MX_GPIO_Init+0x2e4>)
90000b24:	f001 f82e 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
90000b28:	f44f 7340 	mov.w	r3, #768	; 0x300
90000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000b2e:	2312      	movs	r3, #18
90000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000b32:	2301      	movs	r3, #1
90000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b36:	2300      	movs	r3, #0
90000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000b3a:	2304      	movs	r3, #4
90000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b42:	4619      	mov	r1, r3
90000b44:	484d      	ldr	r0, [pc, #308]	; (90000c7c <MX_GPIO_Init+0x2ec>)
90000b46:	f001 f81d 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
90000b4a:	f643 4323 	movw	r3, #15395	; 0x3c23
90000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b50:	2302      	movs	r3, #2
90000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b54:	2300      	movs	r3, #0
90000b56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000b58:	2303      	movs	r3, #3
90000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000b5c:	230a      	movs	r3, #10
90000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b64:	4619      	mov	r1, r3
90000b66:	4845      	ldr	r0, [pc, #276]	; (90000c7c <MX_GPIO_Init+0x2ec>)
90000b68:	f001 f80c 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
90000b6c:	2310      	movs	r3, #16
90000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b70:	2302      	movs	r3, #2
90000b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b74:	2300      	movs	r3, #0
90000b76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b78:	2300      	movs	r3, #0
90000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
90000b7c:	2302      	movs	r3, #2
90000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
90000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b84:	4619      	mov	r1, r3
90000b86:	483d      	ldr	r0, [pc, #244]	; (90000c7c <MX_GPIO_Init+0x2ec>)
90000b88:	f000 fffc 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
90000b8c:	2380      	movs	r3, #128	; 0x80
90000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b90:	2302      	movs	r3, #2
90000b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b94:	2300      	movs	r3, #0
90000b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b98:	2300      	movs	r3, #0
90000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
90000b9c:	2308      	movs	r3, #8
90000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
90000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ba4:	4619      	mov	r1, r3
90000ba6:	482f      	ldr	r0, [pc, #188]	; (90000c64 <MX_GPIO_Init+0x2d4>)
90000ba8:	f000 ffec 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
90000bac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
90000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bb2:	2302      	movs	r3, #2
90000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bb6:	2300      	movs	r3, #0
90000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000bba:	2303      	movs	r3, #3
90000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000bbe:	230c      	movs	r3, #12
90000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bc6:	4619      	mov	r1, r3
90000bc8:	482d      	ldr	r0, [pc, #180]	; (90000c80 <MX_GPIO_Init+0x2f0>)
90000bca:	f000 ffdb 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
90000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bd4:	2302      	movs	r3, #2
90000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bd8:	2300      	movs	r3, #0
90000bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000bdc:	2300      	movs	r3, #0
90000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
90000be0:	2301      	movs	r3, #1
90000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
90000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000be8:	4619      	mov	r1, r3
90000bea:	4826      	ldr	r0, [pc, #152]	; (90000c84 <MX_GPIO_Init+0x2f4>)
90000bec:	f000 ffca 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
90000bf0:	2360      	movs	r3, #96	; 0x60
90000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bf4:	2302      	movs	r3, #2
90000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bf8:	2300      	movs	r3, #0
90000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000bfc:	2300      	movs	r3, #0
90000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000c00:	230d      	movs	r3, #13
90000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c08:	4619      	mov	r1, r3
90000c0a:	481b      	ldr	r0, [pc, #108]	; (90000c78 <MX_GPIO_Init+0x2e8>)
90000c0c:	f000 ffba 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
90000c10:	2380      	movs	r3, #128	; 0x80
90000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c14:	2302      	movs	r3, #2
90000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c18:	2300      	movs	r3, #0
90000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c1c:	2300      	movs	r3, #0
90000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90000c20:	2307      	movs	r3, #7
90000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
90000c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c28:	4619      	mov	r1, r3
90000c2a:	4814      	ldr	r0, [pc, #80]	; (90000c7c <MX_GPIO_Init+0x2ec>)
90000c2c:	f000 ffaa 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
90000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000c36:	2300      	movs	r3, #0
90000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c3a:	2300      	movs	r3, #0
90000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
90000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c42:	4619      	mov	r1, r3
90000c44:	4810      	ldr	r0, [pc, #64]	; (90000c88 <MX_GPIO_Init+0x2f8>)
90000c46:	f000 ff9d 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
90000c4a:	2340      	movs	r3, #64	; 0x40
90000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000c4e:	4b0f      	ldr	r3, [pc, #60]	; (90000c8c <MX_GPIO_Init+0x2fc>)
90000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c52:	2300      	movs	r3, #0
90000c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
90000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c5a:	4619      	mov	r1, r3
90000c5c:	e018      	b.n	90000c90 <MX_GPIO_Init+0x300>
90000c5e:	bf00      	nop
90000c60:	40023800 	.word	0x40023800
90000c64:	40020c00 	.word	0x40020c00
90000c68:	40022000 	.word	0x40022000
90000c6c:	40022800 	.word	0x40022800
90000c70:	40021c00 	.word	0x40021c00
90000c74:	40021800 	.word	0x40021800
90000c78:	40021000 	.word	0x40021000
90000c7c:	40020400 	.word	0x40020400
90000c80:	40020800 	.word	0x40020800
90000c84:	40020000 	.word	0x40020000
90000c88:	40022400 	.word	0x40022400
90000c8c:	10120000 	.word	0x10120000
90000c90:	48bb      	ldr	r0, [pc, #748]	; (90000f80 <MX_GPIO_Init+0x5f0>)
90000c92:	f000 ff77 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
90000c96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
90000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c9c:	2302      	movs	r3, #2
90000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ca0:	2300      	movs	r3, #0
90000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000ca4:	2303      	movs	r3, #3
90000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
90000ca8:	230a      	movs	r3, #10
90000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cb0:	4619      	mov	r1, r3
90000cb2:	48b4      	ldr	r0, [pc, #720]	; (90000f84 <MX_GPIO_Init+0x5f4>)
90000cb4:	f000 ff66 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
90000cb8:	23f0      	movs	r3, #240	; 0xf0
90000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cbc:	2302      	movs	r3, #2
90000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cc0:	2300      	movs	r3, #0
90000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000cc4:	2300      	movs	r3, #0
90000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000cc8:	230a      	movs	r3, #10
90000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cd0:	4619      	mov	r1, r3
90000cd2:	48ad      	ldr	r0, [pc, #692]	; (90000f88 <MX_GPIO_Init+0x5f8>)
90000cd4:	f000 ff56 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
90000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cde:	2302      	movs	r3, #2
90000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ce2:	2300      	movs	r3, #0
90000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ce6:	2300      	movs	r3, #0
90000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000cea:	230a      	movs	r3, #10
90000cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
90000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cf2:	4619      	mov	r1, r3
90000cf4:	48a5      	ldr	r0, [pc, #660]	; (90000f8c <MX_GPIO_Init+0x5fc>)
90000cf6:	f000 ff45 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
90000cfa:	2320      	movs	r3, #32
90000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000cfe:	2301      	movs	r3, #1
90000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d02:	2300      	movs	r3, #0
90000d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d06:	2300      	movs	r3, #0
90000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
90000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d0e:	4619      	mov	r1, r3
90000d10:	489b      	ldr	r0, [pc, #620]	; (90000f80 <MX_GPIO_Init+0x5f0>)
90000d12:	f000 ff37 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
90000d16:	2308      	movs	r3, #8
90000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d1a:	2302      	movs	r3, #2
90000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d1e:	2300      	movs	r3, #0
90000d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d22:	2300      	movs	r3, #0
90000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000d26:	230d      	movs	r3, #13
90000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
90000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d2e:	4619      	mov	r1, r3
90000d30:	4893      	ldr	r0, [pc, #588]	; (90000f80 <MX_GPIO_Init+0x5f0>)
90000d32:	f000 ff27 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
90000d36:	f241 030c 	movw	r3, #4108	; 0x100c
90000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000d3c:	2301      	movs	r3, #1
90000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d40:	2300      	movs	r3, #0
90000d42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d44:	2300      	movs	r3, #0
90000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d4c:	4619      	mov	r1, r3
90000d4e:	488e      	ldr	r0, [pc, #568]	; (90000f88 <MX_GPIO_Init+0x5f8>)
90000d50:	f000 ff18 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
90000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000d5a:	2300      	movs	r3, #0
90000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d5e:	2300      	movs	r3, #0
90000d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
90000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d66:	4619      	mov	r1, r3
90000d68:	4889      	ldr	r0, [pc, #548]	; (90000f90 <MX_GPIO_Init+0x600>)
90000d6a:	f000 ff0b 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90000d6e:	2308      	movs	r3, #8
90000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000d72:	2301      	movs	r3, #1
90000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d76:	2300      	movs	r3, #0
90000d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d7a:	2300      	movs	r3, #0
90000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d82:	4619      	mov	r1, r3
90000d84:	4883      	ldr	r0, [pc, #524]	; (90000f94 <MX_GPIO_Init+0x604>)
90000d86:	f000 fefd 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
90000d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
90000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d90:	2302      	movs	r3, #2
90000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d94:	2300      	movs	r3, #0
90000d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d98:	2300      	movs	r3, #0
90000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000d9c:	230d      	movs	r3, #13
90000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
90000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000da4:	4619      	mov	r1, r3
90000da6:	4879      	ldr	r0, [pc, #484]	; (90000f8c <MX_GPIO_Init+0x5fc>)
90000da8:	f000 feec 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
90000dac:	2310      	movs	r3, #16
90000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000db0:	2300      	movs	r3, #0
90000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000db4:	2300      	movs	r3, #0
90000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000dbc:	4619      	mov	r1, r3
90000dbe:	4870      	ldr	r0, [pc, #448]	; (90000f80 <MX_GPIO_Init+0x5f0>)
90000dc0:	f000 fee0 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
90000dc4:	2304      	movs	r3, #4
90000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000dc8:	2302      	movs	r3, #2
90000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dcc:	2300      	movs	r3, #0
90000dce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000dd0:	2303      	movs	r3, #3
90000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000dd4:	230c      	movs	r3, #12
90000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
90000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ddc:	4619      	mov	r1, r3
90000dde:	4868      	ldr	r0, [pc, #416]	; (90000f80 <MX_GPIO_Init+0x5f0>)
90000de0:	f000 fed0 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
90000de4:	f248 0304 	movw	r3, #32772	; 0x8004
90000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000dea:	2300      	movs	r3, #0
90000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dee:	2300      	movs	r3, #0
90000df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000df6:	4619      	mov	r1, r3
90000df8:	4867      	ldr	r0, [pc, #412]	; (90000f98 <MX_GPIO_Init+0x608>)
90000dfa:	f000 fec3 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
90000dfe:	2302      	movs	r3, #2
90000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e02:	2302      	movs	r3, #2
90000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e06:	2300      	movs	r3, #0
90000e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e0a:	2300      	movs	r3, #0
90000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90000e0e:	2305      	movs	r3, #5
90000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
90000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e16:	4619      	mov	r1, r3
90000e18:	485b      	ldr	r0, [pc, #364]	; (90000f88 <MX_GPIO_Init+0x5f8>)
90000e1a:	f000 feb3 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
90000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000e24:	2301      	movs	r3, #1
90000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e28:	2300      	movs	r3, #0
90000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e2c:	2300      	movs	r3, #0
90000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
90000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e34:	4619      	mov	r1, r3
90000e36:	4858      	ldr	r0, [pc, #352]	; (90000f98 <MX_GPIO_Init+0x608>)
90000e38:	f000 fea4 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
90000e3c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
90000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e42:	2302      	movs	r3, #2
90000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e46:	2300      	movs	r3, #0
90000e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e4a:	2300      	movs	r3, #0
90000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000e4e:	230d      	movs	r3, #13
90000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e56:	4619      	mov	r1, r3
90000e58:	484f      	ldr	r0, [pc, #316]	; (90000f98 <MX_GPIO_Init+0x608>)
90000e5a:	f000 fe93 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
90000e5e:	2301      	movs	r3, #1
90000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e62:	2302      	movs	r3, #2
90000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e66:	2300      	movs	r3, #0
90000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e6a:	2300      	movs	r3, #0
90000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
90000e6e:	2302      	movs	r3, #2
90000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
90000e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e76:	4619      	mov	r1, r3
90000e78:	4843      	ldr	r0, [pc, #268]	; (90000f88 <MX_GPIO_Init+0x5f8>)
90000e7a:	f000 fe83 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
90000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
90000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e84:	2302      	movs	r3, #2
90000e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e88:	2300      	movs	r3, #0
90000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e8c:	2300      	movs	r3, #0
90000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90000e90:	2307      	movs	r3, #7
90000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
90000e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e98:	4619      	mov	r1, r3
90000e9a:	483a      	ldr	r0, [pc, #232]	; (90000f84 <MX_GPIO_Init+0x5f4>)
90000e9c:	f000 fe72 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
90000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
90000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ea6:	2302      	movs	r3, #2
90000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000eaa:	2300      	movs	r3, #0
90000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000eae:	2300      	movs	r3, #0
90000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
90000eb2:	2301      	movs	r3, #1
90000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
90000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eba:	4619      	mov	r1, r3
90000ebc:	4831      	ldr	r0, [pc, #196]	; (90000f84 <MX_GPIO_Init+0x5f4>)
90000ebe:	f000 fe61 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
90000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000ec8:	4b34      	ldr	r3, [pc, #208]	; (90000f9c <MX_GPIO_Init+0x60c>)
90000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ecc:	2300      	movs	r3, #0
90000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
90000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ed4:	4619      	mov	r1, r3
90000ed6:	482c      	ldr	r0, [pc, #176]	; (90000f88 <MX_GPIO_Init+0x5f8>)
90000ed8:	f000 fe54 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
90000edc:	2310      	movs	r3, #16
90000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ee0:	2302      	movs	r3, #2
90000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ee4:	2300      	movs	r3, #0
90000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000ee8:	2303      	movs	r3, #3
90000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000eec:	230a      	movs	r3, #10
90000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
90000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ef4:	4619      	mov	r1, r3
90000ef6:	4828      	ldr	r0, [pc, #160]	; (90000f98 <MX_GPIO_Init+0x608>)
90000ef8:	f000 fe44 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
90000efc:	23c8      	movs	r3, #200	; 0xc8
90000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f00:	2301      	movs	r3, #1
90000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f04:	2300      	movs	r3, #0
90000f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f08:	2300      	movs	r3, #0
90000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f10:	4619      	mov	r1, r3
90000f12:	481e      	ldr	r0, [pc, #120]	; (90000f8c <MX_GPIO_Init+0x5fc>)
90000f14:	f000 fe36 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
90000f18:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
90000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000f1e:	2303      	movs	r3, #3
90000f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f22:	2300      	movs	r3, #0
90000f24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f2a:	4619      	mov	r1, r3
90000f2c:	481c      	ldr	r0, [pc, #112]	; (90000fa0 <MX_GPIO_Init+0x610>)
90000f2e:	f000 fe29 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
90000f32:	2305      	movs	r3, #5
90000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f36:	2302      	movs	r3, #2
90000f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f3a:	2300      	movs	r3, #0
90000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f3e:	2303      	movs	r3, #3
90000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000f42:	230a      	movs	r3, #10
90000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f4a:	4619      	mov	r1, r3
90000f4c:	4810      	ldr	r0, [pc, #64]	; (90000f90 <MX_GPIO_Init+0x600>)
90000f4e:	f000 fe19 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
90000f52:	2332      	movs	r3, #50	; 0x32
90000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f56:	2302      	movs	r3, #2
90000f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f5a:	2300      	movs	r3, #0
90000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f5e:	2303      	movs	r3, #3
90000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000f62:	230b      	movs	r3, #11
90000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f6a:	4619      	mov	r1, r3
90000f6c:	4808      	ldr	r0, [pc, #32]	; (90000f90 <MX_GPIO_Init+0x600>)
90000f6e:	f000 fe09 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
90000f72:	2304      	movs	r3, #4
90000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000f76:	2300      	movs	r3, #0
90000f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f7a:	2300      	movs	r3, #0
90000f7c:	e012      	b.n	90000fa4 <MX_GPIO_Init+0x614>
90000f7e:	bf00      	nop
90000f80:	40020c00 	.word	0x40020c00
90000f84:	40020000 	.word	0x40020000
90000f88:	40022000 	.word	0x40022000
90000f8c:	40021800 	.word	0x40021800
90000f90:	40020800 	.word	0x40020800
90000f94:	40022800 	.word	0x40022800
90000f98:	40021c00 	.word	0x40021c00
90000f9c:	10120000 	.word	0x10120000
90000fa0:	40021400 	.word	0x40021400
90000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
90000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000faa:	4619      	mov	r1, r3
90000fac:	483a      	ldr	r0, [pc, #232]	; (90001098 <MX_GPIO_Init+0x708>)
90000fae:	f000 fde9 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
90000fb2:	2386      	movs	r3, #134	; 0x86
90000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000fb6:	2302      	movs	r3, #2
90000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fba:	2300      	movs	r3, #0
90000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000fbe:	2303      	movs	r3, #3
90000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000fc2:	230b      	movs	r3, #11
90000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fca:	4619      	mov	r1, r3
90000fcc:	4833      	ldr	r0, [pc, #204]	; (9000109c <MX_GPIO_Init+0x70c>)
90000fce:	f000 fdd9 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
90000fd2:	2301      	movs	r3, #1
90000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000fd6:	2303      	movs	r3, #3
90000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fda:	2300      	movs	r3, #0
90000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
90000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fe2:	4619      	mov	r1, r3
90000fe4:	482d      	ldr	r0, [pc, #180]	; (9000109c <MX_GPIO_Init+0x70c>)
90000fe6:	f000 fdcd 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
90000fea:	2350      	movs	r3, #80	; 0x50
90000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000fee:	2302      	movs	r3, #2
90000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ff2:	2300      	movs	r3, #0
90000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ff6:	2300      	movs	r3, #0
90000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000ffa:	230d      	movs	r3, #13
90000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001002:	4619      	mov	r1, r3
90001004:	4825      	ldr	r0, [pc, #148]	; (9000109c <MX_GPIO_Init+0x70c>)
90001006:	f000 fdbd 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
9000100a:	f44f 73c0 	mov.w	r3, #384	; 0x180
9000100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90001010:	2312      	movs	r3, #18
90001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90001014:	2301      	movs	r3, #1
90001016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001018:	2303      	movs	r3, #3
9000101a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
9000101c:	2304      	movs	r3, #4
9000101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90001020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001024:	4619      	mov	r1, r3
90001026:	481e      	ldr	r0, [pc, #120]	; (900010a0 <MX_GPIO_Init+0x710>)
90001028:	f000 fdac 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
9000102c:	2328      	movs	r3, #40	; 0x28
9000102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001030:	2302      	movs	r3, #2
90001032:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001034:	2300      	movs	r3, #0
90001036:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001038:	2303      	movs	r3, #3
9000103a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000103c:	230a      	movs	r3, #10
9000103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001044:	4619      	mov	r1, r3
90001046:	4815      	ldr	r0, [pc, #84]	; (9000109c <MX_GPIO_Init+0x70c>)
90001048:	f000 fd9c 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
9000104c:	2340      	movs	r3, #64	; 0x40
9000104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001050:	2302      	movs	r3, #2
90001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001054:	2300      	movs	r3, #0
90001056:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001058:	2300      	movs	r3, #0
9000105a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
9000105c:	2309      	movs	r3, #9
9000105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
90001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001064:	4619      	mov	r1, r3
90001066:	480e      	ldr	r0, [pc, #56]	; (900010a0 <MX_GPIO_Init+0x710>)
90001068:	f000 fd8c 	bl	90001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
9000106c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
90001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001072:	2302      	movs	r3, #2
90001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001076:	2300      	movs	r3, #0
90001078:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000107a:	2300      	movs	r3, #0
9000107c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
9000107e:	2305      	movs	r3, #5
90001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001086:	4619      	mov	r1, r3
90001088:	4806      	ldr	r0, [pc, #24]	; (900010a4 <MX_GPIO_Init+0x714>)
9000108a:	f000 fd7b 	bl	90001b84 <HAL_GPIO_Init>

}
9000108e:	bf00      	nop
90001090:	3740      	adds	r7, #64	; 0x40
90001092:	46bd      	mov	sp, r7
90001094:	bd80      	pop	{r7, pc}
90001096:	bf00      	nop
90001098:	40021800 	.word	0x40021800
9000109c:	40020000 	.word	0x40020000
900010a0:	40021c00 	.word	0x40021c00
900010a4:	40020400 	.word	0x40020400

900010a8 <MPU_Config>:

/* USER CODE BEGIN 4 */
/* MPU Configuration */
void MPU_Config(void)
{
900010a8:	b580      	push	{r7, lr}
900010aa:	b084      	sub	sp, #16
900010ac:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;
	/* Disables the MPU */
	HAL_MPU_Disable();
900010ae:	f000 fcf1 	bl	90001a94 <HAL_MPU_Disable>
	/* Configure the MPU attributes for region 0 */
	/* Configure the MPU attributes for SDRAM to normal memory*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900010b2:	2301      	movs	r3, #1
900010b4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
900010b6:	2300      	movs	r3, #0
900010b8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0000000;
900010ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
900010be:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
900010c0:	2316      	movs	r3, #22
900010c2:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
900010c4:	2300      	movs	r3, #0
900010c6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
900010c8:	2301      	movs	r3, #1
900010ca:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900010cc:	2303      	movs	r3, #3
900010ce:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
900010d0:	2300      	movs	r3, #0
900010d2:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
900010d4:	2300      	movs	r3, #0
900010d6:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900010d8:	2301      	movs	r3, #1
900010da:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
900010dc:	2301      	movs	r3, #1
900010de:	73fb      	strb	r3, [r7, #15]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
900010e0:	463b      	mov	r3, r7
900010e2:	4618      	mov	r0, r3
900010e4:	f000 fd0a 	bl	90001afc <HAL_MPU_ConfigRegion>
	/* Configure the MPU attributes for region 1 */
	/* Configure the MPU attributes for the frontbuffer to normal memory*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900010e8:	2301      	movs	r3, #1
900010ea:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900010ec:	2301      	movs	r3, #1
900010ee:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0000000;
900010f0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
900010f4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
900010f6:	2311      	movs	r3, #17
900010f8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
900010fa:	2300      	movs	r3, #0
900010fc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
900010fe:	2301      	movs	r3, #1
90001100:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001102:	2303      	movs	r3, #3
90001104:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90001106:	2301      	movs	r3, #1
90001108:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000110a:	2300      	movs	r3, #0
9000110c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
9000110e:	2301      	movs	r3, #1
90001110:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90001112:	2301      	movs	r3, #1
90001114:	73fb      	strb	r3, [r7, #15]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001116:	463b      	mov	r3, r7
90001118:	4618      	mov	r0, r3
9000111a:	f000 fcef 	bl	90001afc <HAL_MPU_ConfigRegion>
	/* Configure the MPU attributes for region 2 */
	/* Configure the MPU attributes for the backbuffer to normal memory*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000111e:	2301      	movs	r3, #1
90001120:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90001122:	2302      	movs	r3, #2
90001124:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0200000;
90001126:	4b29      	ldr	r3, [pc, #164]	; (900011cc <MPU_Config+0x124>)
90001128:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
9000112a:	2311      	movs	r3, #17
9000112c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
9000112e:	2300      	movs	r3, #0
90001130:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
90001132:	2301      	movs	r3, #1
90001134:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001136:	2303      	movs	r3, #3
90001138:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
9000113a:	2301      	movs	r3, #1
9000113c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000113e:	2300      	movs	r3, #0
90001140:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001142:	2301      	movs	r3, #1
90001144:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90001146:	2301      	movs	r3, #1
90001148:	73fb      	strb	r3, [r7, #15]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000114a:	463b      	mov	r3, r7
9000114c:	4618      	mov	r0, r3
9000114e:	f000 fcd5 	bl	90001afc <HAL_MPU_ConfigRegion>
	/* Configure the MPU attributes for region 3 */
	/* Configure the MPU attributes for Quad-SPI area to strongly ordered
	memory*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90001152:	2301      	movs	r3, #1
90001154:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90001156:	2303      	movs	r3, #3
90001158:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
9000115a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
9000115e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90001160:	231b      	movs	r3, #27
90001162:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
90001164:	2300      	movs	r3, #0
90001166:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001168:	2300      	movs	r3, #0
9000116a:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000116c:	2300      	movs	r3, #0
9000116e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90001170:	2301      	movs	r3, #1
90001172:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90001174:	2300      	movs	r3, #0
90001176:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90001178:	2300      	movs	r3, #0
9000117a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
9000117c:	2300      	movs	r3, #0
9000117e:	73fb      	strb	r3, [r7, #15]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001180:	463b      	mov	r3, r7
90001182:	4618      	mov	r0, r3
90001184:	f000 fcba 	bl	90001afc <HAL_MPU_ConfigRegion>
	/* Configure the MPU attributes for region 4 */
	/* Configure the MPU attributes for QSPI memory to normal memory*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90001188:	2301      	movs	r3, #1
9000118a:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000118c:	2304      	movs	r3, #4
9000118e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
90001190:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90001194:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
90001196:	2317      	movs	r3, #23
90001198:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
9000119a:	2300      	movs	r3, #0
9000119c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
9000119e:	2300      	movs	r3, #0
900011a0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
900011a2:	2305      	movs	r3, #5
900011a4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
900011a6:	2301      	movs	r3, #1
900011a8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
900011aa:	2300      	movs	r3, #0
900011ac:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900011ae:	2301      	movs	r3, #1
900011b0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
900011b2:	2300      	movs	r3, #0
900011b4:	73fb      	strb	r3, [r7, #15]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
900011b6:	463b      	mov	r3, r7
900011b8:	4618      	mov	r0, r3
900011ba:	f000 fc9f 	bl	90001afc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900011be:	2004      	movs	r0, #4
900011c0:	f000 fc7e 	bl	90001ac0 <HAL_MPU_Enable>
}
900011c4:	bf00      	nop
900011c6:	3710      	adds	r7, #16
900011c8:	46bd      	mov	sp, r7
900011ca:	bd80      	pop	{r7, pc}
900011cc:	c0200000 	.word	0xc0200000

900011d0 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
900011d0:	b580      	push	{r7, lr}
900011d2:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
900011d4:	f7ff f998 	bl	90000508 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
900011d8:	f7ff f9b6 	bl	90000548 <SCB_EnableDCache>
}
900011dc:	bf00      	nop
900011de:	bd80      	pop	{r7, pc}

900011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
900011e0:	b480      	push	{r7}
900011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
900011e4:	bf00      	nop
900011e6:	46bd      	mov	sp, r7
900011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ec:	4770      	bx	lr
	...

900011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
900011f0:	b480      	push	{r7}
900011f2:	b083      	sub	sp, #12
900011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
900011f6:	4b0f      	ldr	r3, [pc, #60]	; (90001234 <HAL_MspInit+0x44>)
900011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900011fa:	4a0e      	ldr	r2, [pc, #56]	; (90001234 <HAL_MspInit+0x44>)
900011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90001200:	6413      	str	r3, [r2, #64]	; 0x40
90001202:	4b0c      	ldr	r3, [pc, #48]	; (90001234 <HAL_MspInit+0x44>)
90001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000120a:	607b      	str	r3, [r7, #4]
9000120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000120e:	4b09      	ldr	r3, [pc, #36]	; (90001234 <HAL_MspInit+0x44>)
90001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001212:	4a08      	ldr	r2, [pc, #32]	; (90001234 <HAL_MspInit+0x44>)
90001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001218:	6453      	str	r3, [r2, #68]	; 0x44
9000121a:	4b06      	ldr	r3, [pc, #24]	; (90001234 <HAL_MspInit+0x44>)
9000121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001222:	603b      	str	r3, [r7, #0]
90001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90001226:	bf00      	nop
90001228:	370c      	adds	r7, #12
9000122a:	46bd      	mov	sp, r7
9000122c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001230:	4770      	bx	lr
90001232:	bf00      	nop
90001234:	40023800 	.word	0x40023800

90001238 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90001238:	b580      	push	{r7, lr}
9000123a:	b08e      	sub	sp, #56	; 0x38
9000123c:	af00      	add	r7, sp, #0
9000123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001244:	2200      	movs	r2, #0
90001246:	601a      	str	r2, [r3, #0]
90001248:	605a      	str	r2, [r3, #4]
9000124a:	609a      	str	r2, [r3, #8]
9000124c:	60da      	str	r2, [r3, #12]
9000124e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
90001250:	687b      	ldr	r3, [r7, #4]
90001252:	681b      	ldr	r3, [r3, #0]
90001254:	4a59      	ldr	r2, [pc, #356]	; (900013bc <HAL_LTDC_MspInit+0x184>)
90001256:	4293      	cmp	r3, r2
90001258:	f040 80ab 	bne.w	900013b2 <HAL_LTDC_MspInit+0x17a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
9000125c:	4b58      	ldr	r3, [pc, #352]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
9000125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001260:	4a57      	ldr	r2, [pc, #348]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
90001262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90001266:	6453      	str	r3, [r2, #68]	; 0x44
90001268:	4b55      	ldr	r3, [pc, #340]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
9000126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000126c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90001270:	623b      	str	r3, [r7, #32]
90001272:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
90001274:	4b52      	ldr	r3, [pc, #328]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
90001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001278:	4a51      	ldr	r2, [pc, #324]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
9000127a:	f043 0310 	orr.w	r3, r3, #16
9000127e:	6313      	str	r3, [r2, #48]	; 0x30
90001280:	4b4f      	ldr	r3, [pc, #316]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
90001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001284:	f003 0310 	and.w	r3, r3, #16
90001288:	61fb      	str	r3, [r7, #28]
9000128a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
9000128c:	4b4c      	ldr	r3, [pc, #304]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
9000128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001290:	4a4b      	ldr	r2, [pc, #300]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
90001292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90001296:	6313      	str	r3, [r2, #48]	; 0x30
90001298:	4b49      	ldr	r3, [pc, #292]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
9000129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
900012a0:	61bb      	str	r3, [r7, #24]
900012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
900012a4:	4b46      	ldr	r3, [pc, #280]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012a8:	4a45      	ldr	r2, [pc, #276]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900012ae:	6313      	str	r3, [r2, #48]	; 0x30
900012b0:	4b43      	ldr	r3, [pc, #268]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900012b8:	617b      	str	r3, [r7, #20]
900012ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
900012bc:	4b40      	ldr	r3, [pc, #256]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012c0:	4a3f      	ldr	r2, [pc, #252]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900012c6:	6313      	str	r3, [r2, #48]	; 0x30
900012c8:	4b3d      	ldr	r3, [pc, #244]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
900012d0:	613b      	str	r3, [r7, #16]
900012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
900012d4:	4b3a      	ldr	r3, [pc, #232]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012d8:	4a39      	ldr	r2, [pc, #228]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012de:	6313      	str	r3, [r2, #48]	; 0x30
900012e0:	4b37      	ldr	r3, [pc, #220]	; (900013c0 <HAL_LTDC_MspInit+0x188>)
900012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012e8:	60fb      	str	r3, [r7, #12]
900012ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
900012ec:	2310      	movs	r3, #16
900012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900012f0:	2302      	movs	r3, #2
900012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900012f4:	2300      	movs	r3, #0
900012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900012f8:	2303      	movs	r3, #3
900012fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900012fc:	230e      	movs	r3, #14
900012fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
90001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001304:	4619      	mov	r1, r3
90001306:	482f      	ldr	r0, [pc, #188]	; (900013c4 <HAL_LTDC_MspInit+0x18c>)
90001308:	f000 fc3c 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
9000130c:	f64e 73ff 	movw	r3, #61439	; 0xefff
90001310:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001312:	2302      	movs	r3, #2
90001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001316:	2300      	movs	r3, #0
90001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000131a:	2303      	movs	r3, #3
9000131c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000131e:	230e      	movs	r3, #14
90001320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001326:	4619      	mov	r1, r3
90001328:	4827      	ldr	r0, [pc, #156]	; (900013c8 <HAL_LTDC_MspInit+0x190>)
9000132a:	f000 fc2b 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
9000132e:	23f7      	movs	r3, #247	; 0xf7
90001330:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001332:	2302      	movs	r3, #2
90001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001336:	2300      	movs	r3, #0
90001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000133a:	2303      	movs	r3, #3
9000133c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000133e:	230e      	movs	r3, #14
90001340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001346:	4619      	mov	r1, r3
90001348:	4820      	ldr	r0, [pc, #128]	; (900013cc <HAL_LTDC_MspInit+0x194>)
9000134a:	f000 fc1b 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
9000134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001354:	2302      	movs	r3, #2
90001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001358:	2300      	movs	r3, #0
9000135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000135c:	2303      	movs	r3, #3
9000135e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
90001360:	2309      	movs	r3, #9
90001362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
90001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001368:	4619      	mov	r1, r3
9000136a:	4819      	ldr	r0, [pc, #100]	; (900013d0 <HAL_LTDC_MspInit+0x198>)
9000136c:	f000 fc0a 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
90001370:	f44f 4346 	mov.w	r3, #50688	; 0xc600
90001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001376:	2302      	movs	r3, #2
90001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000137a:	2300      	movs	r3, #0
9000137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000137e:	2303      	movs	r3, #3
90001380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90001382:	230e      	movs	r3, #14
90001384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000138a:	4619      	mov	r1, r3
9000138c:	4811      	ldr	r0, [pc, #68]	; (900013d4 <HAL_LTDC_MspInit+0x19c>)
9000138e:	f000 fbf9 	bl	90001b84 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
90001392:	2200      	movs	r2, #0
90001394:	2100      	movs	r1, #0
90001396:	2058      	movs	r0, #88	; 0x58
90001398:	f000 fb45 	bl	90001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
9000139c:	2058      	movs	r0, #88	; 0x58
9000139e:	f000 fb5e 	bl	90001a5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
900013a2:	2200      	movs	r2, #0
900013a4:	2100      	movs	r1, #0
900013a6:	2059      	movs	r0, #89	; 0x59
900013a8:	f000 fb3d 	bl	90001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
900013ac:	2059      	movs	r0, #89	; 0x59
900013ae:	f000 fb56 	bl	90001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
900013b2:	bf00      	nop
900013b4:	3738      	adds	r7, #56	; 0x38
900013b6:	46bd      	mov	sp, r7
900013b8:	bd80      	pop	{r7, pc}
900013ba:	bf00      	nop
900013bc:	40016800 	.word	0x40016800
900013c0:	40023800 	.word	0x40023800
900013c4:	40021000 	.word	0x40021000
900013c8:	40022400 	.word	0x40022400
900013cc:	40022800 	.word	0x40022800
900013d0:	40021800 	.word	0x40021800
900013d4:	40022000 	.word	0x40022000

900013d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
900013d8:	b580      	push	{r7, lr}
900013da:	b08c      	sub	sp, #48	; 0x30
900013dc:	af00      	add	r7, sp, #0
900013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900013e0:	f107 031c 	add.w	r3, r7, #28
900013e4:	2200      	movs	r2, #0
900013e6:	601a      	str	r2, [r3, #0]
900013e8:	605a      	str	r2, [r3, #4]
900013ea:	609a      	str	r2, [r3, #8]
900013ec:	60da      	str	r2, [r3, #12]
900013ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
900013f0:	687b      	ldr	r3, [r7, #4]
900013f2:	681b      	ldr	r3, [r3, #0]
900013f4:	4a3b      	ldr	r2, [pc, #236]	; (900014e4 <HAL_QSPI_MspInit+0x10c>)
900013f6:	4293      	cmp	r3, r2
900013f8:	d170      	bne.n	900014dc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
900013fa:	4b3b      	ldr	r3, [pc, #236]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
900013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900013fe:	4a3a      	ldr	r2, [pc, #232]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001400:	f043 0302 	orr.w	r3, r3, #2
90001404:	6393      	str	r3, [r2, #56]	; 0x38
90001406:	4b38      	ldr	r3, [pc, #224]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000140a:	f003 0302 	and.w	r3, r3, #2
9000140e:	61bb      	str	r3, [r7, #24]
90001410:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
90001412:	4b35      	ldr	r3, [pc, #212]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001416:	4a34      	ldr	r2, [pc, #208]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001418:	f043 0310 	orr.w	r3, r3, #16
9000141c:	6313      	str	r3, [r2, #48]	; 0x30
9000141e:	4b32      	ldr	r3, [pc, #200]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001422:	f003 0310 	and.w	r3, r3, #16
90001426:	617b      	str	r3, [r7, #20]
90001428:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000142a:	4b2f      	ldr	r3, [pc, #188]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
9000142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000142e:	4a2e      	ldr	r2, [pc, #184]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001430:	f043 0302 	orr.w	r3, r3, #2
90001434:	6313      	str	r3, [r2, #48]	; 0x30
90001436:	4b2c      	ldr	r3, [pc, #176]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000143a:	f003 0302 	and.w	r3, r3, #2
9000143e:	613b      	str	r3, [r7, #16]
90001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90001442:	4b29      	ldr	r3, [pc, #164]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001446:	4a28      	ldr	r2, [pc, #160]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001448:	f043 0308 	orr.w	r3, r3, #8
9000144c:	6313      	str	r3, [r2, #48]	; 0x30
9000144e:	4b26      	ldr	r3, [pc, #152]	; (900014e8 <HAL_QSPI_MspInit+0x110>)
90001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001452:	f003 0308 	and.w	r3, r3, #8
90001456:	60fb      	str	r3, [r7, #12]
90001458:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
9000145a:	2304      	movs	r3, #4
9000145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000145e:	2302      	movs	r3, #2
90001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001462:	2300      	movs	r3, #0
90001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001466:	2303      	movs	r3, #3
90001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
9000146a:	2309      	movs	r3, #9
9000146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
9000146e:	f107 031c 	add.w	r3, r7, #28
90001472:	4619      	mov	r1, r3
90001474:	481d      	ldr	r0, [pc, #116]	; (900014ec <HAL_QSPI_MspInit+0x114>)
90001476:	f000 fb85 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
9000147a:	2340      	movs	r3, #64	; 0x40
9000147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000147e:	2302      	movs	r3, #2
90001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001482:	2300      	movs	r3, #0
90001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001486:	2303      	movs	r3, #3
90001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
9000148a:	230a      	movs	r3, #10
9000148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
9000148e:	f107 031c 	add.w	r3, r7, #28
90001492:	4619      	mov	r1, r3
90001494:	4816      	ldr	r0, [pc, #88]	; (900014f0 <HAL_QSPI_MspInit+0x118>)
90001496:	f000 fb75 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000149a:	2304      	movs	r3, #4
9000149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000149e:	2302      	movs	r3, #2
900014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900014a2:	2300      	movs	r3, #0
900014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900014a6:	2303      	movs	r3, #3
900014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
900014aa:	2309      	movs	r3, #9
900014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900014ae:	f107 031c 	add.w	r3, r7, #28
900014b2:	4619      	mov	r1, r3
900014b4:	480e      	ldr	r0, [pc, #56]	; (900014f0 <HAL_QSPI_MspInit+0x118>)
900014b6:	f000 fb65 	bl	90001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
900014ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
900014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900014c0:	2302      	movs	r3, #2
900014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900014c4:	2300      	movs	r3, #0
900014c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900014c8:	2303      	movs	r3, #3
900014ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
900014cc:	2309      	movs	r3, #9
900014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900014d0:	f107 031c 	add.w	r3, r7, #28
900014d4:	4619      	mov	r1, r3
900014d6:	4807      	ldr	r0, [pc, #28]	; (900014f4 <HAL_QSPI_MspInit+0x11c>)
900014d8:	f000 fb54 	bl	90001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
900014dc:	bf00      	nop
900014de:	3730      	adds	r7, #48	; 0x30
900014e0:	46bd      	mov	sp, r7
900014e2:	bd80      	pop	{r7, pc}
900014e4:	a0001000 	.word	0xa0001000
900014e8:	40023800 	.word	0x40023800
900014ec:	40021000 	.word	0x40021000
900014f0:	40020400 	.word	0x40020400
900014f4:	40020c00 	.word	0x40020c00

900014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
900014f8:	b580      	push	{r7, lr}
900014fa:	b08a      	sub	sp, #40	; 0x28
900014fc:	af00      	add	r7, sp, #0
900014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001500:	f107 0314 	add.w	r3, r7, #20
90001504:	2200      	movs	r2, #0
90001506:	601a      	str	r2, [r3, #0]
90001508:	605a      	str	r2, [r3, #4]
9000150a:	609a      	str	r2, [r3, #8]
9000150c:	60da      	str	r2, [r3, #12]
9000150e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
90001510:	687b      	ldr	r3, [r7, #4]
90001512:	681b      	ldr	r3, [r3, #0]
90001514:	4a17      	ldr	r2, [pc, #92]	; (90001574 <HAL_UART_MspInit+0x7c>)
90001516:	4293      	cmp	r3, r2
90001518:	d127      	bne.n	9000156a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
9000151a:	4b17      	ldr	r3, [pc, #92]	; (90001578 <HAL_UART_MspInit+0x80>)
9000151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000151e:	4a16      	ldr	r2, [pc, #88]	; (90001578 <HAL_UART_MspInit+0x80>)
90001520:	f043 0320 	orr.w	r3, r3, #32
90001524:	6453      	str	r3, [r2, #68]	; 0x44
90001526:	4b14      	ldr	r3, [pc, #80]	; (90001578 <HAL_UART_MspInit+0x80>)
90001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000152a:	f003 0320 	and.w	r3, r3, #32
9000152e:	613b      	str	r3, [r7, #16]
90001530:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
90001532:	4b11      	ldr	r3, [pc, #68]	; (90001578 <HAL_UART_MspInit+0x80>)
90001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001536:	4a10      	ldr	r2, [pc, #64]	; (90001578 <HAL_UART_MspInit+0x80>)
90001538:	f043 0304 	orr.w	r3, r3, #4
9000153c:	6313      	str	r3, [r2, #48]	; 0x30
9000153e:	4b0e      	ldr	r3, [pc, #56]	; (90001578 <HAL_UART_MspInit+0x80>)
90001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001542:	f003 0304 	and.w	r3, r3, #4
90001546:	60fb      	str	r3, [r7, #12]
90001548:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX 
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
9000154a:	23c0      	movs	r3, #192	; 0xc0
9000154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000154e:	2302      	movs	r3, #2
90001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001552:	2300      	movs	r3, #0
90001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001556:	2303      	movs	r3, #3
90001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
9000155a:	2308      	movs	r3, #8
9000155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000155e:	f107 0314 	add.w	r3, r7, #20
90001562:	4619      	mov	r1, r3
90001564:	4805      	ldr	r0, [pc, #20]	; (9000157c <HAL_UART_MspInit+0x84>)
90001566:	f000 fb0d 	bl	90001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
9000156a:	bf00      	nop
9000156c:	3728      	adds	r7, #40	; 0x28
9000156e:	46bd      	mov	sp, r7
90001570:	bd80      	pop	{r7, pc}
90001572:	bf00      	nop
90001574:	40011400 	.word	0x40011400
90001578:	40023800 	.word	0x40023800
9000157c:	40020800 	.word	0x40020800

90001580 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
90001580:	b580      	push	{r7, lr}
90001582:	b086      	sub	sp, #24
90001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90001586:	1d3b      	adds	r3, r7, #4
90001588:	2200      	movs	r2, #0
9000158a:	601a      	str	r2, [r3, #0]
9000158c:	605a      	str	r2, [r3, #4]
9000158e:	609a      	str	r2, [r3, #8]
90001590:	60da      	str	r2, [r3, #12]
90001592:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
90001594:	4b3a      	ldr	r3, [pc, #232]	; (90001680 <HAL_FMC_MspInit+0x100>)
90001596:	681b      	ldr	r3, [r3, #0]
90001598:	2b00      	cmp	r3, #0
9000159a:	d16d      	bne.n	90001678 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
9000159c:	4b38      	ldr	r3, [pc, #224]	; (90001680 <HAL_FMC_MspInit+0x100>)
9000159e:	2201      	movs	r2, #1
900015a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
900015a2:	4b38      	ldr	r3, [pc, #224]	; (90001684 <HAL_FMC_MspInit+0x104>)
900015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900015a6:	4a37      	ldr	r2, [pc, #220]	; (90001684 <HAL_FMC_MspInit+0x104>)
900015a8:	f043 0301 	orr.w	r3, r3, #1
900015ac:	6393      	str	r3, [r2, #56]	; 0x38
900015ae:	4b35      	ldr	r3, [pc, #212]	; (90001684 <HAL_FMC_MspInit+0x104>)
900015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900015b2:	f003 0301 	and.w	r3, r3, #1
900015b6:	603b      	str	r3, [r7, #0]
900015b8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
900015ba:	f64f 7383 	movw	r3, #65411	; 0xff83
900015be:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900015c0:	2302      	movs	r3, #2
900015c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900015c4:	2300      	movs	r3, #0
900015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900015c8:	2303      	movs	r3, #3
900015ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900015cc:	230c      	movs	r3, #12
900015ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900015d0:	1d3b      	adds	r3, r7, #4
900015d2:	4619      	mov	r1, r3
900015d4:	482c      	ldr	r0, [pc, #176]	; (90001688 <HAL_FMC_MspInit+0x108>)
900015d6:	f000 fad5 	bl	90001b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
900015da:	f248 1333 	movw	r3, #33075	; 0x8133
900015de:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900015e0:	2302      	movs	r3, #2
900015e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900015e4:	2300      	movs	r3, #0
900015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900015e8:	2303      	movs	r3, #3
900015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900015ec:	230c      	movs	r3, #12
900015ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900015f0:	1d3b      	adds	r3, r7, #4
900015f2:	4619      	mov	r1, r3
900015f4:	4825      	ldr	r0, [pc, #148]	; (9000168c <HAL_FMC_MspInit+0x10c>)
900015f6:	f000 fac5 	bl	90001b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
900015fa:	f24c 7303 	movw	r3, #50947	; 0xc703
900015fe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001600:	2302      	movs	r3, #2
90001602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001604:	2300      	movs	r3, #0
90001606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001608:	2303      	movs	r3, #3
9000160a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000160c:	230c      	movs	r3, #12
9000160e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001610:	1d3b      	adds	r3, r7, #4
90001612:	4619      	mov	r1, r3
90001614:	481e      	ldr	r0, [pc, #120]	; (90001690 <HAL_FMC_MspInit+0x110>)
90001616:	f000 fab5 	bl	90001b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
9000161a:	f64f 033f 	movw	r3, #63551	; 0xf83f
9000161e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001620:	2302      	movs	r3, #2
90001622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001624:	2300      	movs	r3, #0
90001626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001628:	2303      	movs	r3, #3
9000162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000162c:	230c      	movs	r3, #12
9000162e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90001630:	1d3b      	adds	r3, r7, #4
90001632:	4619      	mov	r1, r3
90001634:	4817      	ldr	r0, [pc, #92]	; (90001694 <HAL_FMC_MspInit+0x114>)
90001636:	f000 faa5 	bl	90001b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
9000163a:	2328      	movs	r3, #40	; 0x28
9000163c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000163e:	2302      	movs	r3, #2
90001640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001642:	2300      	movs	r3, #0
90001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001646:	2303      	movs	r3, #3
90001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000164a:	230c      	movs	r3, #12
9000164c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000164e:	1d3b      	adds	r3, r7, #4
90001650:	4619      	mov	r1, r3
90001652:	4811      	ldr	r0, [pc, #68]	; (90001698 <HAL_FMC_MspInit+0x118>)
90001654:	f000 fa96 	bl	90001b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
90001658:	2308      	movs	r3, #8
9000165a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000165c:	2302      	movs	r3, #2
9000165e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001660:	2300      	movs	r3, #0
90001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001664:	2303      	movs	r3, #3
90001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90001668:	230c      	movs	r3, #12
9000166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
9000166c:	1d3b      	adds	r3, r7, #4
9000166e:	4619      	mov	r1, r3
90001670:	480a      	ldr	r0, [pc, #40]	; (9000169c <HAL_FMC_MspInit+0x11c>)
90001672:	f000 fa87 	bl	90001b84 <HAL_GPIO_Init>
90001676:	e000      	b.n	9000167a <HAL_FMC_MspInit+0xfa>
    return;
90001678:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
9000167a:	3718      	adds	r7, #24
9000167c:	46bd      	mov	sp, r7
9000167e:	bd80      	pop	{r7, pc}
90001680:	c0000028 	.word	0xc0000028
90001684:	40023800 	.word	0x40023800
90001688:	40021000 	.word	0x40021000
9000168c:	40021800 	.word	0x40021800
90001690:	40020c00 	.word	0x40020c00
90001694:	40021400 	.word	0x40021400
90001698:	40021c00 	.word	0x40021c00
9000169c:	40020800 	.word	0x40020800

900016a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
900016a0:	b580      	push	{r7, lr}
900016a2:	b082      	sub	sp, #8
900016a4:	af00      	add	r7, sp, #0
900016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
900016a8:	f7ff ff6a 	bl	90001580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
900016ac:	bf00      	nop
900016ae:	3708      	adds	r7, #8
900016b0:	46bd      	mov	sp, r7
900016b2:	bd80      	pop	{r7, pc}

900016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
900016b4:	b480      	push	{r7}
900016b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
900016b8:	bf00      	nop
900016ba:	46bd      	mov	sp, r7
900016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900016c0:	4770      	bx	lr

900016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
900016c2:	b480      	push	{r7}
900016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900016c6:	e7fe      	b.n	900016c6 <HardFault_Handler+0x4>

900016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
900016c8:	b480      	push	{r7}
900016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900016cc:	e7fe      	b.n	900016cc <MemManage_Handler+0x4>

900016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
900016ce:	b480      	push	{r7}
900016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900016d2:	e7fe      	b.n	900016d2 <BusFault_Handler+0x4>

900016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
900016d4:	b480      	push	{r7}
900016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900016d8:	e7fe      	b.n	900016d8 <UsageFault_Handler+0x4>

900016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
900016da:	b480      	push	{r7}
900016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
900016de:	bf00      	nop
900016e0:	46bd      	mov	sp, r7
900016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900016e6:	4770      	bx	lr

900016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
900016e8:	b480      	push	{r7}
900016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
900016ec:	bf00      	nop
900016ee:	46bd      	mov	sp, r7
900016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900016f4:	4770      	bx	lr

900016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
900016f6:	b480      	push	{r7}
900016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
900016fa:	bf00      	nop
900016fc:	46bd      	mov	sp, r7
900016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90001702:	4770      	bx	lr

90001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90001704:	b580      	push	{r7, lr}
90001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90001708:	f000 f892 	bl	90001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
9000170c:	bf00      	nop
9000170e:	bd80      	pop	{r7, pc}

90001710 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
90001710:	b580      	push	{r7, lr}
90001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90001714:	4802      	ldr	r0, [pc, #8]	; (90001720 <LTDC_IRQHandler+0x10>)
90001716:	f000 fcc9 	bl	900020ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
9000171a:	bf00      	nop
9000171c:	bd80      	pop	{r7, pc}
9000171e:	bf00      	nop
90001720:	c000002c 	.word	0xc000002c

90001724 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
90001724:	b580      	push	{r7, lr}
90001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90001728:	4802      	ldr	r0, [pc, #8]	; (90001734 <LTDC_ER_IRQHandler+0x10>)
9000172a:	f000 fcbf 	bl	900020ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
9000172e:	bf00      	nop
90001730:	bd80      	pop	{r7, pc}
90001732:	bf00      	nop
90001734:	c000002c 	.word	0xc000002c

90001738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90001738:	b480      	push	{r7}
9000173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
9000173c:	4b08      	ldr	r3, [pc, #32]	; (90001760 <SystemInit+0x28>)
9000173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001742:	4a07      	ldr	r2, [pc, #28]	; (90001760 <SystemInit+0x28>)
90001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
9000174c:	4b04      	ldr	r3, [pc, #16]	; (90001760 <SystemInit+0x28>)
9000174e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
90001752:	609a      	str	r2, [r3, #8]
#endif
}
90001754:	bf00      	nop
90001756:	46bd      	mov	sp, r7
90001758:	f85d 7b04 	ldr.w	r7, [sp], #4
9000175c:	4770      	bx	lr
9000175e:	bf00      	nop
90001760:	e000ed00 	.word	0xe000ed00

90001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 9000179c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90001768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
9000176a:	e003      	b.n	90001774 <LoopCopyDataInit>

9000176c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
9000176c:	4b0c      	ldr	r3, [pc, #48]	; (900017a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000176e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90001770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
90001772:	3104      	adds	r1, #4

90001774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90001774:	480b      	ldr	r0, [pc, #44]	; (900017a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90001776:	4b0c      	ldr	r3, [pc, #48]	; (900017a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90001778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
9000177a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
9000177c:	d3f6      	bcc.n	9000176c <CopyDataInit>
  ldr  r2, =_sbss
9000177e:	4a0b      	ldr	r2, [pc, #44]	; (900017ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
90001780:	e002      	b.n	90001788 <LoopFillZerobss>

90001782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
90001782:	2300      	movs	r3, #0
  str  r3, [r2], #4
90001784:	f842 3b04 	str.w	r3, [r2], #4

90001788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90001788:	4b09      	ldr	r3, [pc, #36]	; (900017b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
9000178a:	429a      	cmp	r2, r3
  bcc  FillZerobss
9000178c:	d3f9      	bcc.n	90001782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000178e:	f7ff ffd3 	bl	90001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90001792:	f002 fe15 	bl	900043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90001796:	f7fe ff17 	bl	900005c8 <main>
  bx  lr    
9000179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000179c:	c0800000 	.word	0xc0800000
  ldr  r3, =_sidata
900017a0:	90004458 	.word	0x90004458
  ldr  r0, =_sdata
900017a4:	c0000000 	.word	0xc0000000
  ldr  r3, =_edata
900017a8:	c000000c 	.word	0xc000000c
  ldr  r2, =_sbss
900017ac:	c000000c 	.word	0xc000000c
  ldr  r3, = _ebss
900017b0:	c00001d8 	.word	0xc00001d8

900017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900017b4:	e7fe      	b.n	900017b4 <ADC_IRQHandler>

900017b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900017b6:	b580      	push	{r7, lr}
900017b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900017ba:	2003      	movs	r0, #3
900017bc:	f000 f928 	bl	90001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
900017c0:	2000      	movs	r0, #0
900017c2:	f000 f805 	bl	900017d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
900017c6:	f7ff fd13 	bl	900011f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
900017ca:	2300      	movs	r3, #0
}
900017cc:	4618      	mov	r0, r3
900017ce:	bd80      	pop	{r7, pc}

900017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900017d0:	b580      	push	{r7, lr}
900017d2:	b082      	sub	sp, #8
900017d4:	af00      	add	r7, sp, #0
900017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900017d8:	4b12      	ldr	r3, [pc, #72]	; (90001824 <HAL_InitTick+0x54>)
900017da:	681a      	ldr	r2, [r3, #0]
900017dc:	4b12      	ldr	r3, [pc, #72]	; (90001828 <HAL_InitTick+0x58>)
900017de:	781b      	ldrb	r3, [r3, #0]
900017e0:	4619      	mov	r1, r3
900017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900017e6:	fbb3 f3f1 	udiv	r3, r3, r1
900017ea:	fbb2 f3f3 	udiv	r3, r2, r3
900017ee:	4618      	mov	r0, r3
900017f0:	f000 f943 	bl	90001a7a <HAL_SYSTICK_Config>
900017f4:	4603      	mov	r3, r0
900017f6:	2b00      	cmp	r3, #0
900017f8:	d001      	beq.n	900017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
900017fa:	2301      	movs	r3, #1
900017fc:	e00e      	b.n	9000181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900017fe:	687b      	ldr	r3, [r7, #4]
90001800:	2b0f      	cmp	r3, #15
90001802:	d80a      	bhi.n	9000181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001804:	2200      	movs	r2, #0
90001806:	6879      	ldr	r1, [r7, #4]
90001808:	f04f 30ff 	mov.w	r0, #4294967295
9000180c:	f000 f90b 	bl	90001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001810:	4a06      	ldr	r2, [pc, #24]	; (9000182c <HAL_InitTick+0x5c>)
90001812:	687b      	ldr	r3, [r7, #4]
90001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90001816:	2300      	movs	r3, #0
90001818:	e000      	b.n	9000181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
9000181a:	2301      	movs	r3, #1
}
9000181c:	4618      	mov	r0, r3
9000181e:	3708      	adds	r7, #8
90001820:	46bd      	mov	sp, r7
90001822:	bd80      	pop	{r7, pc}
90001824:	c0000000 	.word	0xc0000000
90001828:	c0000008 	.word	0xc0000008
9000182c:	c0000004 	.word	0xc0000004

90001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001830:	b480      	push	{r7}
90001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001834:	4b06      	ldr	r3, [pc, #24]	; (90001850 <HAL_IncTick+0x20>)
90001836:	781b      	ldrb	r3, [r3, #0]
90001838:	461a      	mov	r2, r3
9000183a:	4b06      	ldr	r3, [pc, #24]	; (90001854 <HAL_IncTick+0x24>)
9000183c:	681b      	ldr	r3, [r3, #0]
9000183e:	4413      	add	r3, r2
90001840:	4a04      	ldr	r2, [pc, #16]	; (90001854 <HAL_IncTick+0x24>)
90001842:	6013      	str	r3, [r2, #0]
}
90001844:	bf00      	nop
90001846:	46bd      	mov	sp, r7
90001848:	f85d 7b04 	ldr.w	r7, [sp], #4
9000184c:	4770      	bx	lr
9000184e:	bf00      	nop
90001850:	c0000008 	.word	0xc0000008
90001854:	c00001d4 	.word	0xc00001d4

90001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001858:	b480      	push	{r7}
9000185a:	af00      	add	r7, sp, #0
  return uwTick;
9000185c:	4b03      	ldr	r3, [pc, #12]	; (9000186c <HAL_GetTick+0x14>)
9000185e:	681b      	ldr	r3, [r3, #0]
}
90001860:	4618      	mov	r0, r3
90001862:	46bd      	mov	sp, r7
90001864:	f85d 7b04 	ldr.w	r7, [sp], #4
90001868:	4770      	bx	lr
9000186a:	bf00      	nop
9000186c:	c00001d4 	.word	0xc00001d4

90001870 <__NVIC_SetPriorityGrouping>:
{
90001870:	b480      	push	{r7}
90001872:	b085      	sub	sp, #20
90001874:	af00      	add	r7, sp, #0
90001876:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90001878:	687b      	ldr	r3, [r7, #4]
9000187a:	f003 0307 	and.w	r3, r3, #7
9000187e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001880:	4b0b      	ldr	r3, [pc, #44]	; (900018b0 <__NVIC_SetPriorityGrouping+0x40>)
90001882:	68db      	ldr	r3, [r3, #12]
90001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90001886:	68ba      	ldr	r2, [r7, #8]
90001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
9000188c:	4013      	ands	r3, r2
9000188e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90001890:	68fb      	ldr	r3, [r7, #12]
90001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90001894:	68bb      	ldr	r3, [r7, #8]
90001896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90001898:	4b06      	ldr	r3, [pc, #24]	; (900018b4 <__NVIC_SetPriorityGrouping+0x44>)
9000189a:	4313      	orrs	r3, r2
9000189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000189e:	4a04      	ldr	r2, [pc, #16]	; (900018b0 <__NVIC_SetPriorityGrouping+0x40>)
900018a0:	68bb      	ldr	r3, [r7, #8]
900018a2:	60d3      	str	r3, [r2, #12]
}
900018a4:	bf00      	nop
900018a6:	3714      	adds	r7, #20
900018a8:	46bd      	mov	sp, r7
900018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900018ae:	4770      	bx	lr
900018b0:	e000ed00 	.word	0xe000ed00
900018b4:	05fa0000 	.word	0x05fa0000

900018b8 <__NVIC_GetPriorityGrouping>:
{
900018b8:	b480      	push	{r7}
900018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900018bc:	4b04      	ldr	r3, [pc, #16]	; (900018d0 <__NVIC_GetPriorityGrouping+0x18>)
900018be:	68db      	ldr	r3, [r3, #12]
900018c0:	0a1b      	lsrs	r3, r3, #8
900018c2:	f003 0307 	and.w	r3, r3, #7
}
900018c6:	4618      	mov	r0, r3
900018c8:	46bd      	mov	sp, r7
900018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
900018ce:	4770      	bx	lr
900018d0:	e000ed00 	.word	0xe000ed00

900018d4 <__NVIC_EnableIRQ>:
{
900018d4:	b480      	push	{r7}
900018d6:	b083      	sub	sp, #12
900018d8:	af00      	add	r7, sp, #0
900018da:	4603      	mov	r3, r0
900018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
900018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
900018e2:	2b00      	cmp	r3, #0
900018e4:	db0b      	blt.n	900018fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900018e6:	79fb      	ldrb	r3, [r7, #7]
900018e8:	f003 021f 	and.w	r2, r3, #31
900018ec:	4907      	ldr	r1, [pc, #28]	; (9000190c <__NVIC_EnableIRQ+0x38>)
900018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
900018f2:	095b      	lsrs	r3, r3, #5
900018f4:	2001      	movs	r0, #1
900018f6:	fa00 f202 	lsl.w	r2, r0, r2
900018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900018fe:	bf00      	nop
90001900:	370c      	adds	r7, #12
90001902:	46bd      	mov	sp, r7
90001904:	f85d 7b04 	ldr.w	r7, [sp], #4
90001908:	4770      	bx	lr
9000190a:	bf00      	nop
9000190c:	e000e100 	.word	0xe000e100

90001910 <__NVIC_SetPriority>:
{
90001910:	b480      	push	{r7}
90001912:	b083      	sub	sp, #12
90001914:	af00      	add	r7, sp, #0
90001916:	4603      	mov	r3, r0
90001918:	6039      	str	r1, [r7, #0]
9000191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
9000191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001920:	2b00      	cmp	r3, #0
90001922:	db0a      	blt.n	9000193a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001924:	683b      	ldr	r3, [r7, #0]
90001926:	b2da      	uxtb	r2, r3
90001928:	490c      	ldr	r1, [pc, #48]	; (9000195c <__NVIC_SetPriority+0x4c>)
9000192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000192e:	0112      	lsls	r2, r2, #4
90001930:	b2d2      	uxtb	r2, r2
90001932:	440b      	add	r3, r1
90001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90001938:	e00a      	b.n	90001950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000193a:	683b      	ldr	r3, [r7, #0]
9000193c:	b2da      	uxtb	r2, r3
9000193e:	4908      	ldr	r1, [pc, #32]	; (90001960 <__NVIC_SetPriority+0x50>)
90001940:	79fb      	ldrb	r3, [r7, #7]
90001942:	f003 030f 	and.w	r3, r3, #15
90001946:	3b04      	subs	r3, #4
90001948:	0112      	lsls	r2, r2, #4
9000194a:	b2d2      	uxtb	r2, r2
9000194c:	440b      	add	r3, r1
9000194e:	761a      	strb	r2, [r3, #24]
}
90001950:	bf00      	nop
90001952:	370c      	adds	r7, #12
90001954:	46bd      	mov	sp, r7
90001956:	f85d 7b04 	ldr.w	r7, [sp], #4
9000195a:	4770      	bx	lr
9000195c:	e000e100 	.word	0xe000e100
90001960:	e000ed00 	.word	0xe000ed00

90001964 <NVIC_EncodePriority>:
{
90001964:	b480      	push	{r7}
90001966:	b089      	sub	sp, #36	; 0x24
90001968:	af00      	add	r7, sp, #0
9000196a:	60f8      	str	r0, [r7, #12]
9000196c:	60b9      	str	r1, [r7, #8]
9000196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90001970:	68fb      	ldr	r3, [r7, #12]
90001972:	f003 0307 	and.w	r3, r3, #7
90001976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001978:	69fb      	ldr	r3, [r7, #28]
9000197a:	f1c3 0307 	rsb	r3, r3, #7
9000197e:	2b04      	cmp	r3, #4
90001980:	bf28      	it	cs
90001982:	2304      	movcs	r3, #4
90001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001986:	69fb      	ldr	r3, [r7, #28]
90001988:	3304      	adds	r3, #4
9000198a:	2b06      	cmp	r3, #6
9000198c:	d902      	bls.n	90001994 <NVIC_EncodePriority+0x30>
9000198e:	69fb      	ldr	r3, [r7, #28]
90001990:	3b03      	subs	r3, #3
90001992:	e000      	b.n	90001996 <NVIC_EncodePriority+0x32>
90001994:	2300      	movs	r3, #0
90001996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001998:	f04f 32ff 	mov.w	r2, #4294967295
9000199c:	69bb      	ldr	r3, [r7, #24]
9000199e:	fa02 f303 	lsl.w	r3, r2, r3
900019a2:	43da      	mvns	r2, r3
900019a4:	68bb      	ldr	r3, [r7, #8]
900019a6:	401a      	ands	r2, r3
900019a8:	697b      	ldr	r3, [r7, #20]
900019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900019ac:	f04f 31ff 	mov.w	r1, #4294967295
900019b0:	697b      	ldr	r3, [r7, #20]
900019b2:	fa01 f303 	lsl.w	r3, r1, r3
900019b6:	43d9      	mvns	r1, r3
900019b8:	687b      	ldr	r3, [r7, #4]
900019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900019bc:	4313      	orrs	r3, r2
}
900019be:	4618      	mov	r0, r3
900019c0:	3724      	adds	r7, #36	; 0x24
900019c2:	46bd      	mov	sp, r7
900019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900019c8:	4770      	bx	lr
	...

900019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900019cc:	b580      	push	{r7, lr}
900019ce:	b082      	sub	sp, #8
900019d0:	af00      	add	r7, sp, #0
900019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900019d4:	687b      	ldr	r3, [r7, #4]
900019d6:	3b01      	subs	r3, #1
900019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900019dc:	d301      	bcc.n	900019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900019de:	2301      	movs	r3, #1
900019e0:	e00f      	b.n	90001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900019e2:	4a0a      	ldr	r2, [pc, #40]	; (90001a0c <SysTick_Config+0x40>)
900019e4:	687b      	ldr	r3, [r7, #4]
900019e6:	3b01      	subs	r3, #1
900019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900019ea:	210f      	movs	r1, #15
900019ec:	f04f 30ff 	mov.w	r0, #4294967295
900019f0:	f7ff ff8e 	bl	90001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900019f4:	4b05      	ldr	r3, [pc, #20]	; (90001a0c <SysTick_Config+0x40>)
900019f6:	2200      	movs	r2, #0
900019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900019fa:	4b04      	ldr	r3, [pc, #16]	; (90001a0c <SysTick_Config+0x40>)
900019fc:	2207      	movs	r2, #7
900019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001a00:	2300      	movs	r3, #0
}
90001a02:	4618      	mov	r0, r3
90001a04:	3708      	adds	r7, #8
90001a06:	46bd      	mov	sp, r7
90001a08:	bd80      	pop	{r7, pc}
90001a0a:	bf00      	nop
90001a0c:	e000e010 	.word	0xe000e010

90001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001a10:	b580      	push	{r7, lr}
90001a12:	b082      	sub	sp, #8
90001a14:	af00      	add	r7, sp, #0
90001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001a18:	6878      	ldr	r0, [r7, #4]
90001a1a:	f7ff ff29 	bl	90001870 <__NVIC_SetPriorityGrouping>
}
90001a1e:	bf00      	nop
90001a20:	3708      	adds	r7, #8
90001a22:	46bd      	mov	sp, r7
90001a24:	bd80      	pop	{r7, pc}

90001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90001a26:	b580      	push	{r7, lr}
90001a28:	b086      	sub	sp, #24
90001a2a:	af00      	add	r7, sp, #0
90001a2c:	4603      	mov	r3, r0
90001a2e:	60b9      	str	r1, [r7, #8]
90001a30:	607a      	str	r2, [r7, #4]
90001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90001a34:	2300      	movs	r3, #0
90001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
90001a38:	f7ff ff3e 	bl	900018b8 <__NVIC_GetPriorityGrouping>
90001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001a3e:	687a      	ldr	r2, [r7, #4]
90001a40:	68b9      	ldr	r1, [r7, #8]
90001a42:	6978      	ldr	r0, [r7, #20]
90001a44:	f7ff ff8e 	bl	90001964 <NVIC_EncodePriority>
90001a48:	4602      	mov	r2, r0
90001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
90001a4e:	4611      	mov	r1, r2
90001a50:	4618      	mov	r0, r3
90001a52:	f7ff ff5d 	bl	90001910 <__NVIC_SetPriority>
}
90001a56:	bf00      	nop
90001a58:	3718      	adds	r7, #24
90001a5a:	46bd      	mov	sp, r7
90001a5c:	bd80      	pop	{r7, pc}

90001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001a5e:	b580      	push	{r7, lr}
90001a60:	b082      	sub	sp, #8
90001a62:	af00      	add	r7, sp, #0
90001a64:	4603      	mov	r3, r0
90001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001a6c:	4618      	mov	r0, r3
90001a6e:	f7ff ff31 	bl	900018d4 <__NVIC_EnableIRQ>
}
90001a72:	bf00      	nop
90001a74:	3708      	adds	r7, #8
90001a76:	46bd      	mov	sp, r7
90001a78:	bd80      	pop	{r7, pc}

90001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90001a7a:	b580      	push	{r7, lr}
90001a7c:	b082      	sub	sp, #8
90001a7e:	af00      	add	r7, sp, #0
90001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90001a82:	6878      	ldr	r0, [r7, #4]
90001a84:	f7ff ffa2 	bl	900019cc <SysTick_Config>
90001a88:	4603      	mov	r3, r0
}
90001a8a:	4618      	mov	r0, r3
90001a8c:	3708      	adds	r7, #8
90001a8e:	46bd      	mov	sp, r7
90001a90:	bd80      	pop	{r7, pc}
	...

90001a94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90001a94:	b480      	push	{r7}
90001a96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90001a98:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90001a9c:	4b06      	ldr	r3, [pc, #24]	; (90001ab8 <HAL_MPU_Disable+0x24>)
90001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001aa0:	4a05      	ldr	r2, [pc, #20]	; (90001ab8 <HAL_MPU_Disable+0x24>)
90001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001aa6:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90001aa8:	4b04      	ldr	r3, [pc, #16]	; (90001abc <HAL_MPU_Disable+0x28>)
90001aaa:	2200      	movs	r2, #0
90001aac:	605a      	str	r2, [r3, #4]
}
90001aae:	bf00      	nop
90001ab0:	46bd      	mov	sp, r7
90001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ab6:	4770      	bx	lr
90001ab8:	e000ed00 	.word	0xe000ed00
90001abc:	e000ed90 	.word	0xe000ed90

90001ac0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90001ac0:	b480      	push	{r7}
90001ac2:	b083      	sub	sp, #12
90001ac4:	af00      	add	r7, sp, #0
90001ac6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90001ac8:	4a0a      	ldr	r2, [pc, #40]	; (90001af4 <HAL_MPU_Enable+0x34>)
90001aca:	687b      	ldr	r3, [r7, #4]
90001acc:	f043 0301 	orr.w	r3, r3, #1
90001ad0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90001ad2:	4b09      	ldr	r3, [pc, #36]	; (90001af8 <HAL_MPU_Enable+0x38>)
90001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001ad6:	4a08      	ldr	r2, [pc, #32]	; (90001af8 <HAL_MPU_Enable+0x38>)
90001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001adc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90001ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001ae2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90001ae6:	bf00      	nop
90001ae8:	370c      	adds	r7, #12
90001aea:	46bd      	mov	sp, r7
90001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
90001af0:	4770      	bx	lr
90001af2:	bf00      	nop
90001af4:	e000ed90 	.word	0xe000ed90
90001af8:	e000ed00 	.word	0xe000ed00

90001afc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
90001afc:	b480      	push	{r7}
90001afe:	b083      	sub	sp, #12
90001b00:	af00      	add	r7, sp, #0
90001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90001b04:	687b      	ldr	r3, [r7, #4]
90001b06:	785a      	ldrb	r2, [r3, #1]
90001b08:	4b1d      	ldr	r3, [pc, #116]	; (90001b80 <HAL_MPU_ConfigRegion+0x84>)
90001b0a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
90001b0c:	687b      	ldr	r3, [r7, #4]
90001b0e:	781b      	ldrb	r3, [r3, #0]
90001b10:	2b00      	cmp	r3, #0
90001b12:	d029      	beq.n	90001b68 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
90001b14:	4a1a      	ldr	r2, [pc, #104]	; (90001b80 <HAL_MPU_ConfigRegion+0x84>)
90001b16:	687b      	ldr	r3, [r7, #4]
90001b18:	685b      	ldr	r3, [r3, #4]
90001b1a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001b1c:	687b      	ldr	r3, [r7, #4]
90001b1e:	7b1b      	ldrb	r3, [r3, #12]
90001b20:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001b22:	687b      	ldr	r3, [r7, #4]
90001b24:	7adb      	ldrb	r3, [r3, #11]
90001b26:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001b28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90001b2a:	687b      	ldr	r3, [r7, #4]
90001b2c:	7a9b      	ldrb	r3, [r3, #10]
90001b2e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001b30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001b32:	687b      	ldr	r3, [r7, #4]
90001b34:	7b5b      	ldrb	r3, [r3, #13]
90001b36:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90001b38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90001b3a:	687b      	ldr	r3, [r7, #4]
90001b3c:	7b9b      	ldrb	r3, [r3, #14]
90001b3e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001b40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001b42:	687b      	ldr	r3, [r7, #4]
90001b44:	7bdb      	ldrb	r3, [r3, #15]
90001b46:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90001b48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90001b4a:	687b      	ldr	r3, [r7, #4]
90001b4c:	7a5b      	ldrb	r3, [r3, #9]
90001b4e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001b50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001b52:	687b      	ldr	r3, [r7, #4]
90001b54:	7a1b      	ldrb	r3, [r3, #8]
90001b56:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90001b58:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90001b5a:	687a      	ldr	r2, [r7, #4]
90001b5c:	7812      	ldrb	r2, [r2, #0]
90001b5e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001b60:	4a07      	ldr	r2, [pc, #28]	; (90001b80 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001b62:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001b64:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90001b66:	e005      	b.n	90001b74 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90001b68:	4b05      	ldr	r3, [pc, #20]	; (90001b80 <HAL_MPU_ConfigRegion+0x84>)
90001b6a:	2200      	movs	r2, #0
90001b6c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
90001b6e:	4b04      	ldr	r3, [pc, #16]	; (90001b80 <HAL_MPU_ConfigRegion+0x84>)
90001b70:	2200      	movs	r2, #0
90001b72:	611a      	str	r2, [r3, #16]
}
90001b74:	bf00      	nop
90001b76:	370c      	adds	r7, #12
90001b78:	46bd      	mov	sp, r7
90001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b7e:	4770      	bx	lr
90001b80:	e000ed90 	.word	0xe000ed90

90001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001b84:	b480      	push	{r7}
90001b86:	b089      	sub	sp, #36	; 0x24
90001b88:	af00      	add	r7, sp, #0
90001b8a:	6078      	str	r0, [r7, #4]
90001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
90001b8e:	2300      	movs	r3, #0
90001b90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
90001b92:	2300      	movs	r3, #0
90001b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
90001b96:	2300      	movs	r3, #0
90001b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90001b9a:	2300      	movs	r3, #0
90001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001b9e:	2300      	movs	r3, #0
90001ba0:	61fb      	str	r3, [r7, #28]
90001ba2:	e175      	b.n	90001e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90001ba4:	2201      	movs	r2, #1
90001ba6:	69fb      	ldr	r3, [r7, #28]
90001ba8:	fa02 f303 	lsl.w	r3, r2, r3
90001bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001bae:	683b      	ldr	r3, [r7, #0]
90001bb0:	681b      	ldr	r3, [r3, #0]
90001bb2:	697a      	ldr	r2, [r7, #20]
90001bb4:	4013      	ands	r3, r2
90001bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90001bb8:	693a      	ldr	r2, [r7, #16]
90001bba:	697b      	ldr	r3, [r7, #20]
90001bbc:	429a      	cmp	r2, r3
90001bbe:	f040 8164 	bne.w	90001e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001bc2:	683b      	ldr	r3, [r7, #0]
90001bc4:	685b      	ldr	r3, [r3, #4]
90001bc6:	2b01      	cmp	r3, #1
90001bc8:	d00b      	beq.n	90001be2 <HAL_GPIO_Init+0x5e>
90001bca:	683b      	ldr	r3, [r7, #0]
90001bcc:	685b      	ldr	r3, [r3, #4]
90001bce:	2b02      	cmp	r3, #2
90001bd0:	d007      	beq.n	90001be2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001bd2:	683b      	ldr	r3, [r7, #0]
90001bd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001bd6:	2b11      	cmp	r3, #17
90001bd8:	d003      	beq.n	90001be2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001bda:	683b      	ldr	r3, [r7, #0]
90001bdc:	685b      	ldr	r3, [r3, #4]
90001bde:	2b12      	cmp	r3, #18
90001be0:	d130      	bne.n	90001c44 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
90001be2:	687b      	ldr	r3, [r7, #4]
90001be4:	689b      	ldr	r3, [r3, #8]
90001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90001be8:	69fb      	ldr	r3, [r7, #28]
90001bea:	005b      	lsls	r3, r3, #1
90001bec:	2203      	movs	r2, #3
90001bee:	fa02 f303 	lsl.w	r3, r2, r3
90001bf2:	43db      	mvns	r3, r3
90001bf4:	69ba      	ldr	r2, [r7, #24]
90001bf6:	4013      	ands	r3, r2
90001bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
90001bfa:	683b      	ldr	r3, [r7, #0]
90001bfc:	68da      	ldr	r2, [r3, #12]
90001bfe:	69fb      	ldr	r3, [r7, #28]
90001c00:	005b      	lsls	r3, r3, #1
90001c02:	fa02 f303 	lsl.w	r3, r2, r3
90001c06:	69ba      	ldr	r2, [r7, #24]
90001c08:	4313      	orrs	r3, r2
90001c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90001c0c:	687b      	ldr	r3, [r7, #4]
90001c0e:	69ba      	ldr	r2, [r7, #24]
90001c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90001c12:	687b      	ldr	r3, [r7, #4]
90001c14:	685b      	ldr	r3, [r3, #4]
90001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90001c18:	2201      	movs	r2, #1
90001c1a:	69fb      	ldr	r3, [r7, #28]
90001c1c:	fa02 f303 	lsl.w	r3, r2, r3
90001c20:	43db      	mvns	r3, r3
90001c22:	69ba      	ldr	r2, [r7, #24]
90001c24:	4013      	ands	r3, r2
90001c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90001c28:	683b      	ldr	r3, [r7, #0]
90001c2a:	685b      	ldr	r3, [r3, #4]
90001c2c:	091b      	lsrs	r3, r3, #4
90001c2e:	f003 0201 	and.w	r2, r3, #1
90001c32:	69fb      	ldr	r3, [r7, #28]
90001c34:	fa02 f303 	lsl.w	r3, r2, r3
90001c38:	69ba      	ldr	r2, [r7, #24]
90001c3a:	4313      	orrs	r3, r2
90001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90001c3e:	687b      	ldr	r3, [r7, #4]
90001c40:	69ba      	ldr	r2, [r7, #24]
90001c42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90001c44:	687b      	ldr	r3, [r7, #4]
90001c46:	68db      	ldr	r3, [r3, #12]
90001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90001c4a:	69fb      	ldr	r3, [r7, #28]
90001c4c:	005b      	lsls	r3, r3, #1
90001c4e:	2203      	movs	r2, #3
90001c50:	fa02 f303 	lsl.w	r3, r2, r3
90001c54:	43db      	mvns	r3, r3
90001c56:	69ba      	ldr	r2, [r7, #24]
90001c58:	4013      	ands	r3, r2
90001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
90001c5c:	683b      	ldr	r3, [r7, #0]
90001c5e:	689a      	ldr	r2, [r3, #8]
90001c60:	69fb      	ldr	r3, [r7, #28]
90001c62:	005b      	lsls	r3, r3, #1
90001c64:	fa02 f303 	lsl.w	r3, r2, r3
90001c68:	69ba      	ldr	r2, [r7, #24]
90001c6a:	4313      	orrs	r3, r2
90001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90001c6e:	687b      	ldr	r3, [r7, #4]
90001c70:	69ba      	ldr	r2, [r7, #24]
90001c72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001c74:	683b      	ldr	r3, [r7, #0]
90001c76:	685b      	ldr	r3, [r3, #4]
90001c78:	2b02      	cmp	r3, #2
90001c7a:	d003      	beq.n	90001c84 <HAL_GPIO_Init+0x100>
90001c7c:	683b      	ldr	r3, [r7, #0]
90001c7e:	685b      	ldr	r3, [r3, #4]
90001c80:	2b12      	cmp	r3, #18
90001c82:	d123      	bne.n	90001ccc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
90001c84:	69fb      	ldr	r3, [r7, #28]
90001c86:	08da      	lsrs	r2, r3, #3
90001c88:	687b      	ldr	r3, [r7, #4]
90001c8a:	3208      	adds	r2, #8
90001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001c92:	69fb      	ldr	r3, [r7, #28]
90001c94:	f003 0307 	and.w	r3, r3, #7
90001c98:	009b      	lsls	r3, r3, #2
90001c9a:	220f      	movs	r2, #15
90001c9c:	fa02 f303 	lsl.w	r3, r2, r3
90001ca0:	43db      	mvns	r3, r3
90001ca2:	69ba      	ldr	r2, [r7, #24]
90001ca4:	4013      	ands	r3, r2
90001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90001ca8:	683b      	ldr	r3, [r7, #0]
90001caa:	691a      	ldr	r2, [r3, #16]
90001cac:	69fb      	ldr	r3, [r7, #28]
90001cae:	f003 0307 	and.w	r3, r3, #7
90001cb2:	009b      	lsls	r3, r3, #2
90001cb4:	fa02 f303 	lsl.w	r3, r2, r3
90001cb8:	69ba      	ldr	r2, [r7, #24]
90001cba:	4313      	orrs	r3, r2
90001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90001cbe:	69fb      	ldr	r3, [r7, #28]
90001cc0:	08da      	lsrs	r2, r3, #3
90001cc2:	687b      	ldr	r3, [r7, #4]
90001cc4:	3208      	adds	r2, #8
90001cc6:	69b9      	ldr	r1, [r7, #24]
90001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90001ccc:	687b      	ldr	r3, [r7, #4]
90001cce:	681b      	ldr	r3, [r3, #0]
90001cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90001cd2:	69fb      	ldr	r3, [r7, #28]
90001cd4:	005b      	lsls	r3, r3, #1
90001cd6:	2203      	movs	r2, #3
90001cd8:	fa02 f303 	lsl.w	r3, r2, r3
90001cdc:	43db      	mvns	r3, r3
90001cde:	69ba      	ldr	r2, [r7, #24]
90001ce0:	4013      	ands	r3, r2
90001ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90001ce4:	683b      	ldr	r3, [r7, #0]
90001ce6:	685b      	ldr	r3, [r3, #4]
90001ce8:	f003 0203 	and.w	r2, r3, #3
90001cec:	69fb      	ldr	r3, [r7, #28]
90001cee:	005b      	lsls	r3, r3, #1
90001cf0:	fa02 f303 	lsl.w	r3, r2, r3
90001cf4:	69ba      	ldr	r2, [r7, #24]
90001cf6:	4313      	orrs	r3, r2
90001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90001cfa:	687b      	ldr	r3, [r7, #4]
90001cfc:	69ba      	ldr	r2, [r7, #24]
90001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90001d00:	683b      	ldr	r3, [r7, #0]
90001d02:	685b      	ldr	r3, [r3, #4]
90001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001d08:	2b00      	cmp	r3, #0
90001d0a:	f000 80be 	beq.w	90001e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001d0e:	4b65      	ldr	r3, [pc, #404]	; (90001ea4 <HAL_GPIO_Init+0x320>)
90001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001d12:	4a64      	ldr	r2, [pc, #400]	; (90001ea4 <HAL_GPIO_Init+0x320>)
90001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001d18:	6453      	str	r3, [r2, #68]	; 0x44
90001d1a:	4b62      	ldr	r3, [pc, #392]	; (90001ea4 <HAL_GPIO_Init+0x320>)
90001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001d22:	60fb      	str	r3, [r7, #12]
90001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
90001d26:	4a60      	ldr	r2, [pc, #384]	; (90001ea8 <HAL_GPIO_Init+0x324>)
90001d28:	69fb      	ldr	r3, [r7, #28]
90001d2a:	089b      	lsrs	r3, r3, #2
90001d2c:	3302      	adds	r3, #2
90001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001d34:	69fb      	ldr	r3, [r7, #28]
90001d36:	f003 0303 	and.w	r3, r3, #3
90001d3a:	009b      	lsls	r3, r3, #2
90001d3c:	220f      	movs	r2, #15
90001d3e:	fa02 f303 	lsl.w	r3, r2, r3
90001d42:	43db      	mvns	r3, r3
90001d44:	69ba      	ldr	r2, [r7, #24]
90001d46:	4013      	ands	r3, r2
90001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001d4a:	687b      	ldr	r3, [r7, #4]
90001d4c:	4a57      	ldr	r2, [pc, #348]	; (90001eac <HAL_GPIO_Init+0x328>)
90001d4e:	4293      	cmp	r3, r2
90001d50:	d037      	beq.n	90001dc2 <HAL_GPIO_Init+0x23e>
90001d52:	687b      	ldr	r3, [r7, #4]
90001d54:	4a56      	ldr	r2, [pc, #344]	; (90001eb0 <HAL_GPIO_Init+0x32c>)
90001d56:	4293      	cmp	r3, r2
90001d58:	d031      	beq.n	90001dbe <HAL_GPIO_Init+0x23a>
90001d5a:	687b      	ldr	r3, [r7, #4]
90001d5c:	4a55      	ldr	r2, [pc, #340]	; (90001eb4 <HAL_GPIO_Init+0x330>)
90001d5e:	4293      	cmp	r3, r2
90001d60:	d02b      	beq.n	90001dba <HAL_GPIO_Init+0x236>
90001d62:	687b      	ldr	r3, [r7, #4]
90001d64:	4a54      	ldr	r2, [pc, #336]	; (90001eb8 <HAL_GPIO_Init+0x334>)
90001d66:	4293      	cmp	r3, r2
90001d68:	d025      	beq.n	90001db6 <HAL_GPIO_Init+0x232>
90001d6a:	687b      	ldr	r3, [r7, #4]
90001d6c:	4a53      	ldr	r2, [pc, #332]	; (90001ebc <HAL_GPIO_Init+0x338>)
90001d6e:	4293      	cmp	r3, r2
90001d70:	d01f      	beq.n	90001db2 <HAL_GPIO_Init+0x22e>
90001d72:	687b      	ldr	r3, [r7, #4]
90001d74:	4a52      	ldr	r2, [pc, #328]	; (90001ec0 <HAL_GPIO_Init+0x33c>)
90001d76:	4293      	cmp	r3, r2
90001d78:	d019      	beq.n	90001dae <HAL_GPIO_Init+0x22a>
90001d7a:	687b      	ldr	r3, [r7, #4]
90001d7c:	4a51      	ldr	r2, [pc, #324]	; (90001ec4 <HAL_GPIO_Init+0x340>)
90001d7e:	4293      	cmp	r3, r2
90001d80:	d013      	beq.n	90001daa <HAL_GPIO_Init+0x226>
90001d82:	687b      	ldr	r3, [r7, #4]
90001d84:	4a50      	ldr	r2, [pc, #320]	; (90001ec8 <HAL_GPIO_Init+0x344>)
90001d86:	4293      	cmp	r3, r2
90001d88:	d00d      	beq.n	90001da6 <HAL_GPIO_Init+0x222>
90001d8a:	687b      	ldr	r3, [r7, #4]
90001d8c:	4a4f      	ldr	r2, [pc, #316]	; (90001ecc <HAL_GPIO_Init+0x348>)
90001d8e:	4293      	cmp	r3, r2
90001d90:	d007      	beq.n	90001da2 <HAL_GPIO_Init+0x21e>
90001d92:	687b      	ldr	r3, [r7, #4]
90001d94:	4a4e      	ldr	r2, [pc, #312]	; (90001ed0 <HAL_GPIO_Init+0x34c>)
90001d96:	4293      	cmp	r3, r2
90001d98:	d101      	bne.n	90001d9e <HAL_GPIO_Init+0x21a>
90001d9a:	2309      	movs	r3, #9
90001d9c:	e012      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001d9e:	230a      	movs	r3, #10
90001da0:	e010      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001da2:	2308      	movs	r3, #8
90001da4:	e00e      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001da6:	2307      	movs	r3, #7
90001da8:	e00c      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001daa:	2306      	movs	r3, #6
90001dac:	e00a      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001dae:	2305      	movs	r3, #5
90001db0:	e008      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001db2:	2304      	movs	r3, #4
90001db4:	e006      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001db6:	2303      	movs	r3, #3
90001db8:	e004      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001dba:	2302      	movs	r3, #2
90001dbc:	e002      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001dbe:	2301      	movs	r3, #1
90001dc0:	e000      	b.n	90001dc4 <HAL_GPIO_Init+0x240>
90001dc2:	2300      	movs	r3, #0
90001dc4:	69fa      	ldr	r2, [r7, #28]
90001dc6:	f002 0203 	and.w	r2, r2, #3
90001dca:	0092      	lsls	r2, r2, #2
90001dcc:	4093      	lsls	r3, r2
90001dce:	69ba      	ldr	r2, [r7, #24]
90001dd0:	4313      	orrs	r3, r2
90001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90001dd4:	4934      	ldr	r1, [pc, #208]	; (90001ea8 <HAL_GPIO_Init+0x324>)
90001dd6:	69fb      	ldr	r3, [r7, #28]
90001dd8:	089b      	lsrs	r3, r3, #2
90001dda:	3302      	adds	r3, #2
90001ddc:	69ba      	ldr	r2, [r7, #24]
90001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90001de2:	4b3c      	ldr	r3, [pc, #240]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001de4:	681b      	ldr	r3, [r3, #0]
90001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001de8:	693b      	ldr	r3, [r7, #16]
90001dea:	43db      	mvns	r3, r3
90001dec:	69ba      	ldr	r2, [r7, #24]
90001dee:	4013      	ands	r3, r2
90001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90001df2:	683b      	ldr	r3, [r7, #0]
90001df4:	685b      	ldr	r3, [r3, #4]
90001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001dfa:	2b00      	cmp	r3, #0
90001dfc:	d003      	beq.n	90001e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90001dfe:	69ba      	ldr	r2, [r7, #24]
90001e00:	693b      	ldr	r3, [r7, #16]
90001e02:	4313      	orrs	r3, r2
90001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
90001e06:	4a33      	ldr	r2, [pc, #204]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e08:	69bb      	ldr	r3, [r7, #24]
90001e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90001e0c:	4b31      	ldr	r3, [pc, #196]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e0e:	685b      	ldr	r3, [r3, #4]
90001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001e12:	693b      	ldr	r3, [r7, #16]
90001e14:	43db      	mvns	r3, r3
90001e16:	69ba      	ldr	r2, [r7, #24]
90001e18:	4013      	ands	r3, r2
90001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90001e1c:	683b      	ldr	r3, [r7, #0]
90001e1e:	685b      	ldr	r3, [r3, #4]
90001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001e24:	2b00      	cmp	r3, #0
90001e26:	d003      	beq.n	90001e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90001e28:	69ba      	ldr	r2, [r7, #24]
90001e2a:	693b      	ldr	r3, [r7, #16]
90001e2c:	4313      	orrs	r3, r2
90001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90001e30:	4a28      	ldr	r2, [pc, #160]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e32:	69bb      	ldr	r3, [r7, #24]
90001e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
90001e36:	4b27      	ldr	r3, [pc, #156]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e38:	689b      	ldr	r3, [r3, #8]
90001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001e3c:	693b      	ldr	r3, [r7, #16]
90001e3e:	43db      	mvns	r3, r3
90001e40:	69ba      	ldr	r2, [r7, #24]
90001e42:	4013      	ands	r3, r2
90001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90001e46:	683b      	ldr	r3, [r7, #0]
90001e48:	685b      	ldr	r3, [r3, #4]
90001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90001e4e:	2b00      	cmp	r3, #0
90001e50:	d003      	beq.n	90001e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
90001e52:	69ba      	ldr	r2, [r7, #24]
90001e54:	693b      	ldr	r3, [r7, #16]
90001e56:	4313      	orrs	r3, r2
90001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
90001e5a:	4a1e      	ldr	r2, [pc, #120]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e5c:	69bb      	ldr	r3, [r7, #24]
90001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90001e60:	4b1c      	ldr	r3, [pc, #112]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e62:	68db      	ldr	r3, [r3, #12]
90001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001e66:	693b      	ldr	r3, [r7, #16]
90001e68:	43db      	mvns	r3, r3
90001e6a:	69ba      	ldr	r2, [r7, #24]
90001e6c:	4013      	ands	r3, r2
90001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90001e70:	683b      	ldr	r3, [r7, #0]
90001e72:	685b      	ldr	r3, [r3, #4]
90001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90001e78:	2b00      	cmp	r3, #0
90001e7a:	d003      	beq.n	90001e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
90001e7c:	69ba      	ldr	r2, [r7, #24]
90001e7e:	693b      	ldr	r3, [r7, #16]
90001e80:	4313      	orrs	r3, r2
90001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
90001e84:	4a13      	ldr	r2, [pc, #76]	; (90001ed4 <HAL_GPIO_Init+0x350>)
90001e86:	69bb      	ldr	r3, [r7, #24]
90001e88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90001e8a:	69fb      	ldr	r3, [r7, #28]
90001e8c:	3301      	adds	r3, #1
90001e8e:	61fb      	str	r3, [r7, #28]
90001e90:	69fb      	ldr	r3, [r7, #28]
90001e92:	2b0f      	cmp	r3, #15
90001e94:	f67f ae86 	bls.w	90001ba4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90001e98:	bf00      	nop
90001e9a:	3724      	adds	r7, #36	; 0x24
90001e9c:	46bd      	mov	sp, r7
90001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ea2:	4770      	bx	lr
90001ea4:	40023800 	.word	0x40023800
90001ea8:	40013800 	.word	0x40013800
90001eac:	40020000 	.word	0x40020000
90001eb0:	40020400 	.word	0x40020400
90001eb4:	40020800 	.word	0x40020800
90001eb8:	40020c00 	.word	0x40020c00
90001ebc:	40021000 	.word	0x40021000
90001ec0:	40021400 	.word	0x40021400
90001ec4:	40021800 	.word	0x40021800
90001ec8:	40021c00 	.word	0x40021c00
90001ecc:	40022000 	.word	0x40022000
90001ed0:	40022400 	.word	0x40022400
90001ed4:	40013c00 	.word	0x40013c00

90001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90001ed8:	b480      	push	{r7}
90001eda:	b083      	sub	sp, #12
90001edc:	af00      	add	r7, sp, #0
90001ede:	6078      	str	r0, [r7, #4]
90001ee0:	460b      	mov	r3, r1
90001ee2:	807b      	strh	r3, [r7, #2]
90001ee4:	4613      	mov	r3, r2
90001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90001ee8:	787b      	ldrb	r3, [r7, #1]
90001eea:	2b00      	cmp	r3, #0
90001eec:	d003      	beq.n	90001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90001eee:	887a      	ldrh	r2, [r7, #2]
90001ef0:	687b      	ldr	r3, [r7, #4]
90001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
90001ef4:	e003      	b.n	90001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90001ef6:	887b      	ldrh	r3, [r7, #2]
90001ef8:	041a      	lsls	r2, r3, #16
90001efa:	687b      	ldr	r3, [r7, #4]
90001efc:	619a      	str	r2, [r3, #24]
}
90001efe:	bf00      	nop
90001f00:	370c      	adds	r7, #12
90001f02:	46bd      	mov	sp, r7
90001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f08:	4770      	bx	lr
	...

90001f0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90001f0c:	b580      	push	{r7, lr}
90001f0e:	b084      	sub	sp, #16
90001f10:	af00      	add	r7, sp, #0
90001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90001f14:	687b      	ldr	r3, [r7, #4]
90001f16:	2b00      	cmp	r3, #0
90001f18:	d101      	bne.n	90001f1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90001f1a:	2301      	movs	r3, #1
90001f1c:	e0bf      	b.n	9000209e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90001f1e:	687b      	ldr	r3, [r7, #4]
90001f20:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
90001f24:	b2db      	uxtb	r3, r3
90001f26:	2b00      	cmp	r3, #0
90001f28:	d106      	bne.n	90001f38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90001f2a:	687b      	ldr	r3, [r7, #4]
90001f2c:	2200      	movs	r2, #0
90001f2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90001f32:	6878      	ldr	r0, [r7, #4]
90001f34:	f7ff f980 	bl	90001238 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90001f38:	687b      	ldr	r3, [r7, #4]
90001f3a:	2202      	movs	r2, #2
90001f3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90001f40:	687b      	ldr	r3, [r7, #4]
90001f42:	681b      	ldr	r3, [r3, #0]
90001f44:	699a      	ldr	r2, [r3, #24]
90001f46:	687b      	ldr	r3, [r7, #4]
90001f48:	681b      	ldr	r3, [r3, #0]
90001f4a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90001f4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90001f50:	687b      	ldr	r3, [r7, #4]
90001f52:	681b      	ldr	r3, [r3, #0]
90001f54:	6999      	ldr	r1, [r3, #24]
90001f56:	687b      	ldr	r3, [r7, #4]
90001f58:	685a      	ldr	r2, [r3, #4]
90001f5a:	687b      	ldr	r3, [r7, #4]
90001f5c:	689b      	ldr	r3, [r3, #8]
90001f5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90001f60:	687b      	ldr	r3, [r7, #4]
90001f62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90001f64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90001f66:	687b      	ldr	r3, [r7, #4]
90001f68:	691b      	ldr	r3, [r3, #16]
90001f6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90001f6c:	687b      	ldr	r3, [r7, #4]
90001f6e:	681b      	ldr	r3, [r3, #0]
90001f70:	430a      	orrs	r2, r1
90001f72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90001f74:	687b      	ldr	r3, [r7, #4]
90001f76:	681b      	ldr	r3, [r3, #0]
90001f78:	6899      	ldr	r1, [r3, #8]
90001f7a:	687b      	ldr	r3, [r7, #4]
90001f7c:	681a      	ldr	r2, [r3, #0]
90001f7e:	4b4a      	ldr	r3, [pc, #296]	; (900020a8 <HAL_LTDC_Init+0x19c>)
90001f80:	400b      	ands	r3, r1
90001f82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
90001f84:	687b      	ldr	r3, [r7, #4]
90001f86:	695b      	ldr	r3, [r3, #20]
90001f88:	041b      	lsls	r3, r3, #16
90001f8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90001f8c:	687b      	ldr	r3, [r7, #4]
90001f8e:	681b      	ldr	r3, [r3, #0]
90001f90:	6899      	ldr	r1, [r3, #8]
90001f92:	687b      	ldr	r3, [r7, #4]
90001f94:	699a      	ldr	r2, [r3, #24]
90001f96:	68fb      	ldr	r3, [r7, #12]
90001f98:	431a      	orrs	r2, r3
90001f9a:	687b      	ldr	r3, [r7, #4]
90001f9c:	681b      	ldr	r3, [r3, #0]
90001f9e:	430a      	orrs	r2, r1
90001fa0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90001fa2:	687b      	ldr	r3, [r7, #4]
90001fa4:	681b      	ldr	r3, [r3, #0]
90001fa6:	68d9      	ldr	r1, [r3, #12]
90001fa8:	687b      	ldr	r3, [r7, #4]
90001faa:	681a      	ldr	r2, [r3, #0]
90001fac:	4b3e      	ldr	r3, [pc, #248]	; (900020a8 <HAL_LTDC_Init+0x19c>)
90001fae:	400b      	ands	r3, r1
90001fb0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90001fb2:	687b      	ldr	r3, [r7, #4]
90001fb4:	69db      	ldr	r3, [r3, #28]
90001fb6:	041b      	lsls	r3, r3, #16
90001fb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90001fba:	687b      	ldr	r3, [r7, #4]
90001fbc:	681b      	ldr	r3, [r3, #0]
90001fbe:	68d9      	ldr	r1, [r3, #12]
90001fc0:	687b      	ldr	r3, [r7, #4]
90001fc2:	6a1a      	ldr	r2, [r3, #32]
90001fc4:	68fb      	ldr	r3, [r7, #12]
90001fc6:	431a      	orrs	r2, r3
90001fc8:	687b      	ldr	r3, [r7, #4]
90001fca:	681b      	ldr	r3, [r3, #0]
90001fcc:	430a      	orrs	r2, r1
90001fce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90001fd0:	687b      	ldr	r3, [r7, #4]
90001fd2:	681b      	ldr	r3, [r3, #0]
90001fd4:	6919      	ldr	r1, [r3, #16]
90001fd6:	687b      	ldr	r3, [r7, #4]
90001fd8:	681a      	ldr	r2, [r3, #0]
90001fda:	4b33      	ldr	r3, [pc, #204]	; (900020a8 <HAL_LTDC_Init+0x19c>)
90001fdc:	400b      	ands	r3, r1
90001fde:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90001fe0:	687b      	ldr	r3, [r7, #4]
90001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001fe4:	041b      	lsls	r3, r3, #16
90001fe6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90001fe8:	687b      	ldr	r3, [r7, #4]
90001fea:	681b      	ldr	r3, [r3, #0]
90001fec:	6919      	ldr	r1, [r3, #16]
90001fee:	687b      	ldr	r3, [r7, #4]
90001ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001ff2:	68fb      	ldr	r3, [r7, #12]
90001ff4:	431a      	orrs	r2, r3
90001ff6:	687b      	ldr	r3, [r7, #4]
90001ff8:	681b      	ldr	r3, [r3, #0]
90001ffa:	430a      	orrs	r2, r1
90001ffc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90001ffe:	687b      	ldr	r3, [r7, #4]
90002000:	681b      	ldr	r3, [r3, #0]
90002002:	6959      	ldr	r1, [r3, #20]
90002004:	687b      	ldr	r3, [r7, #4]
90002006:	681a      	ldr	r2, [r3, #0]
90002008:	4b27      	ldr	r3, [pc, #156]	; (900020a8 <HAL_LTDC_Init+0x19c>)
9000200a:	400b      	ands	r3, r1
9000200c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
9000200e:	687b      	ldr	r3, [r7, #4]
90002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002012:	041b      	lsls	r3, r3, #16
90002014:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90002016:	687b      	ldr	r3, [r7, #4]
90002018:	681b      	ldr	r3, [r3, #0]
9000201a:	6959      	ldr	r1, [r3, #20]
9000201c:	687b      	ldr	r3, [r7, #4]
9000201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002020:	68fb      	ldr	r3, [r7, #12]
90002022:	431a      	orrs	r2, r3
90002024:	687b      	ldr	r3, [r7, #4]
90002026:	681b      	ldr	r3, [r3, #0]
90002028:	430a      	orrs	r2, r1
9000202a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000202c:	687b      	ldr	r3, [r7, #4]
9000202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90002032:	021b      	lsls	r3, r3, #8
90002034:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90002036:	687b      	ldr	r3, [r7, #4]
90002038:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
9000203c:	041b      	lsls	r3, r3, #16
9000203e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90002040:	687b      	ldr	r3, [r7, #4]
90002042:	681b      	ldr	r3, [r3, #0]
90002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90002046:	687b      	ldr	r3, [r7, #4]
90002048:	681b      	ldr	r3, [r3, #0]
9000204a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
9000204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90002050:	687b      	ldr	r3, [r7, #4]
90002052:	681b      	ldr	r3, [r3, #0]
90002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90002056:	68ba      	ldr	r2, [r7, #8]
90002058:	68fb      	ldr	r3, [r7, #12]
9000205a:	4313      	orrs	r3, r2
9000205c:	687a      	ldr	r2, [r7, #4]
9000205e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
90002062:	431a      	orrs	r2, r3
90002064:	687b      	ldr	r3, [r7, #4]
90002066:	681b      	ldr	r3, [r3, #0]
90002068:	430a      	orrs	r2, r1
9000206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000206c:	687b      	ldr	r3, [r7, #4]
9000206e:	681b      	ldr	r3, [r3, #0]
90002070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002072:	687b      	ldr	r3, [r7, #4]
90002074:	681b      	ldr	r3, [r3, #0]
90002076:	f042 0206 	orr.w	r2, r2, #6
9000207a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000207c:	687b      	ldr	r3, [r7, #4]
9000207e:	681b      	ldr	r3, [r3, #0]
90002080:	699a      	ldr	r2, [r3, #24]
90002082:	687b      	ldr	r3, [r7, #4]
90002084:	681b      	ldr	r3, [r3, #0]
90002086:	f042 0201 	orr.w	r2, r2, #1
9000208a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000208c:	687b      	ldr	r3, [r7, #4]
9000208e:	2200      	movs	r2, #0
90002090:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90002094:	687b      	ldr	r3, [r7, #4]
90002096:	2201      	movs	r2, #1
90002098:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
9000209c:	2300      	movs	r3, #0
}
9000209e:	4618      	mov	r0, r3
900020a0:	3710      	adds	r7, #16
900020a2:	46bd      	mov	sp, r7
900020a4:	bd80      	pop	{r7, pc}
900020a6:	bf00      	nop
900020a8:	f000f800 	.word	0xf000f800

900020ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
900020ac:	b580      	push	{r7, lr}
900020ae:	b084      	sub	sp, #16
900020b0:	af00      	add	r7, sp, #0
900020b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
900020b4:	687b      	ldr	r3, [r7, #4]
900020b6:	681b      	ldr	r3, [r3, #0]
900020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900020ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
900020bc:	687b      	ldr	r3, [r7, #4]
900020be:	681b      	ldr	r3, [r3, #0]
900020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900020c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
900020c4:	68fb      	ldr	r3, [r7, #12]
900020c6:	f003 0304 	and.w	r3, r3, #4
900020ca:	2b00      	cmp	r3, #0
900020cc:	d023      	beq.n	90002116 <HAL_LTDC_IRQHandler+0x6a>
900020ce:	68bb      	ldr	r3, [r7, #8]
900020d0:	f003 0304 	and.w	r3, r3, #4
900020d4:	2b00      	cmp	r3, #0
900020d6:	d01e      	beq.n	90002116 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
900020d8:	687b      	ldr	r3, [r7, #4]
900020da:	681b      	ldr	r3, [r3, #0]
900020dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900020de:	687b      	ldr	r3, [r7, #4]
900020e0:	681b      	ldr	r3, [r3, #0]
900020e2:	f022 0204 	bic.w	r2, r2, #4
900020e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	681b      	ldr	r3, [r3, #0]
900020ec:	2204      	movs	r2, #4
900020ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
900020f0:	687b      	ldr	r3, [r7, #4]
900020f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900020f6:	f043 0201 	orr.w	r2, r3, #1
900020fa:	687b      	ldr	r3, [r7, #4]
900020fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
90002100:	687b      	ldr	r3, [r7, #4]
90002102:	2204      	movs	r2, #4
90002104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
90002108:	687b      	ldr	r3, [r7, #4]
9000210a:	2200      	movs	r2, #0
9000210c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
90002110:	6878      	ldr	r0, [r7, #4]
90002112:	f000 f86f 	bl	900021f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90002116:	68fb      	ldr	r3, [r7, #12]
90002118:	f003 0302 	and.w	r3, r3, #2
9000211c:	2b00      	cmp	r3, #0
9000211e:	d023      	beq.n	90002168 <HAL_LTDC_IRQHandler+0xbc>
90002120:	68bb      	ldr	r3, [r7, #8]
90002122:	f003 0302 	and.w	r3, r3, #2
90002126:	2b00      	cmp	r3, #0
90002128:	d01e      	beq.n	90002168 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000212a:	687b      	ldr	r3, [r7, #4]
9000212c:	681b      	ldr	r3, [r3, #0]
9000212e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002130:	687b      	ldr	r3, [r7, #4]
90002132:	681b      	ldr	r3, [r3, #0]
90002134:	f022 0202 	bic.w	r2, r2, #2
90002138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000213a:	687b      	ldr	r3, [r7, #4]
9000213c:	681b      	ldr	r3, [r3, #0]
9000213e:	2202      	movs	r2, #2
90002140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90002142:	687b      	ldr	r3, [r7, #4]
90002144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90002148:	f043 0202 	orr.w	r2, r3, #2
9000214c:	687b      	ldr	r3, [r7, #4]
9000214e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
90002152:	687b      	ldr	r3, [r7, #4]
90002154:	2204      	movs	r2, #4
90002156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
9000215a:	687b      	ldr	r3, [r7, #4]
9000215c:	2200      	movs	r2, #0
9000215e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
90002162:	6878      	ldr	r0, [r7, #4]
90002164:	f000 f846 	bl	900021f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90002168:	68fb      	ldr	r3, [r7, #12]
9000216a:	f003 0301 	and.w	r3, r3, #1
9000216e:	2b00      	cmp	r3, #0
90002170:	d01b      	beq.n	900021aa <HAL_LTDC_IRQHandler+0xfe>
90002172:	68bb      	ldr	r3, [r7, #8]
90002174:	f003 0301 	and.w	r3, r3, #1
90002178:	2b00      	cmp	r3, #0
9000217a:	d016      	beq.n	900021aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000217c:	687b      	ldr	r3, [r7, #4]
9000217e:	681b      	ldr	r3, [r3, #0]
90002180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002182:	687b      	ldr	r3, [r7, #4]
90002184:	681b      	ldr	r3, [r3, #0]
90002186:	f022 0201 	bic.w	r2, r2, #1
9000218a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000218c:	687b      	ldr	r3, [r7, #4]
9000218e:	681b      	ldr	r3, [r3, #0]
90002190:	2201      	movs	r2, #1
90002192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
90002194:	687b      	ldr	r3, [r7, #4]
90002196:	2201      	movs	r2, #1
90002198:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
9000219c:	687b      	ldr	r3, [r7, #4]
9000219e:	2200      	movs	r2, #0
900021a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
900021a4:	6878      	ldr	r0, [r7, #4]
900021a6:	f000 f82f 	bl	90002208 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
900021aa:	68fb      	ldr	r3, [r7, #12]
900021ac:	f003 0308 	and.w	r3, r3, #8
900021b0:	2b00      	cmp	r3, #0
900021b2:	d01b      	beq.n	900021ec <HAL_LTDC_IRQHandler+0x140>
900021b4:	68bb      	ldr	r3, [r7, #8]
900021b6:	f003 0308 	and.w	r3, r3, #8
900021ba:	2b00      	cmp	r3, #0
900021bc:	d016      	beq.n	900021ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
900021be:	687b      	ldr	r3, [r7, #4]
900021c0:	681b      	ldr	r3, [r3, #0]
900021c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900021c4:	687b      	ldr	r3, [r7, #4]
900021c6:	681b      	ldr	r3, [r3, #0]
900021c8:	f022 0208 	bic.w	r2, r2, #8
900021cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
900021ce:	687b      	ldr	r3, [r7, #4]
900021d0:	681b      	ldr	r3, [r3, #0]
900021d2:	2208      	movs	r2, #8
900021d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
900021d6:	687b      	ldr	r3, [r7, #4]
900021d8:	2201      	movs	r2, #1
900021da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
900021de:	687b      	ldr	r3, [r7, #4]
900021e0:	2200      	movs	r2, #0
900021e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
900021e6:	6878      	ldr	r0, [r7, #4]
900021e8:	f000 f818 	bl	9000221c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
900021ec:	bf00      	nop
900021ee:	3710      	adds	r7, #16
900021f0:	46bd      	mov	sp, r7
900021f2:	bd80      	pop	{r7, pc}

900021f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
900021f4:	b480      	push	{r7}
900021f6:	b083      	sub	sp, #12
900021f8:	af00      	add	r7, sp, #0
900021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
900021fc:	bf00      	nop
900021fe:	370c      	adds	r7, #12
90002200:	46bd      	mov	sp, r7
90002202:	f85d 7b04 	ldr.w	r7, [sp], #4
90002206:	4770      	bx	lr

90002208 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
90002208:	b480      	push	{r7}
9000220a:	b083      	sub	sp, #12
9000220c:	af00      	add	r7, sp, #0
9000220e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
90002210:	bf00      	nop
90002212:	370c      	adds	r7, #12
90002214:	46bd      	mov	sp, r7
90002216:	f85d 7b04 	ldr.w	r7, [sp], #4
9000221a:	4770      	bx	lr

9000221c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
9000221c:	b480      	push	{r7}
9000221e:	b083      	sub	sp, #12
90002220:	af00      	add	r7, sp, #0
90002222:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
90002224:	bf00      	nop
90002226:	370c      	adds	r7, #12
90002228:	46bd      	mov	sp, r7
9000222a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000222e:	4770      	bx	lr

90002230 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90002230:	b5b0      	push	{r4, r5, r7, lr}
90002232:	b084      	sub	sp, #16
90002234:	af00      	add	r7, sp, #0
90002236:	60f8      	str	r0, [r7, #12]
90002238:	60b9      	str	r1, [r7, #8]
9000223a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000223c:	68fb      	ldr	r3, [r7, #12]
9000223e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90002242:	2b01      	cmp	r3, #1
90002244:	d101      	bne.n	9000224a <HAL_LTDC_ConfigLayer+0x1a>
90002246:	2302      	movs	r3, #2
90002248:	e02c      	b.n	900022a4 <HAL_LTDC_ConfigLayer+0x74>
9000224a:	68fb      	ldr	r3, [r7, #12]
9000224c:	2201      	movs	r2, #1
9000224e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90002252:	68fb      	ldr	r3, [r7, #12]
90002254:	2202      	movs	r2, #2
90002256:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000225a:	68fa      	ldr	r2, [r7, #12]
9000225c:	687b      	ldr	r3, [r7, #4]
9000225e:	2134      	movs	r1, #52	; 0x34
90002260:	fb01 f303 	mul.w	r3, r1, r3
90002264:	4413      	add	r3, r2
90002266:	f103 0238 	add.w	r2, r3, #56	; 0x38
9000226a:	68bb      	ldr	r3, [r7, #8]
9000226c:	4614      	mov	r4, r2
9000226e:	461d      	mov	r5, r3
90002270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000227a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000227c:	682b      	ldr	r3, [r5, #0]
9000227e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90002280:	687a      	ldr	r2, [r7, #4]
90002282:	68b9      	ldr	r1, [r7, #8]
90002284:	68f8      	ldr	r0, [r7, #12]
90002286:	f000 f811 	bl	900022ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000228a:	68fb      	ldr	r3, [r7, #12]
9000228c:	681b      	ldr	r3, [r3, #0]
9000228e:	2201      	movs	r2, #1
90002290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90002292:	68fb      	ldr	r3, [r7, #12]
90002294:	2201      	movs	r2, #1
90002296:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000229a:	68fb      	ldr	r3, [r7, #12]
9000229c:	2200      	movs	r2, #0
9000229e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900022a2:	2300      	movs	r3, #0
}
900022a4:	4618      	mov	r0, r3
900022a6:	3710      	adds	r7, #16
900022a8:	46bd      	mov	sp, r7
900022aa:	bdb0      	pop	{r4, r5, r7, pc}

900022ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900022ac:	b480      	push	{r7}
900022ae:	b089      	sub	sp, #36	; 0x24
900022b0:	af00      	add	r7, sp, #0
900022b2:	60f8      	str	r0, [r7, #12]
900022b4:	60b9      	str	r1, [r7, #8]
900022b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900022b8:	68bb      	ldr	r3, [r7, #8]
900022ba:	685a      	ldr	r2, [r3, #4]
900022bc:	68fb      	ldr	r3, [r7, #12]
900022be:	681b      	ldr	r3, [r3, #0]
900022c0:	68db      	ldr	r3, [r3, #12]
900022c2:	0c1b      	lsrs	r3, r3, #16
900022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
900022c8:	4413      	add	r3, r2
900022ca:	041b      	lsls	r3, r3, #16
900022cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900022ce:	68fb      	ldr	r3, [r7, #12]
900022d0:	681b      	ldr	r3, [r3, #0]
900022d2:	461a      	mov	r2, r3
900022d4:	687b      	ldr	r3, [r7, #4]
900022d6:	01db      	lsls	r3, r3, #7
900022d8:	4413      	add	r3, r2
900022da:	3384      	adds	r3, #132	; 0x84
900022dc:	685b      	ldr	r3, [r3, #4]
900022de:	68fa      	ldr	r2, [r7, #12]
900022e0:	6812      	ldr	r2, [r2, #0]
900022e2:	4611      	mov	r1, r2
900022e4:	687a      	ldr	r2, [r7, #4]
900022e6:	01d2      	lsls	r2, r2, #7
900022e8:	440a      	add	r2, r1
900022ea:	3284      	adds	r2, #132	; 0x84
900022ec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
900022f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900022f2:	68bb      	ldr	r3, [r7, #8]
900022f4:	681a      	ldr	r2, [r3, #0]
900022f6:	68fb      	ldr	r3, [r7, #12]
900022f8:	681b      	ldr	r3, [r3, #0]
900022fa:	68db      	ldr	r3, [r3, #12]
900022fc:	0c1b      	lsrs	r3, r3, #16
900022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002302:	4413      	add	r3, r2
90002304:	1c5a      	adds	r2, r3, #1
90002306:	68fb      	ldr	r3, [r7, #12]
90002308:	681b      	ldr	r3, [r3, #0]
9000230a:	4619      	mov	r1, r3
9000230c:	687b      	ldr	r3, [r7, #4]
9000230e:	01db      	lsls	r3, r3, #7
90002310:	440b      	add	r3, r1
90002312:	3384      	adds	r3, #132	; 0x84
90002314:	4619      	mov	r1, r3
90002316:	69fb      	ldr	r3, [r7, #28]
90002318:	4313      	orrs	r3, r2
9000231a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000231c:	68bb      	ldr	r3, [r7, #8]
9000231e:	68da      	ldr	r2, [r3, #12]
90002320:	68fb      	ldr	r3, [r7, #12]
90002322:	681b      	ldr	r3, [r3, #0]
90002324:	68db      	ldr	r3, [r3, #12]
90002326:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000232a:	4413      	add	r3, r2
9000232c:	041b      	lsls	r3, r3, #16
9000232e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90002330:	68fb      	ldr	r3, [r7, #12]
90002332:	681b      	ldr	r3, [r3, #0]
90002334:	461a      	mov	r2, r3
90002336:	687b      	ldr	r3, [r7, #4]
90002338:	01db      	lsls	r3, r3, #7
9000233a:	4413      	add	r3, r2
9000233c:	3384      	adds	r3, #132	; 0x84
9000233e:	689b      	ldr	r3, [r3, #8]
90002340:	68fa      	ldr	r2, [r7, #12]
90002342:	6812      	ldr	r2, [r2, #0]
90002344:	4611      	mov	r1, r2
90002346:	687a      	ldr	r2, [r7, #4]
90002348:	01d2      	lsls	r2, r2, #7
9000234a:	440a      	add	r2, r1
9000234c:	3284      	adds	r2, #132	; 0x84
9000234e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90002352:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90002354:	68bb      	ldr	r3, [r7, #8]
90002356:	689a      	ldr	r2, [r3, #8]
90002358:	68fb      	ldr	r3, [r7, #12]
9000235a:	681b      	ldr	r3, [r3, #0]
9000235c:	68db      	ldr	r3, [r3, #12]
9000235e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002362:	4413      	add	r3, r2
90002364:	1c5a      	adds	r2, r3, #1
90002366:	68fb      	ldr	r3, [r7, #12]
90002368:	681b      	ldr	r3, [r3, #0]
9000236a:	4619      	mov	r1, r3
9000236c:	687b      	ldr	r3, [r7, #4]
9000236e:	01db      	lsls	r3, r3, #7
90002370:	440b      	add	r3, r1
90002372:	3384      	adds	r3, #132	; 0x84
90002374:	4619      	mov	r1, r3
90002376:	69fb      	ldr	r3, [r7, #28]
90002378:	4313      	orrs	r3, r2
9000237a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000237c:	68fb      	ldr	r3, [r7, #12]
9000237e:	681b      	ldr	r3, [r3, #0]
90002380:	461a      	mov	r2, r3
90002382:	687b      	ldr	r3, [r7, #4]
90002384:	01db      	lsls	r3, r3, #7
90002386:	4413      	add	r3, r2
90002388:	3384      	adds	r3, #132	; 0x84
9000238a:	691b      	ldr	r3, [r3, #16]
9000238c:	68fa      	ldr	r2, [r7, #12]
9000238e:	6812      	ldr	r2, [r2, #0]
90002390:	4611      	mov	r1, r2
90002392:	687a      	ldr	r2, [r7, #4]
90002394:	01d2      	lsls	r2, r2, #7
90002396:	440a      	add	r2, r1
90002398:	3284      	adds	r2, #132	; 0x84
9000239a:	f023 0307 	bic.w	r3, r3, #7
9000239e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900023a0:	68fb      	ldr	r3, [r7, #12]
900023a2:	681b      	ldr	r3, [r3, #0]
900023a4:	461a      	mov	r2, r3
900023a6:	687b      	ldr	r3, [r7, #4]
900023a8:	01db      	lsls	r3, r3, #7
900023aa:	4413      	add	r3, r2
900023ac:	3384      	adds	r3, #132	; 0x84
900023ae:	461a      	mov	r2, r3
900023b0:	68bb      	ldr	r3, [r7, #8]
900023b2:	691b      	ldr	r3, [r3, #16]
900023b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900023b6:	68bb      	ldr	r3, [r7, #8]
900023b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
900023bc:	021b      	lsls	r3, r3, #8
900023be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900023c0:	68bb      	ldr	r3, [r7, #8]
900023c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
900023c6:	041b      	lsls	r3, r3, #16
900023c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900023ca:	68bb      	ldr	r3, [r7, #8]
900023cc:	699b      	ldr	r3, [r3, #24]
900023ce:	061b      	lsls	r3, r3, #24
900023d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
900023d2:	68fb      	ldr	r3, [r7, #12]
900023d4:	681b      	ldr	r3, [r3, #0]
900023d6:	461a      	mov	r2, r3
900023d8:	687b      	ldr	r3, [r7, #4]
900023da:	01db      	lsls	r3, r3, #7
900023dc:	4413      	add	r3, r2
900023de:	3384      	adds	r3, #132	; 0x84
900023e0:	699b      	ldr	r3, [r3, #24]
900023e2:	68fb      	ldr	r3, [r7, #12]
900023e4:	681b      	ldr	r3, [r3, #0]
900023e6:	461a      	mov	r2, r3
900023e8:	687b      	ldr	r3, [r7, #4]
900023ea:	01db      	lsls	r3, r3, #7
900023ec:	4413      	add	r3, r2
900023ee:	3384      	adds	r3, #132	; 0x84
900023f0:	461a      	mov	r2, r3
900023f2:	2300      	movs	r3, #0
900023f4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900023f6:	68bb      	ldr	r3, [r7, #8]
900023f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900023fc:	461a      	mov	r2, r3
900023fe:	69fb      	ldr	r3, [r7, #28]
90002400:	431a      	orrs	r2, r3
90002402:	69bb      	ldr	r3, [r7, #24]
90002404:	431a      	orrs	r2, r3
90002406:	68fb      	ldr	r3, [r7, #12]
90002408:	681b      	ldr	r3, [r3, #0]
9000240a:	4619      	mov	r1, r3
9000240c:	687b      	ldr	r3, [r7, #4]
9000240e:	01db      	lsls	r3, r3, #7
90002410:	440b      	add	r3, r1
90002412:	3384      	adds	r3, #132	; 0x84
90002414:	4619      	mov	r1, r3
90002416:	697b      	ldr	r3, [r7, #20]
90002418:	4313      	orrs	r3, r2
9000241a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000241c:	68fb      	ldr	r3, [r7, #12]
9000241e:	681b      	ldr	r3, [r3, #0]
90002420:	461a      	mov	r2, r3
90002422:	687b      	ldr	r3, [r7, #4]
90002424:	01db      	lsls	r3, r3, #7
90002426:	4413      	add	r3, r2
90002428:	3384      	adds	r3, #132	; 0x84
9000242a:	695b      	ldr	r3, [r3, #20]
9000242c:	68fa      	ldr	r2, [r7, #12]
9000242e:	6812      	ldr	r2, [r2, #0]
90002430:	4611      	mov	r1, r2
90002432:	687a      	ldr	r2, [r7, #4]
90002434:	01d2      	lsls	r2, r2, #7
90002436:	440a      	add	r2, r1
90002438:	3284      	adds	r2, #132	; 0x84
9000243a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000243e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90002440:	68fb      	ldr	r3, [r7, #12]
90002442:	681b      	ldr	r3, [r3, #0]
90002444:	461a      	mov	r2, r3
90002446:	687b      	ldr	r3, [r7, #4]
90002448:	01db      	lsls	r3, r3, #7
9000244a:	4413      	add	r3, r2
9000244c:	3384      	adds	r3, #132	; 0x84
9000244e:	461a      	mov	r2, r3
90002450:	68bb      	ldr	r3, [r7, #8]
90002452:	695b      	ldr	r3, [r3, #20]
90002454:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90002456:	68fb      	ldr	r3, [r7, #12]
90002458:	681b      	ldr	r3, [r3, #0]
9000245a:	461a      	mov	r2, r3
9000245c:	687b      	ldr	r3, [r7, #4]
9000245e:	01db      	lsls	r3, r3, #7
90002460:	4413      	add	r3, r2
90002462:	3384      	adds	r3, #132	; 0x84
90002464:	69da      	ldr	r2, [r3, #28]
90002466:	68fb      	ldr	r3, [r7, #12]
90002468:	681b      	ldr	r3, [r3, #0]
9000246a:	4619      	mov	r1, r3
9000246c:	687b      	ldr	r3, [r7, #4]
9000246e:	01db      	lsls	r3, r3, #7
90002470:	440b      	add	r3, r1
90002472:	3384      	adds	r3, #132	; 0x84
90002474:	4619      	mov	r1, r3
90002476:	4b58      	ldr	r3, [pc, #352]	; (900025d8 <LTDC_SetConfig+0x32c>)
90002478:	4013      	ands	r3, r2
9000247a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000247c:	68bb      	ldr	r3, [r7, #8]
9000247e:	69da      	ldr	r2, [r3, #28]
90002480:	68bb      	ldr	r3, [r7, #8]
90002482:	6a1b      	ldr	r3, [r3, #32]
90002484:	68f9      	ldr	r1, [r7, #12]
90002486:	6809      	ldr	r1, [r1, #0]
90002488:	4608      	mov	r0, r1
9000248a:	6879      	ldr	r1, [r7, #4]
9000248c:	01c9      	lsls	r1, r1, #7
9000248e:	4401      	add	r1, r0
90002490:	3184      	adds	r1, #132	; 0x84
90002492:	4313      	orrs	r3, r2
90002494:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90002496:	68fb      	ldr	r3, [r7, #12]
90002498:	681b      	ldr	r3, [r3, #0]
9000249a:	461a      	mov	r2, r3
9000249c:	687b      	ldr	r3, [r7, #4]
9000249e:	01db      	lsls	r3, r3, #7
900024a0:	4413      	add	r3, r2
900024a2:	3384      	adds	r3, #132	; 0x84
900024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900024a6:	68fb      	ldr	r3, [r7, #12]
900024a8:	681b      	ldr	r3, [r3, #0]
900024aa:	461a      	mov	r2, r3
900024ac:	687b      	ldr	r3, [r7, #4]
900024ae:	01db      	lsls	r3, r3, #7
900024b0:	4413      	add	r3, r2
900024b2:	3384      	adds	r3, #132	; 0x84
900024b4:	461a      	mov	r2, r3
900024b6:	2300      	movs	r3, #0
900024b8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900024ba:	68fb      	ldr	r3, [r7, #12]
900024bc:	681b      	ldr	r3, [r3, #0]
900024be:	461a      	mov	r2, r3
900024c0:	687b      	ldr	r3, [r7, #4]
900024c2:	01db      	lsls	r3, r3, #7
900024c4:	4413      	add	r3, r2
900024c6:	3384      	adds	r3, #132	; 0x84
900024c8:	461a      	mov	r2, r3
900024ca:	68bb      	ldr	r3, [r7, #8]
900024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900024ce:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900024d0:	68bb      	ldr	r3, [r7, #8]
900024d2:	691b      	ldr	r3, [r3, #16]
900024d4:	2b00      	cmp	r3, #0
900024d6:	d102      	bne.n	900024de <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
900024d8:	2304      	movs	r3, #4
900024da:	61fb      	str	r3, [r7, #28]
900024dc:	e01b      	b.n	90002516 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900024de:	68bb      	ldr	r3, [r7, #8]
900024e0:	691b      	ldr	r3, [r3, #16]
900024e2:	2b01      	cmp	r3, #1
900024e4:	d102      	bne.n	900024ec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
900024e6:	2303      	movs	r3, #3
900024e8:	61fb      	str	r3, [r7, #28]
900024ea:	e014      	b.n	90002516 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900024ec:	68bb      	ldr	r3, [r7, #8]
900024ee:	691b      	ldr	r3, [r3, #16]
900024f0:	2b04      	cmp	r3, #4
900024f2:	d00b      	beq.n	9000250c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900024f4:	68bb      	ldr	r3, [r7, #8]
900024f6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900024f8:	2b02      	cmp	r3, #2
900024fa:	d007      	beq.n	9000250c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900024fc:	68bb      	ldr	r3, [r7, #8]
900024fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90002500:	2b03      	cmp	r3, #3
90002502:	d003      	beq.n	9000250c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90002504:	68bb      	ldr	r3, [r7, #8]
90002506:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90002508:	2b07      	cmp	r3, #7
9000250a:	d102      	bne.n	90002512 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
9000250c:	2302      	movs	r3, #2
9000250e:	61fb      	str	r3, [r7, #28]
90002510:	e001      	b.n	90002516 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
90002512:	2301      	movs	r3, #1
90002514:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90002516:	68fb      	ldr	r3, [r7, #12]
90002518:	681b      	ldr	r3, [r3, #0]
9000251a:	461a      	mov	r2, r3
9000251c:	687b      	ldr	r3, [r7, #4]
9000251e:	01db      	lsls	r3, r3, #7
90002520:	4413      	add	r3, r2
90002522:	3384      	adds	r3, #132	; 0x84
90002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002526:	68fa      	ldr	r2, [r7, #12]
90002528:	6812      	ldr	r2, [r2, #0]
9000252a:	4611      	mov	r1, r2
9000252c:	687a      	ldr	r2, [r7, #4]
9000252e:	01d2      	lsls	r2, r2, #7
90002530:	440a      	add	r2, r1
90002532:	3284      	adds	r2, #132	; 0x84
90002534:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90002538:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
9000253a:	68bb      	ldr	r3, [r7, #8]
9000253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000253e:	69fa      	ldr	r2, [r7, #28]
90002540:	fb02 f303 	mul.w	r3, r2, r3
90002544:	041a      	lsls	r2, r3, #16
90002546:	68bb      	ldr	r3, [r7, #8]
90002548:	6859      	ldr	r1, [r3, #4]
9000254a:	68bb      	ldr	r3, [r7, #8]
9000254c:	681b      	ldr	r3, [r3, #0]
9000254e:	1acb      	subs	r3, r1, r3
90002550:	69f9      	ldr	r1, [r7, #28]
90002552:	fb01 f303 	mul.w	r3, r1, r3
90002556:	3303      	adds	r3, #3
90002558:	68f9      	ldr	r1, [r7, #12]
9000255a:	6809      	ldr	r1, [r1, #0]
9000255c:	4608      	mov	r0, r1
9000255e:	6879      	ldr	r1, [r7, #4]
90002560:	01c9      	lsls	r1, r1, #7
90002562:	4401      	add	r1, r0
90002564:	3184      	adds	r1, #132	; 0x84
90002566:	4313      	orrs	r3, r2
90002568:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000256a:	68fb      	ldr	r3, [r7, #12]
9000256c:	681b      	ldr	r3, [r3, #0]
9000256e:	461a      	mov	r2, r3
90002570:	687b      	ldr	r3, [r7, #4]
90002572:	01db      	lsls	r3, r3, #7
90002574:	4413      	add	r3, r2
90002576:	3384      	adds	r3, #132	; 0x84
90002578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000257a:	68fb      	ldr	r3, [r7, #12]
9000257c:	681b      	ldr	r3, [r3, #0]
9000257e:	4619      	mov	r1, r3
90002580:	687b      	ldr	r3, [r7, #4]
90002582:	01db      	lsls	r3, r3, #7
90002584:	440b      	add	r3, r1
90002586:	3384      	adds	r3, #132	; 0x84
90002588:	4619      	mov	r1, r3
9000258a:	4b14      	ldr	r3, [pc, #80]	; (900025dc <LTDC_SetConfig+0x330>)
9000258c:	4013      	ands	r3, r2
9000258e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90002590:	68fb      	ldr	r3, [r7, #12]
90002592:	681b      	ldr	r3, [r3, #0]
90002594:	461a      	mov	r2, r3
90002596:	687b      	ldr	r3, [r7, #4]
90002598:	01db      	lsls	r3, r3, #7
9000259a:	4413      	add	r3, r2
9000259c:	3384      	adds	r3, #132	; 0x84
9000259e:	461a      	mov	r2, r3
900025a0:	68bb      	ldr	r3, [r7, #8]
900025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900025a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900025a6:	68fb      	ldr	r3, [r7, #12]
900025a8:	681b      	ldr	r3, [r3, #0]
900025aa:	461a      	mov	r2, r3
900025ac:	687b      	ldr	r3, [r7, #4]
900025ae:	01db      	lsls	r3, r3, #7
900025b0:	4413      	add	r3, r2
900025b2:	3384      	adds	r3, #132	; 0x84
900025b4:	681b      	ldr	r3, [r3, #0]
900025b6:	68fa      	ldr	r2, [r7, #12]
900025b8:	6812      	ldr	r2, [r2, #0]
900025ba:	4611      	mov	r1, r2
900025bc:	687a      	ldr	r2, [r7, #4]
900025be:	01d2      	lsls	r2, r2, #7
900025c0:	440a      	add	r2, r1
900025c2:	3284      	adds	r2, #132	; 0x84
900025c4:	f043 0301 	orr.w	r3, r3, #1
900025c8:	6013      	str	r3, [r2, #0]
}
900025ca:	bf00      	nop
900025cc:	3724      	adds	r7, #36	; 0x24
900025ce:	46bd      	mov	sp, r7
900025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900025d4:	4770      	bx	lr
900025d6:	bf00      	nop
900025d8:	fffff8f8 	.word	0xfffff8f8
900025dc:	fffff800 	.word	0xfffff800

900025e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
900025e0:	b480      	push	{r7}
900025e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
900025e4:	4b05      	ldr	r3, [pc, #20]	; (900025fc <HAL_PWR_EnableBkUpAccess+0x1c>)
900025e6:	681b      	ldr	r3, [r3, #0]
900025e8:	4a04      	ldr	r2, [pc, #16]	; (900025fc <HAL_PWR_EnableBkUpAccess+0x1c>)
900025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900025ee:	6013      	str	r3, [r2, #0]
}
900025f0:	bf00      	nop
900025f2:	46bd      	mov	sp, r7
900025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900025f8:	4770      	bx	lr
900025fa:	bf00      	nop
900025fc:	40007000 	.word	0x40007000

90002600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
90002600:	b580      	push	{r7, lr}
90002602:	b082      	sub	sp, #8
90002604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
90002606:	2300      	movs	r3, #0
90002608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
9000260a:	4b23      	ldr	r3, [pc, #140]	; (90002698 <HAL_PWREx_EnableOverDrive+0x98>)
9000260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000260e:	4a22      	ldr	r2, [pc, #136]	; (90002698 <HAL_PWREx_EnableOverDrive+0x98>)
90002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002614:	6413      	str	r3, [r2, #64]	; 0x40
90002616:	4b20      	ldr	r3, [pc, #128]	; (90002698 <HAL_PWREx_EnableOverDrive+0x98>)
90002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000261e:	603b      	str	r3, [r7, #0]
90002620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90002622:	4b1e      	ldr	r3, [pc, #120]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
90002624:	681b      	ldr	r3, [r3, #0]
90002626:	4a1d      	ldr	r2, [pc, #116]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
90002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000262c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000262e:	f7ff f913 	bl	90001858 <HAL_GetTick>
90002632:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90002634:	e009      	b.n	9000264a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90002636:	f7ff f90f 	bl	90001858 <HAL_GetTick>
9000263a:	4602      	mov	r2, r0
9000263c:	687b      	ldr	r3, [r7, #4]
9000263e:	1ad3      	subs	r3, r2, r3
90002640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90002644:	d901      	bls.n	9000264a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
90002646:	2303      	movs	r3, #3
90002648:	e022      	b.n	90002690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
9000264a:	4b14      	ldr	r3, [pc, #80]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
9000264c:	685b      	ldr	r3, [r3, #4]
9000264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90002652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002656:	d1ee      	bne.n	90002636 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90002658:	4b10      	ldr	r3, [pc, #64]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
9000265a:	681b      	ldr	r3, [r3, #0]
9000265c:	4a0f      	ldr	r2, [pc, #60]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
9000265e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90002664:	f7ff f8f8 	bl	90001858 <HAL_GetTick>
90002668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
9000266a:	e009      	b.n	90002680 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
9000266c:	f7ff f8f4 	bl	90001858 <HAL_GetTick>
90002670:	4602      	mov	r2, r0
90002672:	687b      	ldr	r3, [r7, #4]
90002674:	1ad3      	subs	r3, r2, r3
90002676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
9000267a:	d901      	bls.n	90002680 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
9000267c:	2303      	movs	r3, #3
9000267e:	e007      	b.n	90002690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90002680:	4b06      	ldr	r3, [pc, #24]	; (9000269c <HAL_PWREx_EnableOverDrive+0x9c>)
90002682:	685b      	ldr	r3, [r3, #4]
90002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000268c:	d1ee      	bne.n	9000266c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
9000268e:	2300      	movs	r3, #0
}
90002690:	4618      	mov	r0, r3
90002692:	3708      	adds	r7, #8
90002694:	46bd      	mov	sp, r7
90002696:	bd80      	pop	{r7, pc}
90002698:	40023800 	.word	0x40023800
9000269c:	40007000 	.word	0x40007000

900026a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
900026a0:	b580      	push	{r7, lr}
900026a2:	b086      	sub	sp, #24
900026a4:	af02      	add	r7, sp, #8
900026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
900026a8:	f7ff f8d6 	bl	90001858 <HAL_GetTick>
900026ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
900026ae:	687b      	ldr	r3, [r7, #4]
900026b0:	2b00      	cmp	r3, #0
900026b2:	d101      	bne.n	900026b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
900026b4:	2301      	movs	r3, #1
900026b6:	e067      	b.n	90002788 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
900026b8:	687b      	ldr	r3, [r7, #4]
900026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900026be:	b2db      	uxtb	r3, r3
900026c0:	2b00      	cmp	r3, #0
900026c2:	d10b      	bne.n	900026dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
900026c4:	687b      	ldr	r3, [r7, #4]
900026c6:	2200      	movs	r2, #0
900026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
900026cc:	6878      	ldr	r0, [r7, #4]
900026ce:	f7fe fe83 	bl	900013d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
900026d2:	f241 3188 	movw	r1, #5000	; 0x1388
900026d6:	6878      	ldr	r0, [r7, #4]
900026d8:	f000 f85e 	bl	90002798 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
900026dc:	687b      	ldr	r3, [r7, #4]
900026de:	681b      	ldr	r3, [r3, #0]
900026e0:	681b      	ldr	r3, [r3, #0]
900026e2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
900026e6:	687b      	ldr	r3, [r7, #4]
900026e8:	689b      	ldr	r3, [r3, #8]
900026ea:	3b01      	subs	r3, #1
900026ec:	021a      	lsls	r2, r3, #8
900026ee:	687b      	ldr	r3, [r7, #4]
900026f0:	681b      	ldr	r3, [r3, #0]
900026f2:	430a      	orrs	r2, r1
900026f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
900026f6:	687b      	ldr	r3, [r7, #4]
900026f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900026fa:	9300      	str	r3, [sp, #0]
900026fc:	68fb      	ldr	r3, [r7, #12]
900026fe:	2200      	movs	r2, #0
90002700:	2120      	movs	r1, #32
90002702:	6878      	ldr	r0, [r7, #4]
90002704:	f000 f856 	bl	900027b4 <QSPI_WaitFlagStateUntilTimeout>
90002708:	4603      	mov	r3, r0
9000270a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
9000270c:	7afb      	ldrb	r3, [r7, #11]
9000270e:	2b00      	cmp	r3, #0
90002710:	d135      	bne.n	9000277e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
90002712:	687b      	ldr	r3, [r7, #4]
90002714:	681b      	ldr	r3, [r3, #0]
90002716:	681a      	ldr	r2, [r3, #0]
90002718:	4b1d      	ldr	r3, [pc, #116]	; (90002790 <HAL_QSPI_Init+0xf0>)
9000271a:	4013      	ands	r3, r2
9000271c:	687a      	ldr	r2, [r7, #4]
9000271e:	6852      	ldr	r2, [r2, #4]
90002720:	0611      	lsls	r1, r2, #24
90002722:	687a      	ldr	r2, [r7, #4]
90002724:	68d2      	ldr	r2, [r2, #12]
90002726:	4311      	orrs	r1, r2
90002728:	687a      	ldr	r2, [r7, #4]
9000272a:	69d2      	ldr	r2, [r2, #28]
9000272c:	4311      	orrs	r1, r2
9000272e:	687a      	ldr	r2, [r7, #4]
90002730:	6a12      	ldr	r2, [r2, #32]
90002732:	4311      	orrs	r1, r2
90002734:	687a      	ldr	r2, [r7, #4]
90002736:	6812      	ldr	r2, [r2, #0]
90002738:	430b      	orrs	r3, r1
9000273a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
9000273c:	687b      	ldr	r3, [r7, #4]
9000273e:	681b      	ldr	r3, [r3, #0]
90002740:	685a      	ldr	r2, [r3, #4]
90002742:	4b14      	ldr	r3, [pc, #80]	; (90002794 <HAL_QSPI_Init+0xf4>)
90002744:	4013      	ands	r3, r2
90002746:	687a      	ldr	r2, [r7, #4]
90002748:	6912      	ldr	r2, [r2, #16]
9000274a:	0411      	lsls	r1, r2, #16
9000274c:	687a      	ldr	r2, [r7, #4]
9000274e:	6952      	ldr	r2, [r2, #20]
90002750:	4311      	orrs	r1, r2
90002752:	687a      	ldr	r2, [r7, #4]
90002754:	6992      	ldr	r2, [r2, #24]
90002756:	4311      	orrs	r1, r2
90002758:	687a      	ldr	r2, [r7, #4]
9000275a:	6812      	ldr	r2, [r2, #0]
9000275c:	430b      	orrs	r3, r1
9000275e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
90002760:	687b      	ldr	r3, [r7, #4]
90002762:	681b      	ldr	r3, [r3, #0]
90002764:	681a      	ldr	r2, [r3, #0]
90002766:	687b      	ldr	r3, [r7, #4]
90002768:	681b      	ldr	r3, [r3, #0]
9000276a:	f042 0201 	orr.w	r2, r2, #1
9000276e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
90002770:	687b      	ldr	r3, [r7, #4]
90002772:	2200      	movs	r2, #0
90002774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
90002776:	687b      	ldr	r3, [r7, #4]
90002778:	2201      	movs	r2, #1
9000277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
9000277e:	687b      	ldr	r3, [r7, #4]
90002780:	2200      	movs	r2, #0
90002782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
90002786:	7afb      	ldrb	r3, [r7, #11]
}
90002788:	4618      	mov	r0, r3
9000278a:	3710      	adds	r7, #16
9000278c:	46bd      	mov	sp, r7
9000278e:	bd80      	pop	{r7, pc}
90002790:	00ffff2f 	.word	0x00ffff2f
90002794:	ffe0f8fe 	.word	0xffe0f8fe

90002798 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
90002798:	b480      	push	{r7}
9000279a:	b083      	sub	sp, #12
9000279c:	af00      	add	r7, sp, #0
9000279e:	6078      	str	r0, [r7, #4]
900027a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
900027a2:	687b      	ldr	r3, [r7, #4]
900027a4:	683a      	ldr	r2, [r7, #0]
900027a6:	649a      	str	r2, [r3, #72]	; 0x48
}
900027a8:	bf00      	nop
900027aa:	370c      	adds	r7, #12
900027ac:	46bd      	mov	sp, r7
900027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900027b2:	4770      	bx	lr

900027b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
900027b4:	b580      	push	{r7, lr}
900027b6:	b084      	sub	sp, #16
900027b8:	af00      	add	r7, sp, #0
900027ba:	60f8      	str	r0, [r7, #12]
900027bc:	60b9      	str	r1, [r7, #8]
900027be:	603b      	str	r3, [r7, #0]
900027c0:	4613      	mov	r3, r2
900027c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
900027c4:	e01a      	b.n	900027fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900027c6:	69bb      	ldr	r3, [r7, #24]
900027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
900027cc:	d016      	beq.n	900027fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900027ce:	f7ff f843 	bl	90001858 <HAL_GetTick>
900027d2:	4602      	mov	r2, r0
900027d4:	683b      	ldr	r3, [r7, #0]
900027d6:	1ad3      	subs	r3, r2, r3
900027d8:	69ba      	ldr	r2, [r7, #24]
900027da:	429a      	cmp	r2, r3
900027dc:	d302      	bcc.n	900027e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
900027de:	69bb      	ldr	r3, [r7, #24]
900027e0:	2b00      	cmp	r3, #0
900027e2:	d10b      	bne.n	900027fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
900027e4:	68fb      	ldr	r3, [r7, #12]
900027e6:	2204      	movs	r2, #4
900027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
900027ec:	68fb      	ldr	r3, [r7, #12]
900027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900027f0:	f043 0201 	orr.w	r2, r3, #1
900027f4:	68fb      	ldr	r3, [r7, #12]
900027f6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
900027f8:	2301      	movs	r3, #1
900027fa:	e00e      	b.n	9000281a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
900027fc:	68fb      	ldr	r3, [r7, #12]
900027fe:	681b      	ldr	r3, [r3, #0]
90002800:	689a      	ldr	r2, [r3, #8]
90002802:	68bb      	ldr	r3, [r7, #8]
90002804:	4013      	ands	r3, r2
90002806:	2b00      	cmp	r3, #0
90002808:	bf14      	ite	ne
9000280a:	2301      	movne	r3, #1
9000280c:	2300      	moveq	r3, #0
9000280e:	b2db      	uxtb	r3, r3
90002810:	461a      	mov	r2, r3
90002812:	79fb      	ldrb	r3, [r7, #7]
90002814:	429a      	cmp	r2, r3
90002816:	d1d6      	bne.n	900027c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
90002818:	2300      	movs	r3, #0
}
9000281a:	4618      	mov	r0, r3
9000281c:	3710      	adds	r7, #16
9000281e:	46bd      	mov	sp, r7
90002820:	bd80      	pop	{r7, pc}
	...

90002824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90002824:	b580      	push	{r7, lr}
90002826:	b086      	sub	sp, #24
90002828:	af00      	add	r7, sp, #0
9000282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
9000282c:	2300      	movs	r3, #0
9000282e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90002830:	687b      	ldr	r3, [r7, #4]
90002832:	2b00      	cmp	r3, #0
90002834:	d101      	bne.n	9000283a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
90002836:	2301      	movs	r3, #1
90002838:	e291      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000283a:	687b      	ldr	r3, [r7, #4]
9000283c:	681b      	ldr	r3, [r3, #0]
9000283e:	f003 0301 	and.w	r3, r3, #1
90002842:	2b00      	cmp	r3, #0
90002844:	f000 8087 	beq.w	90002956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90002848:	4b96      	ldr	r3, [pc, #600]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
9000284a:	689b      	ldr	r3, [r3, #8]
9000284c:	f003 030c 	and.w	r3, r3, #12
90002850:	2b04      	cmp	r3, #4
90002852:	d00c      	beq.n	9000286e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90002854:	4b93      	ldr	r3, [pc, #588]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002856:	689b      	ldr	r3, [r3, #8]
90002858:	f003 030c 	and.w	r3, r3, #12
9000285c:	2b08      	cmp	r3, #8
9000285e:	d112      	bne.n	90002886 <HAL_RCC_OscConfig+0x62>
90002860:	4b90      	ldr	r3, [pc, #576]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002862:	685b      	ldr	r3, [r3, #4]
90002864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000286c:	d10b      	bne.n	90002886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000286e:	4b8d      	ldr	r3, [pc, #564]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002870:	681b      	ldr	r3, [r3, #0]
90002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002876:	2b00      	cmp	r3, #0
90002878:	d06c      	beq.n	90002954 <HAL_RCC_OscConfig+0x130>
9000287a:	687b      	ldr	r3, [r7, #4]
9000287c:	685b      	ldr	r3, [r3, #4]
9000287e:	2b00      	cmp	r3, #0
90002880:	d168      	bne.n	90002954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90002882:	2301      	movs	r3, #1
90002884:	e26b      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90002886:	687b      	ldr	r3, [r7, #4]
90002888:	685b      	ldr	r3, [r3, #4]
9000288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000288e:	d106      	bne.n	9000289e <HAL_RCC_OscConfig+0x7a>
90002890:	4b84      	ldr	r3, [pc, #528]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002892:	681b      	ldr	r3, [r3, #0]
90002894:	4a83      	ldr	r2, [pc, #524]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000289a:	6013      	str	r3, [r2, #0]
9000289c:	e02e      	b.n	900028fc <HAL_RCC_OscConfig+0xd8>
9000289e:	687b      	ldr	r3, [r7, #4]
900028a0:	685b      	ldr	r3, [r3, #4]
900028a2:	2b00      	cmp	r3, #0
900028a4:	d10c      	bne.n	900028c0 <HAL_RCC_OscConfig+0x9c>
900028a6:	4b7f      	ldr	r3, [pc, #508]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028a8:	681b      	ldr	r3, [r3, #0]
900028aa:	4a7e      	ldr	r2, [pc, #504]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900028b0:	6013      	str	r3, [r2, #0]
900028b2:	4b7c      	ldr	r3, [pc, #496]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028b4:	681b      	ldr	r3, [r3, #0]
900028b6:	4a7b      	ldr	r2, [pc, #492]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900028bc:	6013      	str	r3, [r2, #0]
900028be:	e01d      	b.n	900028fc <HAL_RCC_OscConfig+0xd8>
900028c0:	687b      	ldr	r3, [r7, #4]
900028c2:	685b      	ldr	r3, [r3, #4]
900028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900028c8:	d10c      	bne.n	900028e4 <HAL_RCC_OscConfig+0xc0>
900028ca:	4b76      	ldr	r3, [pc, #472]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028cc:	681b      	ldr	r3, [r3, #0]
900028ce:	4a75      	ldr	r2, [pc, #468]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900028d4:	6013      	str	r3, [r2, #0]
900028d6:	4b73      	ldr	r3, [pc, #460]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028d8:	681b      	ldr	r3, [r3, #0]
900028da:	4a72      	ldr	r2, [pc, #456]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900028e0:	6013      	str	r3, [r2, #0]
900028e2:	e00b      	b.n	900028fc <HAL_RCC_OscConfig+0xd8>
900028e4:	4b6f      	ldr	r3, [pc, #444]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028e6:	681b      	ldr	r3, [r3, #0]
900028e8:	4a6e      	ldr	r2, [pc, #440]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900028ee:	6013      	str	r3, [r2, #0]
900028f0:	4b6c      	ldr	r3, [pc, #432]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028f2:	681b      	ldr	r3, [r3, #0]
900028f4:	4a6b      	ldr	r2, [pc, #428]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900028fc:	687b      	ldr	r3, [r7, #4]
900028fe:	685b      	ldr	r3, [r3, #4]
90002900:	2b00      	cmp	r3, #0
90002902:	d013      	beq.n	9000292c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002904:	f7fe ffa8 	bl	90001858 <HAL_GetTick>
90002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000290a:	e008      	b.n	9000291e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000290c:	f7fe ffa4 	bl	90001858 <HAL_GetTick>
90002910:	4602      	mov	r2, r0
90002912:	693b      	ldr	r3, [r7, #16]
90002914:	1ad3      	subs	r3, r2, r3
90002916:	2b64      	cmp	r3, #100	; 0x64
90002918:	d901      	bls.n	9000291e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
9000291a:	2303      	movs	r3, #3
9000291c:	e21f      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000291e:	4b61      	ldr	r3, [pc, #388]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002920:	681b      	ldr	r3, [r3, #0]
90002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002926:	2b00      	cmp	r3, #0
90002928:	d0f0      	beq.n	9000290c <HAL_RCC_OscConfig+0xe8>
9000292a:	e014      	b.n	90002956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000292c:	f7fe ff94 	bl	90001858 <HAL_GetTick>
90002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002932:	e008      	b.n	90002946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90002934:	f7fe ff90 	bl	90001858 <HAL_GetTick>
90002938:	4602      	mov	r2, r0
9000293a:	693b      	ldr	r3, [r7, #16]
9000293c:	1ad3      	subs	r3, r2, r3
9000293e:	2b64      	cmp	r3, #100	; 0x64
90002940:	d901      	bls.n	90002946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90002942:	2303      	movs	r3, #3
90002944:	e20b      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002946:	4b57      	ldr	r3, [pc, #348]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002948:	681b      	ldr	r3, [r3, #0]
9000294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000294e:	2b00      	cmp	r3, #0
90002950:	d1f0      	bne.n	90002934 <HAL_RCC_OscConfig+0x110>
90002952:	e000      	b.n	90002956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90002956:	687b      	ldr	r3, [r7, #4]
90002958:	681b      	ldr	r3, [r3, #0]
9000295a:	f003 0302 	and.w	r3, r3, #2
9000295e:	2b00      	cmp	r3, #0
90002960:	d069      	beq.n	90002a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90002962:	4b50      	ldr	r3, [pc, #320]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002964:	689b      	ldr	r3, [r3, #8]
90002966:	f003 030c 	and.w	r3, r3, #12
9000296a:	2b00      	cmp	r3, #0
9000296c:	d00b      	beq.n	90002986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
9000296e:	4b4d      	ldr	r3, [pc, #308]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002970:	689b      	ldr	r3, [r3, #8]
90002972:	f003 030c 	and.w	r3, r3, #12
90002976:	2b08      	cmp	r3, #8
90002978:	d11c      	bne.n	900029b4 <HAL_RCC_OscConfig+0x190>
9000297a:	4b4a      	ldr	r3, [pc, #296]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
9000297c:	685b      	ldr	r3, [r3, #4]
9000297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002982:	2b00      	cmp	r3, #0
90002984:	d116      	bne.n	900029b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90002986:	4b47      	ldr	r3, [pc, #284]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002988:	681b      	ldr	r3, [r3, #0]
9000298a:	f003 0302 	and.w	r3, r3, #2
9000298e:	2b00      	cmp	r3, #0
90002990:	d005      	beq.n	9000299e <HAL_RCC_OscConfig+0x17a>
90002992:	687b      	ldr	r3, [r7, #4]
90002994:	68db      	ldr	r3, [r3, #12]
90002996:	2b01      	cmp	r3, #1
90002998:	d001      	beq.n	9000299e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
9000299a:	2301      	movs	r3, #1
9000299c:	e1df      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000299e:	4b41      	ldr	r3, [pc, #260]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029a0:	681b      	ldr	r3, [r3, #0]
900029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900029a6:	687b      	ldr	r3, [r7, #4]
900029a8:	691b      	ldr	r3, [r3, #16]
900029aa:	00db      	lsls	r3, r3, #3
900029ac:	493d      	ldr	r1, [pc, #244]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029ae:	4313      	orrs	r3, r2
900029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900029b2:	e040      	b.n	90002a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900029b4:	687b      	ldr	r3, [r7, #4]
900029b6:	68db      	ldr	r3, [r3, #12]
900029b8:	2b00      	cmp	r3, #0
900029ba:	d023      	beq.n	90002a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
900029bc:	4b39      	ldr	r3, [pc, #228]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029be:	681b      	ldr	r3, [r3, #0]
900029c0:	4a38      	ldr	r2, [pc, #224]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029c2:	f043 0301 	orr.w	r3, r3, #1
900029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900029c8:	f7fe ff46 	bl	90001858 <HAL_GetTick>
900029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900029ce:	e008      	b.n	900029e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900029d0:	f7fe ff42 	bl	90001858 <HAL_GetTick>
900029d4:	4602      	mov	r2, r0
900029d6:	693b      	ldr	r3, [r7, #16]
900029d8:	1ad3      	subs	r3, r2, r3
900029da:	2b02      	cmp	r3, #2
900029dc:	d901      	bls.n	900029e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
900029de:	2303      	movs	r3, #3
900029e0:	e1bd      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900029e2:	4b30      	ldr	r3, [pc, #192]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029e4:	681b      	ldr	r3, [r3, #0]
900029e6:	f003 0302 	and.w	r3, r3, #2
900029ea:	2b00      	cmp	r3, #0
900029ec:	d0f0      	beq.n	900029d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900029ee:	4b2d      	ldr	r3, [pc, #180]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029f0:	681b      	ldr	r3, [r3, #0]
900029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900029f6:	687b      	ldr	r3, [r7, #4]
900029f8:	691b      	ldr	r3, [r3, #16]
900029fa:	00db      	lsls	r3, r3, #3
900029fc:	4929      	ldr	r1, [pc, #164]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
900029fe:	4313      	orrs	r3, r2
90002a00:	600b      	str	r3, [r1, #0]
90002a02:	e018      	b.n	90002a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90002a04:	4b27      	ldr	r3, [pc, #156]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a06:	681b      	ldr	r3, [r3, #0]
90002a08:	4a26      	ldr	r2, [pc, #152]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a0a:	f023 0301 	bic.w	r3, r3, #1
90002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002a10:	f7fe ff22 	bl	90001858 <HAL_GetTick>
90002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002a16:	e008      	b.n	90002a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002a18:	f7fe ff1e 	bl	90001858 <HAL_GetTick>
90002a1c:	4602      	mov	r2, r0
90002a1e:	693b      	ldr	r3, [r7, #16]
90002a20:	1ad3      	subs	r3, r2, r3
90002a22:	2b02      	cmp	r3, #2
90002a24:	d901      	bls.n	90002a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
90002a26:	2303      	movs	r3, #3
90002a28:	e199      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002a2a:	4b1e      	ldr	r3, [pc, #120]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a2c:	681b      	ldr	r3, [r3, #0]
90002a2e:	f003 0302 	and.w	r3, r3, #2
90002a32:	2b00      	cmp	r3, #0
90002a34:	d1f0      	bne.n	90002a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90002a36:	687b      	ldr	r3, [r7, #4]
90002a38:	681b      	ldr	r3, [r3, #0]
90002a3a:	f003 0308 	and.w	r3, r3, #8
90002a3e:	2b00      	cmp	r3, #0
90002a40:	d038      	beq.n	90002ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90002a42:	687b      	ldr	r3, [r7, #4]
90002a44:	695b      	ldr	r3, [r3, #20]
90002a46:	2b00      	cmp	r3, #0
90002a48:	d019      	beq.n	90002a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90002a4a:	4b16      	ldr	r3, [pc, #88]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002a4e:	4a15      	ldr	r2, [pc, #84]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a50:	f043 0301 	orr.w	r3, r3, #1
90002a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002a56:	f7fe feff 	bl	90001858 <HAL_GetTick>
90002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90002a5c:	e008      	b.n	90002a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002a5e:	f7fe fefb 	bl	90001858 <HAL_GetTick>
90002a62:	4602      	mov	r2, r0
90002a64:	693b      	ldr	r3, [r7, #16]
90002a66:	1ad3      	subs	r3, r2, r3
90002a68:	2b02      	cmp	r3, #2
90002a6a:	d901      	bls.n	90002a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90002a6c:	2303      	movs	r3, #3
90002a6e:	e176      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90002a70:	4b0c      	ldr	r3, [pc, #48]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002a74:	f003 0302 	and.w	r3, r3, #2
90002a78:	2b00      	cmp	r3, #0
90002a7a:	d0f0      	beq.n	90002a5e <HAL_RCC_OscConfig+0x23a>
90002a7c:	e01a      	b.n	90002ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90002a7e:	4b09      	ldr	r3, [pc, #36]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002a82:	4a08      	ldr	r2, [pc, #32]	; (90002aa4 <HAL_RCC_OscConfig+0x280>)
90002a84:	f023 0301 	bic.w	r3, r3, #1
90002a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002a8a:	f7fe fee5 	bl	90001858 <HAL_GetTick>
90002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90002a90:	e00a      	b.n	90002aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002a92:	f7fe fee1 	bl	90001858 <HAL_GetTick>
90002a96:	4602      	mov	r2, r0
90002a98:	693b      	ldr	r3, [r7, #16]
90002a9a:	1ad3      	subs	r3, r2, r3
90002a9c:	2b02      	cmp	r3, #2
90002a9e:	d903      	bls.n	90002aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90002aa0:	2303      	movs	r3, #3
90002aa2:	e15c      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
90002aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90002aa8:	4b91      	ldr	r3, [pc, #580]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002aac:	f003 0302 	and.w	r3, r3, #2
90002ab0:	2b00      	cmp	r3, #0
90002ab2:	d1ee      	bne.n	90002a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90002ab4:	687b      	ldr	r3, [r7, #4]
90002ab6:	681b      	ldr	r3, [r3, #0]
90002ab8:	f003 0304 	and.w	r3, r3, #4
90002abc:	2b00      	cmp	r3, #0
90002abe:	f000 80a4 	beq.w	90002c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90002ac2:	4b8b      	ldr	r3, [pc, #556]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002aca:	2b00      	cmp	r3, #0
90002acc:	d10d      	bne.n	90002aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90002ace:	4b88      	ldr	r3, [pc, #544]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002ad2:	4a87      	ldr	r2, [pc, #540]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002ad8:	6413      	str	r3, [r2, #64]	; 0x40
90002ada:	4b85      	ldr	r3, [pc, #532]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002ae2:	60bb      	str	r3, [r7, #8]
90002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
90002ae6:	2301      	movs	r3, #1
90002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002aea:	4b82      	ldr	r3, [pc, #520]	; (90002cf4 <HAL_RCC_OscConfig+0x4d0>)
90002aec:	681b      	ldr	r3, [r3, #0]
90002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002af2:	2b00      	cmp	r3, #0
90002af4:	d118      	bne.n	90002b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
90002af6:	4b7f      	ldr	r3, [pc, #508]	; (90002cf4 <HAL_RCC_OscConfig+0x4d0>)
90002af8:	681b      	ldr	r3, [r3, #0]
90002afa:	4a7e      	ldr	r2, [pc, #504]	; (90002cf4 <HAL_RCC_OscConfig+0x4d0>)
90002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90002b02:	f7fe fea9 	bl	90001858 <HAL_GetTick>
90002b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002b08:	e008      	b.n	90002b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002b0a:	f7fe fea5 	bl	90001858 <HAL_GetTick>
90002b0e:	4602      	mov	r2, r0
90002b10:	693b      	ldr	r3, [r7, #16]
90002b12:	1ad3      	subs	r3, r2, r3
90002b14:	2b64      	cmp	r3, #100	; 0x64
90002b16:	d901      	bls.n	90002b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90002b18:	2303      	movs	r3, #3
90002b1a:	e120      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002b1c:	4b75      	ldr	r3, [pc, #468]	; (90002cf4 <HAL_RCC_OscConfig+0x4d0>)
90002b1e:	681b      	ldr	r3, [r3, #0]
90002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002b24:	2b00      	cmp	r3, #0
90002b26:	d0f0      	beq.n	90002b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90002b28:	687b      	ldr	r3, [r7, #4]
90002b2a:	689b      	ldr	r3, [r3, #8]
90002b2c:	2b01      	cmp	r3, #1
90002b2e:	d106      	bne.n	90002b3e <HAL_RCC_OscConfig+0x31a>
90002b30:	4b6f      	ldr	r3, [pc, #444]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b34:	4a6e      	ldr	r2, [pc, #440]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b36:	f043 0301 	orr.w	r3, r3, #1
90002b3a:	6713      	str	r3, [r2, #112]	; 0x70
90002b3c:	e02d      	b.n	90002b9a <HAL_RCC_OscConfig+0x376>
90002b3e:	687b      	ldr	r3, [r7, #4]
90002b40:	689b      	ldr	r3, [r3, #8]
90002b42:	2b00      	cmp	r3, #0
90002b44:	d10c      	bne.n	90002b60 <HAL_RCC_OscConfig+0x33c>
90002b46:	4b6a      	ldr	r3, [pc, #424]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b4a:	4a69      	ldr	r2, [pc, #420]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b4c:	f023 0301 	bic.w	r3, r3, #1
90002b50:	6713      	str	r3, [r2, #112]	; 0x70
90002b52:	4b67      	ldr	r3, [pc, #412]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b56:	4a66      	ldr	r2, [pc, #408]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b58:	f023 0304 	bic.w	r3, r3, #4
90002b5c:	6713      	str	r3, [r2, #112]	; 0x70
90002b5e:	e01c      	b.n	90002b9a <HAL_RCC_OscConfig+0x376>
90002b60:	687b      	ldr	r3, [r7, #4]
90002b62:	689b      	ldr	r3, [r3, #8]
90002b64:	2b05      	cmp	r3, #5
90002b66:	d10c      	bne.n	90002b82 <HAL_RCC_OscConfig+0x35e>
90002b68:	4b61      	ldr	r3, [pc, #388]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b6c:	4a60      	ldr	r2, [pc, #384]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b6e:	f043 0304 	orr.w	r3, r3, #4
90002b72:	6713      	str	r3, [r2, #112]	; 0x70
90002b74:	4b5e      	ldr	r3, [pc, #376]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b78:	4a5d      	ldr	r2, [pc, #372]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b7a:	f043 0301 	orr.w	r3, r3, #1
90002b7e:	6713      	str	r3, [r2, #112]	; 0x70
90002b80:	e00b      	b.n	90002b9a <HAL_RCC_OscConfig+0x376>
90002b82:	4b5b      	ldr	r3, [pc, #364]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b86:	4a5a      	ldr	r2, [pc, #360]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b88:	f023 0301 	bic.w	r3, r3, #1
90002b8c:	6713      	str	r3, [r2, #112]	; 0x70
90002b8e:	4b58      	ldr	r3, [pc, #352]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002b92:	4a57      	ldr	r2, [pc, #348]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002b94:	f023 0304 	bic.w	r3, r3, #4
90002b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90002b9a:	687b      	ldr	r3, [r7, #4]
90002b9c:	689b      	ldr	r3, [r3, #8]
90002b9e:	2b00      	cmp	r3, #0
90002ba0:	d015      	beq.n	90002bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002ba2:	f7fe fe59 	bl	90001858 <HAL_GetTick>
90002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002ba8:	e00a      	b.n	90002bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002baa:	f7fe fe55 	bl	90001858 <HAL_GetTick>
90002bae:	4602      	mov	r2, r0
90002bb0:	693b      	ldr	r3, [r7, #16]
90002bb2:	1ad3      	subs	r3, r2, r3
90002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
90002bb8:	4293      	cmp	r3, r2
90002bba:	d901      	bls.n	90002bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90002bbc:	2303      	movs	r3, #3
90002bbe:	e0ce      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002bc0:	4b4b      	ldr	r3, [pc, #300]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002bc4:	f003 0302 	and.w	r3, r3, #2
90002bc8:	2b00      	cmp	r3, #0
90002bca:	d0ee      	beq.n	90002baa <HAL_RCC_OscConfig+0x386>
90002bcc:	e014      	b.n	90002bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002bce:	f7fe fe43 	bl	90001858 <HAL_GetTick>
90002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90002bd4:	e00a      	b.n	90002bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002bd6:	f7fe fe3f 	bl	90001858 <HAL_GetTick>
90002bda:	4602      	mov	r2, r0
90002bdc:	693b      	ldr	r3, [r7, #16]
90002bde:	1ad3      	subs	r3, r2, r3
90002be0:	f241 3288 	movw	r2, #5000	; 0x1388
90002be4:	4293      	cmp	r3, r2
90002be6:	d901      	bls.n	90002bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90002be8:	2303      	movs	r3, #3
90002bea:	e0b8      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90002bec:	4b40      	ldr	r3, [pc, #256]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002bf0:	f003 0302 	and.w	r3, r3, #2
90002bf4:	2b00      	cmp	r3, #0
90002bf6:	d1ee      	bne.n	90002bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90002bf8:	7dfb      	ldrb	r3, [r7, #23]
90002bfa:	2b01      	cmp	r3, #1
90002bfc:	d105      	bne.n	90002c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90002bfe:	4b3c      	ldr	r3, [pc, #240]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002c02:	4a3b      	ldr	r2, [pc, #236]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90002c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90002c0a:	687b      	ldr	r3, [r7, #4]
90002c0c:	699b      	ldr	r3, [r3, #24]
90002c0e:	2b00      	cmp	r3, #0
90002c10:	f000 80a4 	beq.w	90002d5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90002c14:	4b36      	ldr	r3, [pc, #216]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c16:	689b      	ldr	r3, [r3, #8]
90002c18:	f003 030c 	and.w	r3, r3, #12
90002c1c:	2b08      	cmp	r3, #8
90002c1e:	d06b      	beq.n	90002cf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90002c20:	687b      	ldr	r3, [r7, #4]
90002c22:	699b      	ldr	r3, [r3, #24]
90002c24:	2b02      	cmp	r3, #2
90002c26:	d149      	bne.n	90002cbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90002c28:	4b31      	ldr	r3, [pc, #196]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c2a:	681b      	ldr	r3, [r3, #0]
90002c2c:	4a30      	ldr	r2, [pc, #192]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002c34:	f7fe fe10 	bl	90001858 <HAL_GetTick>
90002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002c3a:	e008      	b.n	90002c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002c3c:	f7fe fe0c 	bl	90001858 <HAL_GetTick>
90002c40:	4602      	mov	r2, r0
90002c42:	693b      	ldr	r3, [r7, #16]
90002c44:	1ad3      	subs	r3, r2, r3
90002c46:	2b02      	cmp	r3, #2
90002c48:	d901      	bls.n	90002c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90002c4a:	2303      	movs	r3, #3
90002c4c:	e087      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002c4e:	4b28      	ldr	r3, [pc, #160]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c50:	681b      	ldr	r3, [r3, #0]
90002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002c56:	2b00      	cmp	r3, #0
90002c58:	d1f0      	bne.n	90002c3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90002c5a:	687b      	ldr	r3, [r7, #4]
90002c5c:	69da      	ldr	r2, [r3, #28]
90002c5e:	687b      	ldr	r3, [r7, #4]
90002c60:	6a1b      	ldr	r3, [r3, #32]
90002c62:	431a      	orrs	r2, r3
90002c64:	687b      	ldr	r3, [r7, #4]
90002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c68:	019b      	lsls	r3, r3, #6
90002c6a:	431a      	orrs	r2, r3
90002c6c:	687b      	ldr	r3, [r7, #4]
90002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002c70:	085b      	lsrs	r3, r3, #1
90002c72:	3b01      	subs	r3, #1
90002c74:	041b      	lsls	r3, r3, #16
90002c76:	431a      	orrs	r2, r3
90002c78:	687b      	ldr	r3, [r7, #4]
90002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002c7c:	061b      	lsls	r3, r3, #24
90002c7e:	4313      	orrs	r3, r2
90002c80:	4a1b      	ldr	r2, [pc, #108]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90002c86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90002c88:	4b19      	ldr	r3, [pc, #100]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c8a:	681b      	ldr	r3, [r3, #0]
90002c8c:	4a18      	ldr	r2, [pc, #96]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90002c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002c94:	f7fe fde0 	bl	90001858 <HAL_GetTick>
90002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90002c9a:	e008      	b.n	90002cae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002c9c:	f7fe fddc 	bl	90001858 <HAL_GetTick>
90002ca0:	4602      	mov	r2, r0
90002ca2:	693b      	ldr	r3, [r7, #16]
90002ca4:	1ad3      	subs	r3, r2, r3
90002ca6:	2b02      	cmp	r3, #2
90002ca8:	d901      	bls.n	90002cae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90002caa:	2303      	movs	r3, #3
90002cac:	e057      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90002cae:	4b10      	ldr	r3, [pc, #64]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002cb0:	681b      	ldr	r3, [r3, #0]
90002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002cb6:	2b00      	cmp	r3, #0
90002cb8:	d0f0      	beq.n	90002c9c <HAL_RCC_OscConfig+0x478>
90002cba:	e04f      	b.n	90002d5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90002cbc:	4b0c      	ldr	r3, [pc, #48]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002cbe:	681b      	ldr	r3, [r3, #0]
90002cc0:	4a0b      	ldr	r2, [pc, #44]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002cc8:	f7fe fdc6 	bl	90001858 <HAL_GetTick>
90002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002cce:	e008      	b.n	90002ce2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002cd0:	f7fe fdc2 	bl	90001858 <HAL_GetTick>
90002cd4:	4602      	mov	r2, r0
90002cd6:	693b      	ldr	r3, [r7, #16]
90002cd8:	1ad3      	subs	r3, r2, r3
90002cda:	2b02      	cmp	r3, #2
90002cdc:	d901      	bls.n	90002ce2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90002cde:	2303      	movs	r3, #3
90002ce0:	e03d      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002ce2:	4b03      	ldr	r3, [pc, #12]	; (90002cf0 <HAL_RCC_OscConfig+0x4cc>)
90002ce4:	681b      	ldr	r3, [r3, #0]
90002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002cea:	2b00      	cmp	r3, #0
90002cec:	d1f0      	bne.n	90002cd0 <HAL_RCC_OscConfig+0x4ac>
90002cee:	e035      	b.n	90002d5c <HAL_RCC_OscConfig+0x538>
90002cf0:	40023800 	.word	0x40023800
90002cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90002cf8:	4b1b      	ldr	r3, [pc, #108]	; (90002d68 <HAL_RCC_OscConfig+0x544>)
90002cfa:	685b      	ldr	r3, [r3, #4]
90002cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002cfe:	687b      	ldr	r3, [r7, #4]
90002d00:	699b      	ldr	r3, [r3, #24]
90002d02:	2b01      	cmp	r3, #1
90002d04:	d028      	beq.n	90002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90002d06:	68fb      	ldr	r3, [r7, #12]
90002d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002d10:	429a      	cmp	r2, r3
90002d12:	d121      	bne.n	90002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002d14:	68fb      	ldr	r3, [r7, #12]
90002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90002d1a:	687b      	ldr	r3, [r7, #4]
90002d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90002d1e:	429a      	cmp	r2, r3
90002d20:	d11a      	bne.n	90002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90002d22:	68fa      	ldr	r2, [r7, #12]
90002d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90002d28:	4013      	ands	r3, r2
90002d2a:	687a      	ldr	r2, [r7, #4]
90002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
90002d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002d30:	4293      	cmp	r3, r2
90002d32:	d111      	bne.n	90002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90002d34:	68fb      	ldr	r3, [r7, #12]
90002d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90002d3a:	687b      	ldr	r3, [r7, #4]
90002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002d3e:	085b      	lsrs	r3, r3, #1
90002d40:	3b01      	subs	r3, #1
90002d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90002d44:	429a      	cmp	r2, r3
90002d46:	d107      	bne.n	90002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90002d48:	68fb      	ldr	r3, [r7, #12]
90002d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90002d4e:	687b      	ldr	r3, [r7, #4]
90002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90002d54:	429a      	cmp	r2, r3
90002d56:	d001      	beq.n	90002d5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90002d58:	2301      	movs	r3, #1
90002d5a:	e000      	b.n	90002d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90002d5c:	2300      	movs	r3, #0
}
90002d5e:	4618      	mov	r0, r3
90002d60:	3718      	adds	r7, #24
90002d62:	46bd      	mov	sp, r7
90002d64:	bd80      	pop	{r7, pc}
90002d66:	bf00      	nop
90002d68:	40023800 	.word	0x40023800

90002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90002d6c:	b580      	push	{r7, lr}
90002d6e:	b084      	sub	sp, #16
90002d70:	af00      	add	r7, sp, #0
90002d72:	6078      	str	r0, [r7, #4]
90002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90002d76:	2300      	movs	r3, #0
90002d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90002d7a:	687b      	ldr	r3, [r7, #4]
90002d7c:	2b00      	cmp	r3, #0
90002d7e:	d101      	bne.n	90002d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90002d80:	2301      	movs	r3, #1
90002d82:	e0d0      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90002d84:	4b6a      	ldr	r3, [pc, #424]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002d86:	681b      	ldr	r3, [r3, #0]
90002d88:	f003 030f 	and.w	r3, r3, #15
90002d8c:	683a      	ldr	r2, [r7, #0]
90002d8e:	429a      	cmp	r2, r3
90002d90:	d910      	bls.n	90002db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90002d92:	4b67      	ldr	r3, [pc, #412]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002d94:	681b      	ldr	r3, [r3, #0]
90002d96:	f023 020f 	bic.w	r2, r3, #15
90002d9a:	4965      	ldr	r1, [pc, #404]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002d9c:	683b      	ldr	r3, [r7, #0]
90002d9e:	4313      	orrs	r3, r2
90002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90002da2:	4b63      	ldr	r3, [pc, #396]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002da4:	681b      	ldr	r3, [r3, #0]
90002da6:	f003 030f 	and.w	r3, r3, #15
90002daa:	683a      	ldr	r2, [r7, #0]
90002dac:	429a      	cmp	r2, r3
90002dae:	d001      	beq.n	90002db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90002db0:	2301      	movs	r3, #1
90002db2:	e0b8      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90002db4:	687b      	ldr	r3, [r7, #4]
90002db6:	681b      	ldr	r3, [r3, #0]
90002db8:	f003 0302 	and.w	r3, r3, #2
90002dbc:	2b00      	cmp	r3, #0
90002dbe:	d020      	beq.n	90002e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90002dc0:	687b      	ldr	r3, [r7, #4]
90002dc2:	681b      	ldr	r3, [r3, #0]
90002dc4:	f003 0304 	and.w	r3, r3, #4
90002dc8:	2b00      	cmp	r3, #0
90002dca:	d005      	beq.n	90002dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90002dcc:	4b59      	ldr	r3, [pc, #356]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002dce:	689b      	ldr	r3, [r3, #8]
90002dd0:	4a58      	ldr	r2, [pc, #352]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
90002dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90002dd8:	687b      	ldr	r3, [r7, #4]
90002dda:	681b      	ldr	r3, [r3, #0]
90002ddc:	f003 0308 	and.w	r3, r3, #8
90002de0:	2b00      	cmp	r3, #0
90002de2:	d005      	beq.n	90002df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90002de4:	4b53      	ldr	r3, [pc, #332]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002de6:	689b      	ldr	r3, [r3, #8]
90002de8:	4a52      	ldr	r2, [pc, #328]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90002dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90002df0:	4b50      	ldr	r3, [pc, #320]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002df2:	689b      	ldr	r3, [r3, #8]
90002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90002df8:	687b      	ldr	r3, [r7, #4]
90002dfa:	689b      	ldr	r3, [r3, #8]
90002dfc:	494d      	ldr	r1, [pc, #308]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002dfe:	4313      	orrs	r3, r2
90002e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90002e02:	687b      	ldr	r3, [r7, #4]
90002e04:	681b      	ldr	r3, [r3, #0]
90002e06:	f003 0301 	and.w	r3, r3, #1
90002e0a:	2b00      	cmp	r3, #0
90002e0c:	d040      	beq.n	90002e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002e0e:	687b      	ldr	r3, [r7, #4]
90002e10:	685b      	ldr	r3, [r3, #4]
90002e12:	2b01      	cmp	r3, #1
90002e14:	d107      	bne.n	90002e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002e16:	4b47      	ldr	r3, [pc, #284]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e18:	681b      	ldr	r3, [r3, #0]
90002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002e1e:	2b00      	cmp	r3, #0
90002e20:	d115      	bne.n	90002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90002e22:	2301      	movs	r3, #1
90002e24:	e07f      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90002e26:	687b      	ldr	r3, [r7, #4]
90002e28:	685b      	ldr	r3, [r3, #4]
90002e2a:	2b02      	cmp	r3, #2
90002e2c:	d107      	bne.n	90002e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90002e2e:	4b41      	ldr	r3, [pc, #260]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e30:	681b      	ldr	r3, [r3, #0]
90002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002e36:	2b00      	cmp	r3, #0
90002e38:	d109      	bne.n	90002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90002e3a:	2301      	movs	r3, #1
90002e3c:	e073      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002e3e:	4b3d      	ldr	r3, [pc, #244]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e40:	681b      	ldr	r3, [r3, #0]
90002e42:	f003 0302 	and.w	r3, r3, #2
90002e46:	2b00      	cmp	r3, #0
90002e48:	d101      	bne.n	90002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90002e4a:	2301      	movs	r3, #1
90002e4c:	e06b      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90002e4e:	4b39      	ldr	r3, [pc, #228]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e50:	689b      	ldr	r3, [r3, #8]
90002e52:	f023 0203 	bic.w	r2, r3, #3
90002e56:	687b      	ldr	r3, [r7, #4]
90002e58:	685b      	ldr	r3, [r3, #4]
90002e5a:	4936      	ldr	r1, [pc, #216]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e5c:	4313      	orrs	r3, r2
90002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002e60:	f7fe fcfa 	bl	90001858 <HAL_GetTick>
90002e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90002e66:	e00a      	b.n	90002e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90002e68:	f7fe fcf6 	bl	90001858 <HAL_GetTick>
90002e6c:	4602      	mov	r2, r0
90002e6e:	68fb      	ldr	r3, [r7, #12]
90002e70:	1ad3      	subs	r3, r2, r3
90002e72:	f241 3288 	movw	r2, #5000	; 0x1388
90002e76:	4293      	cmp	r3, r2
90002e78:	d901      	bls.n	90002e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90002e7a:	2303      	movs	r3, #3
90002e7c:	e053      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90002e7e:	4b2d      	ldr	r3, [pc, #180]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002e80:	689b      	ldr	r3, [r3, #8]
90002e82:	f003 020c 	and.w	r2, r3, #12
90002e86:	687b      	ldr	r3, [r7, #4]
90002e88:	685b      	ldr	r3, [r3, #4]
90002e8a:	009b      	lsls	r3, r3, #2
90002e8c:	429a      	cmp	r2, r3
90002e8e:	d1eb      	bne.n	90002e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90002e90:	4b27      	ldr	r3, [pc, #156]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002e92:	681b      	ldr	r3, [r3, #0]
90002e94:	f003 030f 	and.w	r3, r3, #15
90002e98:	683a      	ldr	r2, [r7, #0]
90002e9a:	429a      	cmp	r2, r3
90002e9c:	d210      	bcs.n	90002ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90002e9e:	4b24      	ldr	r3, [pc, #144]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002ea0:	681b      	ldr	r3, [r3, #0]
90002ea2:	f023 020f 	bic.w	r2, r3, #15
90002ea6:	4922      	ldr	r1, [pc, #136]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002ea8:	683b      	ldr	r3, [r7, #0]
90002eaa:	4313      	orrs	r3, r2
90002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90002eae:	4b20      	ldr	r3, [pc, #128]	; (90002f30 <HAL_RCC_ClockConfig+0x1c4>)
90002eb0:	681b      	ldr	r3, [r3, #0]
90002eb2:	f003 030f 	and.w	r3, r3, #15
90002eb6:	683a      	ldr	r2, [r7, #0]
90002eb8:	429a      	cmp	r2, r3
90002eba:	d001      	beq.n	90002ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90002ebc:	2301      	movs	r3, #1
90002ebe:	e032      	b.n	90002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90002ec0:	687b      	ldr	r3, [r7, #4]
90002ec2:	681b      	ldr	r3, [r3, #0]
90002ec4:	f003 0304 	and.w	r3, r3, #4
90002ec8:	2b00      	cmp	r3, #0
90002eca:	d008      	beq.n	90002ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90002ecc:	4b19      	ldr	r3, [pc, #100]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002ece:	689b      	ldr	r3, [r3, #8]
90002ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90002ed4:	687b      	ldr	r3, [r7, #4]
90002ed6:	68db      	ldr	r3, [r3, #12]
90002ed8:	4916      	ldr	r1, [pc, #88]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002eda:	4313      	orrs	r3, r2
90002edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90002ede:	687b      	ldr	r3, [r7, #4]
90002ee0:	681b      	ldr	r3, [r3, #0]
90002ee2:	f003 0308 	and.w	r3, r3, #8
90002ee6:	2b00      	cmp	r3, #0
90002ee8:	d009      	beq.n	90002efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90002eea:	4b12      	ldr	r3, [pc, #72]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002eec:	689b      	ldr	r3, [r3, #8]
90002eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90002ef2:	687b      	ldr	r3, [r7, #4]
90002ef4:	691b      	ldr	r3, [r3, #16]
90002ef6:	00db      	lsls	r3, r3, #3
90002ef8:	490e      	ldr	r1, [pc, #56]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002efa:	4313      	orrs	r3, r2
90002efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90002efe:	f000 f821 	bl	90002f44 <HAL_RCC_GetSysClockFreq>
90002f02:	4601      	mov	r1, r0
90002f04:	4b0b      	ldr	r3, [pc, #44]	; (90002f34 <HAL_RCC_ClockConfig+0x1c8>)
90002f06:	689b      	ldr	r3, [r3, #8]
90002f08:	091b      	lsrs	r3, r3, #4
90002f0a:	f003 030f 	and.w	r3, r3, #15
90002f0e:	4a0a      	ldr	r2, [pc, #40]	; (90002f38 <HAL_RCC_ClockConfig+0x1cc>)
90002f10:	5cd3      	ldrb	r3, [r2, r3]
90002f12:	fa21 f303 	lsr.w	r3, r1, r3
90002f16:	4a09      	ldr	r2, [pc, #36]	; (90002f3c <HAL_RCC_ClockConfig+0x1d0>)
90002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
90002f1a:	4b09      	ldr	r3, [pc, #36]	; (90002f40 <HAL_RCC_ClockConfig+0x1d4>)
90002f1c:	681b      	ldr	r3, [r3, #0]
90002f1e:	4618      	mov	r0, r3
90002f20:	f7fe fc56 	bl	900017d0 <HAL_InitTick>

  return HAL_OK;
90002f24:	2300      	movs	r3, #0
}
90002f26:	4618      	mov	r0, r3
90002f28:	3710      	adds	r7, #16
90002f2a:	46bd      	mov	sp, r7
90002f2c:	bd80      	pop	{r7, pc}
90002f2e:	bf00      	nop
90002f30:	40023c00 	.word	0x40023c00
90002f34:	40023800 	.word	0x40023800
90002f38:	90004430 	.word	0x90004430
90002f3c:	c0000000 	.word	0xc0000000
90002f40:	c0000004 	.word	0xc0000004

90002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
90002f46:	b085      	sub	sp, #20
90002f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90002f4a:	2300      	movs	r3, #0
90002f4c:	607b      	str	r3, [r7, #4]
90002f4e:	2300      	movs	r3, #0
90002f50:	60fb      	str	r3, [r7, #12]
90002f52:	2300      	movs	r3, #0
90002f54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
90002f56:	2300      	movs	r3, #0
90002f58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90002f5a:	4b50      	ldr	r3, [pc, #320]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90002f5c:	689b      	ldr	r3, [r3, #8]
90002f5e:	f003 030c 	and.w	r3, r3, #12
90002f62:	2b04      	cmp	r3, #4
90002f64:	d007      	beq.n	90002f76 <HAL_RCC_GetSysClockFreq+0x32>
90002f66:	2b08      	cmp	r3, #8
90002f68:	d008      	beq.n	90002f7c <HAL_RCC_GetSysClockFreq+0x38>
90002f6a:	2b00      	cmp	r3, #0
90002f6c:	f040 808d 	bne.w	9000308a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90002f70:	4b4b      	ldr	r3, [pc, #300]	; (900030a0 <HAL_RCC_GetSysClockFreq+0x15c>)
90002f72:	60bb      	str	r3, [r7, #8]
      break;
90002f74:	e08c      	b.n	90003090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
90002f76:	4b4b      	ldr	r3, [pc, #300]	; (900030a4 <HAL_RCC_GetSysClockFreq+0x160>)
90002f78:	60bb      	str	r3, [r7, #8]
      break;
90002f7a:	e089      	b.n	90003090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90002f7c:	4b47      	ldr	r3, [pc, #284]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90002f7e:	685b      	ldr	r3, [r3, #4]
90002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90002f84:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90002f86:	4b45      	ldr	r3, [pc, #276]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90002f88:	685b      	ldr	r3, [r3, #4]
90002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002f8e:	2b00      	cmp	r3, #0
90002f90:	d023      	beq.n	90002fda <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002f92:	4b42      	ldr	r3, [pc, #264]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90002f94:	685b      	ldr	r3, [r3, #4]
90002f96:	099b      	lsrs	r3, r3, #6
90002f98:	f04f 0400 	mov.w	r4, #0
90002f9c:	f240 11ff 	movw	r1, #511	; 0x1ff
90002fa0:	f04f 0200 	mov.w	r2, #0
90002fa4:	ea03 0501 	and.w	r5, r3, r1
90002fa8:	ea04 0602 	and.w	r6, r4, r2
90002fac:	4a3d      	ldr	r2, [pc, #244]	; (900030a4 <HAL_RCC_GetSysClockFreq+0x160>)
90002fae:	fb02 f106 	mul.w	r1, r2, r6
90002fb2:	2200      	movs	r2, #0
90002fb4:	fb02 f205 	mul.w	r2, r2, r5
90002fb8:	440a      	add	r2, r1
90002fba:	493a      	ldr	r1, [pc, #232]	; (900030a4 <HAL_RCC_GetSysClockFreq+0x160>)
90002fbc:	fba5 0101 	umull	r0, r1, r5, r1
90002fc0:	1853      	adds	r3, r2, r1
90002fc2:	4619      	mov	r1, r3
90002fc4:	687b      	ldr	r3, [r7, #4]
90002fc6:	f04f 0400 	mov.w	r4, #0
90002fca:	461a      	mov	r2, r3
90002fcc:	4623      	mov	r3, r4
90002fce:	f7fd f91b 	bl	90000208 <__aeabi_uldivmod>
90002fd2:	4603      	mov	r3, r0
90002fd4:	460c      	mov	r4, r1
90002fd6:	60fb      	str	r3, [r7, #12]
90002fd8:	e049      	b.n	9000306e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002fda:	4b30      	ldr	r3, [pc, #192]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90002fdc:	685b      	ldr	r3, [r3, #4]
90002fde:	099b      	lsrs	r3, r3, #6
90002fe0:	f04f 0400 	mov.w	r4, #0
90002fe4:	f240 11ff 	movw	r1, #511	; 0x1ff
90002fe8:	f04f 0200 	mov.w	r2, #0
90002fec:	ea03 0501 	and.w	r5, r3, r1
90002ff0:	ea04 0602 	and.w	r6, r4, r2
90002ff4:	4629      	mov	r1, r5
90002ff6:	4632      	mov	r2, r6
90002ff8:	f04f 0300 	mov.w	r3, #0
90002ffc:	f04f 0400 	mov.w	r4, #0
90003000:	0154      	lsls	r4, r2, #5
90003002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
90003006:	014b      	lsls	r3, r1, #5
90003008:	4619      	mov	r1, r3
9000300a:	4622      	mov	r2, r4
9000300c:	1b49      	subs	r1, r1, r5
9000300e:	eb62 0206 	sbc.w	r2, r2, r6
90003012:	f04f 0300 	mov.w	r3, #0
90003016:	f04f 0400 	mov.w	r4, #0
9000301a:	0194      	lsls	r4, r2, #6
9000301c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
90003020:	018b      	lsls	r3, r1, #6
90003022:	1a5b      	subs	r3, r3, r1
90003024:	eb64 0402 	sbc.w	r4, r4, r2
90003028:	f04f 0100 	mov.w	r1, #0
9000302c:	f04f 0200 	mov.w	r2, #0
90003030:	00e2      	lsls	r2, r4, #3
90003032:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
90003036:	00d9      	lsls	r1, r3, #3
90003038:	460b      	mov	r3, r1
9000303a:	4614      	mov	r4, r2
9000303c:	195b      	adds	r3, r3, r5
9000303e:	eb44 0406 	adc.w	r4, r4, r6
90003042:	f04f 0100 	mov.w	r1, #0
90003046:	f04f 0200 	mov.w	r2, #0
9000304a:	02a2      	lsls	r2, r4, #10
9000304c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
90003050:	0299      	lsls	r1, r3, #10
90003052:	460b      	mov	r3, r1
90003054:	4614      	mov	r4, r2
90003056:	4618      	mov	r0, r3
90003058:	4621      	mov	r1, r4
9000305a:	687b      	ldr	r3, [r7, #4]
9000305c:	f04f 0400 	mov.w	r4, #0
90003060:	461a      	mov	r2, r3
90003062:	4623      	mov	r3, r4
90003064:	f7fd f8d0 	bl	90000208 <__aeabi_uldivmod>
90003068:	4603      	mov	r3, r0
9000306a:	460c      	mov	r4, r1
9000306c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
9000306e:	4b0b      	ldr	r3, [pc, #44]	; (9000309c <HAL_RCC_GetSysClockFreq+0x158>)
90003070:	685b      	ldr	r3, [r3, #4]
90003072:	0c1b      	lsrs	r3, r3, #16
90003074:	f003 0303 	and.w	r3, r3, #3
90003078:	3301      	adds	r3, #1
9000307a:	005b      	lsls	r3, r3, #1
9000307c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
9000307e:	68fa      	ldr	r2, [r7, #12]
90003080:	683b      	ldr	r3, [r7, #0]
90003082:	fbb2 f3f3 	udiv	r3, r2, r3
90003086:	60bb      	str	r3, [r7, #8]
      break;
90003088:	e002      	b.n	90003090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
9000308a:	4b05      	ldr	r3, [pc, #20]	; (900030a0 <HAL_RCC_GetSysClockFreq+0x15c>)
9000308c:	60bb      	str	r3, [r7, #8]
      break;
9000308e:	bf00      	nop
    }
  }
  return sysclockfreq;
90003090:	68bb      	ldr	r3, [r7, #8]
}
90003092:	4618      	mov	r0, r3
90003094:	3714      	adds	r7, #20
90003096:	46bd      	mov	sp, r7
90003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000309a:	bf00      	nop
9000309c:	40023800 	.word	0x40023800
900030a0:	00f42400 	.word	0x00f42400
900030a4:	017d7840 	.word	0x017d7840

900030a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900030a8:	b480      	push	{r7}
900030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
900030ac:	4b03      	ldr	r3, [pc, #12]	; (900030bc <HAL_RCC_GetHCLKFreq+0x14>)
900030ae:	681b      	ldr	r3, [r3, #0]
}
900030b0:	4618      	mov	r0, r3
900030b2:	46bd      	mov	sp, r7
900030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900030b8:	4770      	bx	lr
900030ba:	bf00      	nop
900030bc:	c0000000 	.word	0xc0000000

900030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900030c0:	b580      	push	{r7, lr}
900030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
900030c4:	f7ff fff0 	bl	900030a8 <HAL_RCC_GetHCLKFreq>
900030c8:	4601      	mov	r1, r0
900030ca:	4b05      	ldr	r3, [pc, #20]	; (900030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
900030cc:	689b      	ldr	r3, [r3, #8]
900030ce:	0a9b      	lsrs	r3, r3, #10
900030d0:	f003 0307 	and.w	r3, r3, #7
900030d4:	4a03      	ldr	r2, [pc, #12]	; (900030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
900030d6:	5cd3      	ldrb	r3, [r2, r3]
900030d8:	fa21 f303 	lsr.w	r3, r1, r3
}
900030dc:	4618      	mov	r0, r3
900030de:	bd80      	pop	{r7, pc}
900030e0:	40023800 	.word	0x40023800
900030e4:	90004440 	.word	0x90004440

900030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900030e8:	b580      	push	{r7, lr}
900030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
900030ec:	f7ff ffdc 	bl	900030a8 <HAL_RCC_GetHCLKFreq>
900030f0:	4601      	mov	r1, r0
900030f2:	4b05      	ldr	r3, [pc, #20]	; (90003108 <HAL_RCC_GetPCLK2Freq+0x20>)
900030f4:	689b      	ldr	r3, [r3, #8]
900030f6:	0b5b      	lsrs	r3, r3, #13
900030f8:	f003 0307 	and.w	r3, r3, #7
900030fc:	4a03      	ldr	r2, [pc, #12]	; (9000310c <HAL_RCC_GetPCLK2Freq+0x24>)
900030fe:	5cd3      	ldrb	r3, [r2, r3]
90003100:	fa21 f303 	lsr.w	r3, r1, r3
}
90003104:	4618      	mov	r0, r3
90003106:	bd80      	pop	{r7, pc}
90003108:	40023800 	.word	0x40023800
9000310c:	90004440 	.word	0x90004440

90003110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90003110:	b580      	push	{r7, lr}
90003112:	b088      	sub	sp, #32
90003114:	af00      	add	r7, sp, #0
90003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
90003118:	2300      	movs	r3, #0
9000311a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
9000311c:	2300      	movs	r3, #0
9000311e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
90003120:	2300      	movs	r3, #0
90003122:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
90003124:	2300      	movs	r3, #0
90003126:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
90003128:	2300      	movs	r3, #0
9000312a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
9000312c:	687b      	ldr	r3, [r7, #4]
9000312e:	681b      	ldr	r3, [r3, #0]
90003130:	f003 0301 	and.w	r3, r3, #1
90003134:	2b00      	cmp	r3, #0
90003136:	d012      	beq.n	9000315e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90003138:	4b69      	ldr	r3, [pc, #420]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000313a:	689b      	ldr	r3, [r3, #8]
9000313c:	4a68      	ldr	r2, [pc, #416]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000313e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90003142:	6093      	str	r3, [r2, #8]
90003144:	4b66      	ldr	r3, [pc, #408]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003146:	689a      	ldr	r2, [r3, #8]
90003148:	687b      	ldr	r3, [r7, #4]
9000314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000314c:	4964      	ldr	r1, [pc, #400]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000314e:	4313      	orrs	r3, r2
90003150:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90003152:	687b      	ldr	r3, [r7, #4]
90003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003156:	2b00      	cmp	r3, #0
90003158:	d101      	bne.n	9000315e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
9000315a:	2301      	movs	r3, #1
9000315c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
9000315e:	687b      	ldr	r3, [r7, #4]
90003160:	681b      	ldr	r3, [r3, #0]
90003162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003166:	2b00      	cmp	r3, #0
90003168:	d017      	beq.n	9000319a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000316a:	4b5d      	ldr	r3, [pc, #372]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000316c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003174:	687b      	ldr	r3, [r7, #4]
90003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003178:	4959      	ldr	r1, [pc, #356]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000317a:	4313      	orrs	r3, r2
9000317c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90003180:	687b      	ldr	r3, [r7, #4]
90003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90003188:	d101      	bne.n	9000318e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
9000318a:	2301      	movs	r3, #1
9000318c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
9000318e:	687b      	ldr	r3, [r7, #4]
90003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003192:	2b00      	cmp	r3, #0
90003194:	d101      	bne.n	9000319a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
90003196:	2301      	movs	r3, #1
90003198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
9000319a:	687b      	ldr	r3, [r7, #4]
9000319c:	681b      	ldr	r3, [r3, #0]
9000319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900031a2:	2b00      	cmp	r3, #0
900031a4:	d017      	beq.n	900031d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900031a6:	4b4e      	ldr	r3, [pc, #312]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900031ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
900031b0:	687b      	ldr	r3, [r7, #4]
900031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900031b4:	494a      	ldr	r1, [pc, #296]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900031b6:	4313      	orrs	r3, r2
900031b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
900031bc:	687b      	ldr	r3, [r7, #4]
900031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900031c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900031c4:	d101      	bne.n	900031ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
900031c6:	2301      	movs	r3, #1
900031c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
900031ca:	687b      	ldr	r3, [r7, #4]
900031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900031ce:	2b00      	cmp	r3, #0
900031d0:	d101      	bne.n	900031d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
900031d2:	2301      	movs	r3, #1
900031d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900031d6:	687b      	ldr	r3, [r7, #4]
900031d8:	681b      	ldr	r3, [r3, #0]
900031da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900031de:	2b00      	cmp	r3, #0
900031e0:	d001      	beq.n	900031e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
900031e2:	2301      	movs	r3, #1
900031e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
900031e6:	687b      	ldr	r3, [r7, #4]
900031e8:	681b      	ldr	r3, [r3, #0]
900031ea:	f003 0320 	and.w	r3, r3, #32
900031ee:	2b00      	cmp	r3, #0
900031f0:	f000 808b 	beq.w	9000330a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
900031f4:	4b3a      	ldr	r3, [pc, #232]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900031f8:	4a39      	ldr	r2, [pc, #228]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900031fe:	6413      	str	r3, [r2, #64]	; 0x40
90003200:	4b37      	ldr	r3, [pc, #220]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003208:	60bb      	str	r3, [r7, #8]
9000320a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
9000320c:	4b35      	ldr	r3, [pc, #212]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
9000320e:	681b      	ldr	r3, [r3, #0]
90003210:	4a34      	ldr	r2, [pc, #208]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003218:	f7fe fb1e 	bl	90001858 <HAL_GetTick>
9000321c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
9000321e:	e008      	b.n	90003232 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90003220:	f7fe fb1a 	bl	90001858 <HAL_GetTick>
90003224:	4602      	mov	r2, r0
90003226:	697b      	ldr	r3, [r7, #20]
90003228:	1ad3      	subs	r3, r2, r3
9000322a:	2b64      	cmp	r3, #100	; 0x64
9000322c:	d901      	bls.n	90003232 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
9000322e:	2303      	movs	r3, #3
90003230:	e355      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003232:	4b2c      	ldr	r3, [pc, #176]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003234:	681b      	ldr	r3, [r3, #0]
90003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000323a:	2b00      	cmp	r3, #0
9000323c:	d0f0      	beq.n	90003220 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
9000323e:	4b28      	ldr	r3, [pc, #160]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003246:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90003248:	693b      	ldr	r3, [r7, #16]
9000324a:	2b00      	cmp	r3, #0
9000324c:	d035      	beq.n	900032ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
9000324e:	687b      	ldr	r3, [r7, #4]
90003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003256:	693a      	ldr	r2, [r7, #16]
90003258:	429a      	cmp	r2, r3
9000325a:	d02e      	beq.n	900032ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000325c:	4b20      	ldr	r3, [pc, #128]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90003264:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
90003266:	4b1e      	ldr	r3, [pc, #120]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000326a:	4a1d      	ldr	r2, [pc, #116]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003270:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90003272:	4b1b      	ldr	r3, [pc, #108]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003276:	4a1a      	ldr	r2, [pc, #104]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000327c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
9000327e:	4a18      	ldr	r2, [pc, #96]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003280:	693b      	ldr	r3, [r7, #16]
90003282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90003284:	4b16      	ldr	r3, [pc, #88]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003288:	f003 0301 	and.w	r3, r3, #1
9000328c:	2b01      	cmp	r3, #1
9000328e:	d114      	bne.n	900032ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003290:	f7fe fae2 	bl	90001858 <HAL_GetTick>
90003294:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003296:	e00a      	b.n	900032ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90003298:	f7fe fade 	bl	90001858 <HAL_GetTick>
9000329c:	4602      	mov	r2, r0
9000329e:	697b      	ldr	r3, [r7, #20]
900032a0:	1ad3      	subs	r3, r2, r3
900032a2:	f241 3288 	movw	r2, #5000	; 0x1388
900032a6:	4293      	cmp	r3, r2
900032a8:	d901      	bls.n	900032ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
900032aa:	2303      	movs	r3, #3
900032ac:	e317      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900032ae:	4b0c      	ldr	r3, [pc, #48]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900032b2:	f003 0302 	and.w	r3, r3, #2
900032b6:	2b00      	cmp	r3, #0
900032b8:	d0ee      	beq.n	90003298 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900032ba:	687b      	ldr	r3, [r7, #4]
900032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
900032c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900032c6:	d111      	bne.n	900032ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
900032c8:	4b05      	ldr	r3, [pc, #20]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900032ca:	689b      	ldr	r3, [r3, #8]
900032cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
900032d0:	687b      	ldr	r3, [r7, #4]
900032d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
900032d4:	4b04      	ldr	r3, [pc, #16]	; (900032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
900032d6:	400b      	ands	r3, r1
900032d8:	4901      	ldr	r1, [pc, #4]	; (900032e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900032da:	4313      	orrs	r3, r2
900032dc:	608b      	str	r3, [r1, #8]
900032de:	e00b      	b.n	900032f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
900032e0:	40023800 	.word	0x40023800
900032e4:	40007000 	.word	0x40007000
900032e8:	0ffffcff 	.word	0x0ffffcff
900032ec:	4bb0      	ldr	r3, [pc, #704]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900032ee:	689b      	ldr	r3, [r3, #8]
900032f0:	4aaf      	ldr	r2, [pc, #700]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900032f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
900032f6:	6093      	str	r3, [r2, #8]
900032f8:	4bad      	ldr	r3, [pc, #692]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900032fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900032fc:	687b      	ldr	r3, [r7, #4]
900032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003304:	49aa      	ldr	r1, [pc, #680]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003306:	4313      	orrs	r3, r2
90003308:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
9000330a:	687b      	ldr	r3, [r7, #4]
9000330c:	681b      	ldr	r3, [r3, #0]
9000330e:	f003 0310 	and.w	r3, r3, #16
90003312:	2b00      	cmp	r3, #0
90003314:	d010      	beq.n	90003338 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90003316:	4ba6      	ldr	r3, [pc, #664]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000331c:	4aa4      	ldr	r2, [pc, #656]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000331e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
90003326:	4ba2      	ldr	r3, [pc, #648]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003328:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
9000332c:	687b      	ldr	r3, [r7, #4]
9000332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003330:	499f      	ldr	r1, [pc, #636]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003332:	4313      	orrs	r3, r2
90003334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90003338:	687b      	ldr	r3, [r7, #4]
9000333a:	681b      	ldr	r3, [r3, #0]
9000333c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90003340:	2b00      	cmp	r3, #0
90003342:	d00a      	beq.n	9000335a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90003344:	4b9a      	ldr	r3, [pc, #616]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000334a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
9000334e:	687b      	ldr	r3, [r7, #4]
90003350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003352:	4997      	ldr	r1, [pc, #604]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003354:	4313      	orrs	r3, r2
90003356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
9000335a:	687b      	ldr	r3, [r7, #4]
9000335c:	681b      	ldr	r3, [r3, #0]
9000335e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90003362:	2b00      	cmp	r3, #0
90003364:	d00a      	beq.n	9000337c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90003366:	4b92      	ldr	r3, [pc, #584]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000336c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
90003370:	687b      	ldr	r3, [r7, #4]
90003372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90003374:	498e      	ldr	r1, [pc, #568]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003376:	4313      	orrs	r3, r2
90003378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
9000337c:	687b      	ldr	r3, [r7, #4]
9000337e:	681b      	ldr	r3, [r3, #0]
90003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003384:	2b00      	cmp	r3, #0
90003386:	d00a      	beq.n	9000339e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90003388:	4b89      	ldr	r3, [pc, #548]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000338e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003392:	687b      	ldr	r3, [r7, #4]
90003394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90003396:	4986      	ldr	r1, [pc, #536]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003398:	4313      	orrs	r3, r2
9000339a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000339e:	687b      	ldr	r3, [r7, #4]
900033a0:	681b      	ldr	r3, [r3, #0]
900033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900033a6:	2b00      	cmp	r3, #0
900033a8:	d00a      	beq.n	900033c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900033aa:	4b81      	ldr	r3, [pc, #516]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900033b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
900033b4:	687b      	ldr	r3, [r7, #4]
900033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900033b8:	497d      	ldr	r1, [pc, #500]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033ba:	4313      	orrs	r3, r2
900033bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
900033c0:	687b      	ldr	r3, [r7, #4]
900033c2:	681b      	ldr	r3, [r3, #0]
900033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
900033c8:	2b00      	cmp	r3, #0
900033ca:	d00a      	beq.n	900033e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
900033cc:	4b78      	ldr	r3, [pc, #480]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900033d2:	f023 0203 	bic.w	r2, r3, #3
900033d6:	687b      	ldr	r3, [r7, #4]
900033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900033da:	4975      	ldr	r1, [pc, #468]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033dc:	4313      	orrs	r3, r2
900033de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
900033e2:	687b      	ldr	r3, [r7, #4]
900033e4:	681b      	ldr	r3, [r3, #0]
900033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
900033ea:	2b00      	cmp	r3, #0
900033ec:	d00a      	beq.n	90003404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
900033ee:	4b70      	ldr	r3, [pc, #448]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900033f4:	f023 020c 	bic.w	r2, r3, #12
900033f8:	687b      	ldr	r3, [r7, #4]
900033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900033fc:	496c      	ldr	r1, [pc, #432]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900033fe:	4313      	orrs	r3, r2
90003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90003404:	687b      	ldr	r3, [r7, #4]
90003406:	681b      	ldr	r3, [r3, #0]
90003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000340c:	2b00      	cmp	r3, #0
9000340e:	d00a      	beq.n	90003426 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90003410:	4b67      	ldr	r3, [pc, #412]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
9000341a:	687b      	ldr	r3, [r7, #4]
9000341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000341e:	4964      	ldr	r1, [pc, #400]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003420:	4313      	orrs	r3, r2
90003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90003426:	687b      	ldr	r3, [r7, #4]
90003428:	681b      	ldr	r3, [r3, #0]
9000342a:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000342e:	2b00      	cmp	r3, #0
90003430:	d00a      	beq.n	90003448 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90003432:	4b5f      	ldr	r3, [pc, #380]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003438:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
9000343c:	687b      	ldr	r3, [r7, #4]
9000343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90003440:	495b      	ldr	r1, [pc, #364]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003442:	4313      	orrs	r3, r2
90003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90003448:	687b      	ldr	r3, [r7, #4]
9000344a:	681b      	ldr	r3, [r3, #0]
9000344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90003450:	2b00      	cmp	r3, #0
90003452:	d00a      	beq.n	9000346a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90003454:	4b56      	ldr	r3, [pc, #344]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000345a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
9000345e:	687b      	ldr	r3, [r7, #4]
90003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003462:	4953      	ldr	r1, [pc, #332]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003464:	4313      	orrs	r3, r2
90003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
9000346a:	687b      	ldr	r3, [r7, #4]
9000346c:	681b      	ldr	r3, [r3, #0]
9000346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90003472:	2b00      	cmp	r3, #0
90003474:	d00a      	beq.n	9000348c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90003476:	4b4e      	ldr	r3, [pc, #312]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000347c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90003480:	687b      	ldr	r3, [r7, #4]
90003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90003484:	494a      	ldr	r1, [pc, #296]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003486:	4313      	orrs	r3, r2
90003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
9000348c:	687b      	ldr	r3, [r7, #4]
9000348e:	681b      	ldr	r3, [r3, #0]
90003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90003494:	2b00      	cmp	r3, #0
90003496:	d00a      	beq.n	900034ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90003498:	4b45      	ldr	r3, [pc, #276]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000349e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
900034a2:	687b      	ldr	r3, [r7, #4]
900034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900034a6:	4942      	ldr	r1, [pc, #264]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900034a8:	4313      	orrs	r3, r2
900034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
900034ae:	687b      	ldr	r3, [r7, #4]
900034b0:	681b      	ldr	r3, [r3, #0]
900034b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900034b6:	2b00      	cmp	r3, #0
900034b8:	d00a      	beq.n	900034d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
900034ba:	4b3d      	ldr	r3, [pc, #244]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
900034c4:	687b      	ldr	r3, [r7, #4]
900034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900034c8:	4939      	ldr	r1, [pc, #228]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900034ca:	4313      	orrs	r3, r2
900034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
900034d0:	687b      	ldr	r3, [r7, #4]
900034d2:	681b      	ldr	r3, [r3, #0]
900034d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900034d8:	2b00      	cmp	r3, #0
900034da:	d00a      	beq.n	900034f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900034dc:	4b34      	ldr	r3, [pc, #208]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900034e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
900034e6:	687b      	ldr	r3, [r7, #4]
900034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900034ea:	4931      	ldr	r1, [pc, #196]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
900034ec:	4313      	orrs	r3, r2
900034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
900034f2:	687b      	ldr	r3, [r7, #4]
900034f4:	681b      	ldr	r3, [r3, #0]
900034f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900034fa:	2b00      	cmp	r3, #0
900034fc:	d011      	beq.n	90003522 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900034fe:	4b2c      	ldr	r3, [pc, #176]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003504:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
90003508:	687b      	ldr	r3, [r7, #4]
9000350a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000350c:	4928      	ldr	r1, [pc, #160]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000350e:	4313      	orrs	r3, r2
90003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
90003514:	687b      	ldr	r3, [r7, #4]
90003516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
9000351c:	d101      	bne.n	90003522 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
9000351e:	2301      	movs	r3, #1
90003520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90003522:	687b      	ldr	r3, [r7, #4]
90003524:	681b      	ldr	r3, [r3, #0]
90003526:	f003 0308 	and.w	r3, r3, #8
9000352a:	2b00      	cmp	r3, #0
9000352c:	d001      	beq.n	90003532 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
9000352e:	2301      	movs	r3, #1
90003530:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90003532:	687b      	ldr	r3, [r7, #4]
90003534:	681b      	ldr	r3, [r3, #0]
90003536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
9000353a:	2b00      	cmp	r3, #0
9000353c:	d00a      	beq.n	90003554 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000353e:	4b1c      	ldr	r3, [pc, #112]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003544:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
90003548:	687b      	ldr	r3, [r7, #4]
9000354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000354c:	4918      	ldr	r1, [pc, #96]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000354e:	4313      	orrs	r3, r2
90003550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90003554:	687b      	ldr	r3, [r7, #4]
90003556:	681b      	ldr	r3, [r3, #0]
90003558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000355c:	2b00      	cmp	r3, #0
9000355e:	d00b      	beq.n	90003578 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90003560:	4b13      	ldr	r3, [pc, #76]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
9000356a:	687b      	ldr	r3, [r7, #4]
9000356c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90003570:	490f      	ldr	r1, [pc, #60]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003572:	4313      	orrs	r3, r2
90003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90003578:	69fb      	ldr	r3, [r7, #28]
9000357a:	2b01      	cmp	r3, #1
9000357c:	d005      	beq.n	9000358a <HAL_RCCEx_PeriphCLKConfig+0x47a>
9000357e:	687b      	ldr	r3, [r7, #4]
90003580:	681b      	ldr	r3, [r3, #0]
90003582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90003586:	f040 80d8 	bne.w	9000373a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
9000358a:	4b09      	ldr	r3, [pc, #36]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
9000358c:	681b      	ldr	r3, [r3, #0]
9000358e:	4a08      	ldr	r2, [pc, #32]	; (900035b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
90003590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90003594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003596:	f7fe f95f 	bl	90001858 <HAL_GetTick>
9000359a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
9000359c:	e00a      	b.n	900035b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000359e:	f7fe f95b 	bl	90001858 <HAL_GetTick>
900035a2:	4602      	mov	r2, r0
900035a4:	697b      	ldr	r3, [r7, #20]
900035a6:	1ad3      	subs	r3, r2, r3
900035a8:	2b64      	cmp	r3, #100	; 0x64
900035aa:	d903      	bls.n	900035b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
900035ac:	2303      	movs	r3, #3
900035ae:	e196      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
900035b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
900035b4:	4b6c      	ldr	r3, [pc, #432]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
900035b6:	681b      	ldr	r3, [r3, #0]
900035b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900035bc:	2b00      	cmp	r3, #0
900035be:	d1ee      	bne.n	9000359e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
900035c0:	687b      	ldr	r3, [r7, #4]
900035c2:	681b      	ldr	r3, [r3, #0]
900035c4:	f003 0301 	and.w	r3, r3, #1
900035c8:	2b00      	cmp	r3, #0
900035ca:	d021      	beq.n	90003610 <HAL_RCCEx_PeriphCLKConfig+0x500>
900035cc:	687b      	ldr	r3, [r7, #4]
900035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900035d0:	2b00      	cmp	r3, #0
900035d2:	d11d      	bne.n	90003610 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900035d4:	4b64      	ldr	r3, [pc, #400]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
900035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900035da:	0c1b      	lsrs	r3, r3, #16
900035dc:	f003 0303 	and.w	r3, r3, #3
900035e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900035e2:	4b61      	ldr	r3, [pc, #388]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
900035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900035e8:	0e1b      	lsrs	r3, r3, #24
900035ea:	f003 030f 	and.w	r3, r3, #15
900035ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
900035f0:	687b      	ldr	r3, [r7, #4]
900035f2:	685b      	ldr	r3, [r3, #4]
900035f4:	019a      	lsls	r2, r3, #6
900035f6:	693b      	ldr	r3, [r7, #16]
900035f8:	041b      	lsls	r3, r3, #16
900035fa:	431a      	orrs	r2, r3
900035fc:	68fb      	ldr	r3, [r7, #12]
900035fe:	061b      	lsls	r3, r3, #24
90003600:	431a      	orrs	r2, r3
90003602:	687b      	ldr	r3, [r7, #4]
90003604:	689b      	ldr	r3, [r3, #8]
90003606:	071b      	lsls	r3, r3, #28
90003608:	4957      	ldr	r1, [pc, #348]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000360a:	4313      	orrs	r3, r2
9000360c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90003610:	687b      	ldr	r3, [r7, #4]
90003612:	681b      	ldr	r3, [r3, #0]
90003614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003618:	2b00      	cmp	r3, #0
9000361a:	d004      	beq.n	90003626 <HAL_RCCEx_PeriphCLKConfig+0x516>
9000361c:	687b      	ldr	r3, [r7, #4]
9000361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90003624:	d00a      	beq.n	9000363c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90003626:	687b      	ldr	r3, [r7, #4]
90003628:	681b      	ldr	r3, [r3, #0]
9000362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
9000362e:	2b00      	cmp	r3, #0
90003630:	d02e      	beq.n	90003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90003632:	687b      	ldr	r3, [r7, #4]
90003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000363a:	d129      	bne.n	90003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
9000363c:	4b4a      	ldr	r3, [pc, #296]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003642:	0c1b      	lsrs	r3, r3, #16
90003644:	f003 0303 	and.w	r3, r3, #3
90003648:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
9000364a:	4b47      	ldr	r3, [pc, #284]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003650:	0f1b      	lsrs	r3, r3, #28
90003652:	f003 0307 	and.w	r3, r3, #7
90003656:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90003658:	687b      	ldr	r3, [r7, #4]
9000365a:	685b      	ldr	r3, [r3, #4]
9000365c:	019a      	lsls	r2, r3, #6
9000365e:	693b      	ldr	r3, [r7, #16]
90003660:	041b      	lsls	r3, r3, #16
90003662:	431a      	orrs	r2, r3
90003664:	687b      	ldr	r3, [r7, #4]
90003666:	68db      	ldr	r3, [r3, #12]
90003668:	061b      	lsls	r3, r3, #24
9000366a:	431a      	orrs	r2, r3
9000366c:	68fb      	ldr	r3, [r7, #12]
9000366e:	071b      	lsls	r3, r3, #28
90003670:	493d      	ldr	r1, [pc, #244]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
90003672:	4313      	orrs	r3, r2
90003674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90003678:	4b3b      	ldr	r3, [pc, #236]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000367e:	f023 021f 	bic.w	r2, r3, #31
90003682:	687b      	ldr	r3, [r7, #4]
90003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003686:	3b01      	subs	r3, #1
90003688:	4937      	ldr	r1, [pc, #220]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000368a:	4313      	orrs	r3, r2
9000368c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90003690:	687b      	ldr	r3, [r7, #4]
90003692:	681b      	ldr	r3, [r3, #0]
90003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90003698:	2b00      	cmp	r3, #0
9000369a:	d01d      	beq.n	900036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
9000369c:	4b32      	ldr	r3, [pc, #200]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000369e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900036a2:	0e1b      	lsrs	r3, r3, #24
900036a4:	f003 030f 	and.w	r3, r3, #15
900036a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900036aa:	4b2f      	ldr	r3, [pc, #188]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
900036ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900036b0:	0f1b      	lsrs	r3, r3, #28
900036b2:	f003 0307 	and.w	r3, r3, #7
900036b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
900036b8:	687b      	ldr	r3, [r7, #4]
900036ba:	685b      	ldr	r3, [r3, #4]
900036bc:	019a      	lsls	r2, r3, #6
900036be:	687b      	ldr	r3, [r7, #4]
900036c0:	691b      	ldr	r3, [r3, #16]
900036c2:	041b      	lsls	r3, r3, #16
900036c4:	431a      	orrs	r2, r3
900036c6:	693b      	ldr	r3, [r7, #16]
900036c8:	061b      	lsls	r3, r3, #24
900036ca:	431a      	orrs	r2, r3
900036cc:	68fb      	ldr	r3, [r7, #12]
900036ce:	071b      	lsls	r3, r3, #28
900036d0:	4925      	ldr	r1, [pc, #148]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
900036d2:	4313      	orrs	r3, r2
900036d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
900036d8:	687b      	ldr	r3, [r7, #4]
900036da:	681b      	ldr	r3, [r3, #0]
900036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900036e0:	2b00      	cmp	r3, #0
900036e2:	d011      	beq.n	90003708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
900036e4:	687b      	ldr	r3, [r7, #4]
900036e6:	685b      	ldr	r3, [r3, #4]
900036e8:	019a      	lsls	r2, r3, #6
900036ea:	687b      	ldr	r3, [r7, #4]
900036ec:	691b      	ldr	r3, [r3, #16]
900036ee:	041b      	lsls	r3, r3, #16
900036f0:	431a      	orrs	r2, r3
900036f2:	687b      	ldr	r3, [r7, #4]
900036f4:	68db      	ldr	r3, [r3, #12]
900036f6:	061b      	lsls	r3, r3, #24
900036f8:	431a      	orrs	r2, r3
900036fa:	687b      	ldr	r3, [r7, #4]
900036fc:	689b      	ldr	r3, [r3, #8]
900036fe:	071b      	lsls	r3, r3, #28
90003700:	4919      	ldr	r1, [pc, #100]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
90003702:	4313      	orrs	r3, r2
90003704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
90003708:	4b17      	ldr	r3, [pc, #92]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000370a:	681b      	ldr	r3, [r3, #0]
9000370c:	4a16      	ldr	r2, [pc, #88]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
9000370e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90003712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003714:	f7fe f8a0 	bl	90001858 <HAL_GetTick>
90003718:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
9000371a:	e008      	b.n	9000372e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000371c:	f7fe f89c 	bl	90001858 <HAL_GetTick>
90003720:	4602      	mov	r2, r0
90003722:	697b      	ldr	r3, [r7, #20]
90003724:	1ad3      	subs	r3, r2, r3
90003726:	2b64      	cmp	r3, #100	; 0x64
90003728:	d901      	bls.n	9000372e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
9000372a:	2303      	movs	r3, #3
9000372c:	e0d7      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
9000372e:	4b0e      	ldr	r3, [pc, #56]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
90003730:	681b      	ldr	r3, [r3, #0]
90003732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003736:	2b00      	cmp	r3, #0
90003738:	d0f0      	beq.n	9000371c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
9000373a:	69bb      	ldr	r3, [r7, #24]
9000373c:	2b01      	cmp	r3, #1
9000373e:	f040 80cd 	bne.w	900038dc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90003742:	4b09      	ldr	r3, [pc, #36]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
90003744:	681b      	ldr	r3, [r3, #0]
90003746:	4a08      	ldr	r2, [pc, #32]	; (90003768 <HAL_RCCEx_PeriphCLKConfig+0x658>)
90003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000374c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000374e:	f7fe f883 	bl	90001858 <HAL_GetTick>
90003752:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90003754:	e00a      	b.n	9000376c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90003756:	f7fe f87f 	bl	90001858 <HAL_GetTick>
9000375a:	4602      	mov	r2, r0
9000375c:	697b      	ldr	r3, [r7, #20]
9000375e:	1ad3      	subs	r3, r2, r3
90003760:	2b64      	cmp	r3, #100	; 0x64
90003762:	d903      	bls.n	9000376c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003764:	2303      	movs	r3, #3
90003766:	e0ba      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
90003768:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
9000376c:	4b5e      	ldr	r3, [pc, #376]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
9000376e:	681b      	ldr	r3, [r3, #0]
90003770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90003778:	d0ed      	beq.n	90003756 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
9000377a:	687b      	ldr	r3, [r7, #4]
9000377c:	681b      	ldr	r3, [r3, #0]
9000377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003782:	2b00      	cmp	r3, #0
90003784:	d003      	beq.n	9000378e <HAL_RCCEx_PeriphCLKConfig+0x67e>
90003786:	687b      	ldr	r3, [r7, #4]
90003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000378a:	2b00      	cmp	r3, #0
9000378c:	d009      	beq.n	900037a2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
9000378e:	687b      	ldr	r3, [r7, #4]
90003790:	681b      	ldr	r3, [r3, #0]
90003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90003796:	2b00      	cmp	r3, #0
90003798:	d02e      	beq.n	900037f8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
9000379a:	687b      	ldr	r3, [r7, #4]
9000379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000379e:	2b00      	cmp	r3, #0
900037a0:	d12a      	bne.n	900037f8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900037a2:	4b51      	ldr	r3, [pc, #324]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900037a8:	0c1b      	lsrs	r3, r3, #16
900037aa:	f003 0303 	and.w	r3, r3, #3
900037ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
900037b0:	4b4d      	ldr	r3, [pc, #308]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900037b6:	0f1b      	lsrs	r3, r3, #28
900037b8:	f003 0307 	and.w	r3, r3, #7
900037bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
900037be:	687b      	ldr	r3, [r7, #4]
900037c0:	695b      	ldr	r3, [r3, #20]
900037c2:	019a      	lsls	r2, r3, #6
900037c4:	693b      	ldr	r3, [r7, #16]
900037c6:	041b      	lsls	r3, r3, #16
900037c8:	431a      	orrs	r2, r3
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	699b      	ldr	r3, [r3, #24]
900037ce:	061b      	lsls	r3, r3, #24
900037d0:	431a      	orrs	r2, r3
900037d2:	68fb      	ldr	r3, [r7, #12]
900037d4:	071b      	lsls	r3, r3, #28
900037d6:	4944      	ldr	r1, [pc, #272]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900037d8:	4313      	orrs	r3, r2
900037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
900037de:	4b42      	ldr	r3, [pc, #264]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900037e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900037e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
900037e8:	687b      	ldr	r3, [r7, #4]
900037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900037ec:	3b01      	subs	r3, #1
900037ee:	021b      	lsls	r3, r3, #8
900037f0:	493d      	ldr	r1, [pc, #244]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900037f2:	4313      	orrs	r3, r2
900037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
900037f8:	687b      	ldr	r3, [r7, #4]
900037fa:	681b      	ldr	r3, [r3, #0]
900037fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003800:	2b00      	cmp	r3, #0
90003802:	d022      	beq.n	9000384a <HAL_RCCEx_PeriphCLKConfig+0x73a>
90003804:	687b      	ldr	r3, [r7, #4]
90003806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
9000380c:	d11d      	bne.n	9000384a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000380e:	4b36      	ldr	r3, [pc, #216]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
90003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003814:	0e1b      	lsrs	r3, r3, #24
90003816:	f003 030f 	and.w	r3, r3, #15
9000381a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
9000381c:	4b32      	ldr	r3, [pc, #200]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
9000381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003822:	0f1b      	lsrs	r3, r3, #28
90003824:	f003 0307 	and.w	r3, r3, #7
90003828:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
9000382a:	687b      	ldr	r3, [r7, #4]
9000382c:	695b      	ldr	r3, [r3, #20]
9000382e:	019a      	lsls	r2, r3, #6
90003830:	687b      	ldr	r3, [r7, #4]
90003832:	6a1b      	ldr	r3, [r3, #32]
90003834:	041b      	lsls	r3, r3, #16
90003836:	431a      	orrs	r2, r3
90003838:	693b      	ldr	r3, [r7, #16]
9000383a:	061b      	lsls	r3, r3, #24
9000383c:	431a      	orrs	r2, r3
9000383e:	68fb      	ldr	r3, [r7, #12]
90003840:	071b      	lsls	r3, r3, #28
90003842:	4929      	ldr	r1, [pc, #164]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
90003844:	4313      	orrs	r3, r2
90003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
9000384a:	687b      	ldr	r3, [r7, #4]
9000384c:	681b      	ldr	r3, [r3, #0]
9000384e:	f003 0308 	and.w	r3, r3, #8
90003852:	2b00      	cmp	r3, #0
90003854:	d028      	beq.n	900038a8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90003856:	4b24      	ldr	r3, [pc, #144]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
90003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000385c:	0e1b      	lsrs	r3, r3, #24
9000385e:	f003 030f 	and.w	r3, r3, #15
90003862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90003864:	4b20      	ldr	r3, [pc, #128]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
90003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000386a:	0c1b      	lsrs	r3, r3, #16
9000386c:	f003 0303 	and.w	r3, r3, #3
90003870:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	695b      	ldr	r3, [r3, #20]
90003876:	019a      	lsls	r2, r3, #6
90003878:	68fb      	ldr	r3, [r7, #12]
9000387a:	041b      	lsls	r3, r3, #16
9000387c:	431a      	orrs	r2, r3
9000387e:	693b      	ldr	r3, [r7, #16]
90003880:	061b      	lsls	r3, r3, #24
90003882:	431a      	orrs	r2, r3
90003884:	687b      	ldr	r3, [r7, #4]
90003886:	69db      	ldr	r3, [r3, #28]
90003888:	071b      	lsls	r3, r3, #28
9000388a:	4917      	ldr	r1, [pc, #92]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
9000388c:	4313      	orrs	r3, r2
9000388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90003892:	4b15      	ldr	r3, [pc, #84]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
90003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
9000389c:	687b      	ldr	r3, [r7, #4]
9000389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900038a0:	4911      	ldr	r1, [pc, #68]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900038a2:	4313      	orrs	r3, r2
900038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
900038a8:	4b0f      	ldr	r3, [pc, #60]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900038aa:	681b      	ldr	r3, [r3, #0]
900038ac:	4a0e      	ldr	r2, [pc, #56]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900038b4:	f7fd ffd0 	bl	90001858 <HAL_GetTick>
900038b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
900038ba:	e008      	b.n	900038ce <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
900038bc:	f7fd ffcc 	bl	90001858 <HAL_GetTick>
900038c0:	4602      	mov	r2, r0
900038c2:	697b      	ldr	r3, [r7, #20]
900038c4:	1ad3      	subs	r3, r2, r3
900038c6:	2b64      	cmp	r3, #100	; 0x64
900038c8:	d901      	bls.n	900038ce <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
900038ca:	2303      	movs	r3, #3
900038cc:	e007      	b.n	900038de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
900038ce:	4b06      	ldr	r3, [pc, #24]	; (900038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
900038d0:	681b      	ldr	r3, [r3, #0]
900038d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900038d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900038da:	d1ef      	bne.n	900038bc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
900038dc:	2300      	movs	r3, #0
}
900038de:	4618      	mov	r0, r3
900038e0:	3720      	adds	r7, #32
900038e2:	46bd      	mov	sp, r7
900038e4:	bd80      	pop	{r7, pc}
900038e6:	bf00      	nop
900038e8:	40023800 	.word	0x40023800

900038ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
900038ec:	b580      	push	{r7, lr}
900038ee:	b082      	sub	sp, #8
900038f0:	af00      	add	r7, sp, #0
900038f2:	6078      	str	r0, [r7, #4]
900038f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
900038f6:	687b      	ldr	r3, [r7, #4]
900038f8:	2b00      	cmp	r3, #0
900038fa:	d101      	bne.n	90003900 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900038fc:	2301      	movs	r3, #1
900038fe:	e025      	b.n	9000394c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
90003900:	687b      	ldr	r3, [r7, #4]
90003902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90003906:	b2db      	uxtb	r3, r3
90003908:	2b00      	cmp	r3, #0
9000390a:	d106      	bne.n	9000391a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000390c:	687b      	ldr	r3, [r7, #4]
9000390e:	2200      	movs	r2, #0
90003910:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90003914:	6878      	ldr	r0, [r7, #4]
90003916:	f7fd fec3 	bl	900016a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	2202      	movs	r2, #2
9000391e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90003922:	687b      	ldr	r3, [r7, #4]
90003924:	681a      	ldr	r2, [r3, #0]
90003926:	687b      	ldr	r3, [r7, #4]
90003928:	3304      	adds	r3, #4
9000392a:	4619      	mov	r1, r3
9000392c:	4610      	mov	r0, r2
9000392e:	f000 fc55 	bl	900041dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
90003932:	687b      	ldr	r3, [r7, #4]
90003934:	6818      	ldr	r0, [r3, #0]
90003936:	687b      	ldr	r3, [r7, #4]
90003938:	685b      	ldr	r3, [r3, #4]
9000393a:	461a      	mov	r2, r3
9000393c:	6839      	ldr	r1, [r7, #0]
9000393e:	f000 fcbf 	bl	900042c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90003942:	687b      	ldr	r3, [r7, #4]
90003944:	2201      	movs	r2, #1
90003946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
9000394a:	2300      	movs	r3, #0
}
9000394c:	4618      	mov	r0, r3
9000394e:	3708      	adds	r7, #8
90003950:	46bd      	mov	sp, r7
90003952:	bd80      	pop	{r7, pc}

90003954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90003954:	b580      	push	{r7, lr}
90003956:	b082      	sub	sp, #8
90003958:	af00      	add	r7, sp, #0
9000395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000395c:	687b      	ldr	r3, [r7, #4]
9000395e:	2b00      	cmp	r3, #0
90003960:	d101      	bne.n	90003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90003962:	2301      	movs	r3, #1
90003964:	e040      	b.n	900039e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000396a:	2b00      	cmp	r3, #0
9000396c:	d106      	bne.n	9000397c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
9000396e:	687b      	ldr	r3, [r7, #4]
90003970:	2200      	movs	r2, #0
90003972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90003976:	6878      	ldr	r0, [r7, #4]
90003978:	f7fd fdbe 	bl	900014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
9000397c:	687b      	ldr	r3, [r7, #4]
9000397e:	2224      	movs	r2, #36	; 0x24
90003980:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
90003982:	687b      	ldr	r3, [r7, #4]
90003984:	681b      	ldr	r3, [r3, #0]
90003986:	681a      	ldr	r2, [r3, #0]
90003988:	687b      	ldr	r3, [r7, #4]
9000398a:	681b      	ldr	r3, [r3, #0]
9000398c:	f022 0201 	bic.w	r2, r2, #1
90003990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90003992:	6878      	ldr	r0, [r7, #4]
90003994:	f000 f82c 	bl	900039f0 <UART_SetConfig>
90003998:	4603      	mov	r3, r0
9000399a:	2b01      	cmp	r3, #1
9000399c:	d101      	bne.n	900039a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
9000399e:	2301      	movs	r3, #1
900039a0:	e022      	b.n	900039e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
900039a2:	687b      	ldr	r3, [r7, #4]
900039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900039a6:	2b00      	cmp	r3, #0
900039a8:	d002      	beq.n	900039b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
900039aa:	6878      	ldr	r0, [r7, #4]
900039ac:	f000 faca 	bl	90003f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
900039b0:	687b      	ldr	r3, [r7, #4]
900039b2:	681b      	ldr	r3, [r3, #0]
900039b4:	685a      	ldr	r2, [r3, #4]
900039b6:	687b      	ldr	r3, [r7, #4]
900039b8:	681b      	ldr	r3, [r3, #0]
900039ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
900039be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
900039c0:	687b      	ldr	r3, [r7, #4]
900039c2:	681b      	ldr	r3, [r3, #0]
900039c4:	689a      	ldr	r2, [r3, #8]
900039c6:	687b      	ldr	r3, [r7, #4]
900039c8:	681b      	ldr	r3, [r3, #0]
900039ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
900039ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
900039d0:	687b      	ldr	r3, [r7, #4]
900039d2:	681b      	ldr	r3, [r3, #0]
900039d4:	681a      	ldr	r2, [r3, #0]
900039d6:	687b      	ldr	r3, [r7, #4]
900039d8:	681b      	ldr	r3, [r3, #0]
900039da:	f042 0201 	orr.w	r2, r2, #1
900039de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
900039e0:	6878      	ldr	r0, [r7, #4]
900039e2:	f000 fb51 	bl	90004088 <UART_CheckIdleState>
900039e6:	4603      	mov	r3, r0
}
900039e8:	4618      	mov	r0, r3
900039ea:	3708      	adds	r7, #8
900039ec:	46bd      	mov	sp, r7
900039ee:	bd80      	pop	{r7, pc}

900039f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
900039f0:	b580      	push	{r7, lr}
900039f2:	b088      	sub	sp, #32
900039f4:	af00      	add	r7, sp, #0
900039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
900039f8:	2300      	movs	r3, #0
900039fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
900039fc:	2300      	movs	r3, #0
900039fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90003a00:	687b      	ldr	r3, [r7, #4]
90003a02:	689a      	ldr	r2, [r3, #8]
90003a04:	687b      	ldr	r3, [r7, #4]
90003a06:	691b      	ldr	r3, [r3, #16]
90003a08:	431a      	orrs	r2, r3
90003a0a:	687b      	ldr	r3, [r7, #4]
90003a0c:	695b      	ldr	r3, [r3, #20]
90003a0e:	431a      	orrs	r2, r3
90003a10:	687b      	ldr	r3, [r7, #4]
90003a12:	69db      	ldr	r3, [r3, #28]
90003a14:	4313      	orrs	r3, r2
90003a16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90003a18:	687b      	ldr	r3, [r7, #4]
90003a1a:	681b      	ldr	r3, [r3, #0]
90003a1c:	681a      	ldr	r2, [r3, #0]
90003a1e:	4bb1      	ldr	r3, [pc, #708]	; (90003ce4 <UART_SetConfig+0x2f4>)
90003a20:	4013      	ands	r3, r2
90003a22:	687a      	ldr	r2, [r7, #4]
90003a24:	6812      	ldr	r2, [r2, #0]
90003a26:	6939      	ldr	r1, [r7, #16]
90003a28:	430b      	orrs	r3, r1
90003a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90003a2c:	687b      	ldr	r3, [r7, #4]
90003a2e:	681b      	ldr	r3, [r3, #0]
90003a30:	685b      	ldr	r3, [r3, #4]
90003a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90003a36:	687b      	ldr	r3, [r7, #4]
90003a38:	68da      	ldr	r2, [r3, #12]
90003a3a:	687b      	ldr	r3, [r7, #4]
90003a3c:	681b      	ldr	r3, [r3, #0]
90003a3e:	430a      	orrs	r2, r1
90003a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90003a42:	687b      	ldr	r3, [r7, #4]
90003a44:	699b      	ldr	r3, [r3, #24]
90003a46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
90003a48:	687b      	ldr	r3, [r7, #4]
90003a4a:	6a1b      	ldr	r3, [r3, #32]
90003a4c:	693a      	ldr	r2, [r7, #16]
90003a4e:	4313      	orrs	r3, r2
90003a50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90003a52:	687b      	ldr	r3, [r7, #4]
90003a54:	681b      	ldr	r3, [r3, #0]
90003a56:	689b      	ldr	r3, [r3, #8]
90003a58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
90003a5c:	687b      	ldr	r3, [r7, #4]
90003a5e:	681b      	ldr	r3, [r3, #0]
90003a60:	693a      	ldr	r2, [r7, #16]
90003a62:	430a      	orrs	r2, r1
90003a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90003a66:	687b      	ldr	r3, [r7, #4]
90003a68:	681b      	ldr	r3, [r3, #0]
90003a6a:	4a9f      	ldr	r2, [pc, #636]	; (90003ce8 <UART_SetConfig+0x2f8>)
90003a6c:	4293      	cmp	r3, r2
90003a6e:	d121      	bne.n	90003ab4 <UART_SetConfig+0xc4>
90003a70:	4b9e      	ldr	r3, [pc, #632]	; (90003cec <UART_SetConfig+0x2fc>)
90003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003a76:	f003 0303 	and.w	r3, r3, #3
90003a7a:	2b03      	cmp	r3, #3
90003a7c:	d816      	bhi.n	90003aac <UART_SetConfig+0xbc>
90003a7e:	a201      	add	r2, pc, #4	; (adr r2, 90003a84 <UART_SetConfig+0x94>)
90003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003a84:	90003a95 	.word	0x90003a95
90003a88:	90003aa1 	.word	0x90003aa1
90003a8c:	90003a9b 	.word	0x90003a9b
90003a90:	90003aa7 	.word	0x90003aa7
90003a94:	2301      	movs	r3, #1
90003a96:	77fb      	strb	r3, [r7, #31]
90003a98:	e151      	b.n	90003d3e <UART_SetConfig+0x34e>
90003a9a:	2302      	movs	r3, #2
90003a9c:	77fb      	strb	r3, [r7, #31]
90003a9e:	e14e      	b.n	90003d3e <UART_SetConfig+0x34e>
90003aa0:	2304      	movs	r3, #4
90003aa2:	77fb      	strb	r3, [r7, #31]
90003aa4:	e14b      	b.n	90003d3e <UART_SetConfig+0x34e>
90003aa6:	2308      	movs	r3, #8
90003aa8:	77fb      	strb	r3, [r7, #31]
90003aaa:	e148      	b.n	90003d3e <UART_SetConfig+0x34e>
90003aac:	2310      	movs	r3, #16
90003aae:	77fb      	strb	r3, [r7, #31]
90003ab0:	bf00      	nop
90003ab2:	e144      	b.n	90003d3e <UART_SetConfig+0x34e>
90003ab4:	687b      	ldr	r3, [r7, #4]
90003ab6:	681b      	ldr	r3, [r3, #0]
90003ab8:	4a8d      	ldr	r2, [pc, #564]	; (90003cf0 <UART_SetConfig+0x300>)
90003aba:	4293      	cmp	r3, r2
90003abc:	d134      	bne.n	90003b28 <UART_SetConfig+0x138>
90003abe:	4b8b      	ldr	r3, [pc, #556]	; (90003cec <UART_SetConfig+0x2fc>)
90003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ac4:	f003 030c 	and.w	r3, r3, #12
90003ac8:	2b0c      	cmp	r3, #12
90003aca:	d829      	bhi.n	90003b20 <UART_SetConfig+0x130>
90003acc:	a201      	add	r2, pc, #4	; (adr r2, 90003ad4 <UART_SetConfig+0xe4>)
90003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003ad2:	bf00      	nop
90003ad4:	90003b09 	.word	0x90003b09
90003ad8:	90003b21 	.word	0x90003b21
90003adc:	90003b21 	.word	0x90003b21
90003ae0:	90003b21 	.word	0x90003b21
90003ae4:	90003b15 	.word	0x90003b15
90003ae8:	90003b21 	.word	0x90003b21
90003aec:	90003b21 	.word	0x90003b21
90003af0:	90003b21 	.word	0x90003b21
90003af4:	90003b0f 	.word	0x90003b0f
90003af8:	90003b21 	.word	0x90003b21
90003afc:	90003b21 	.word	0x90003b21
90003b00:	90003b21 	.word	0x90003b21
90003b04:	90003b1b 	.word	0x90003b1b
90003b08:	2300      	movs	r3, #0
90003b0a:	77fb      	strb	r3, [r7, #31]
90003b0c:	e117      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b0e:	2302      	movs	r3, #2
90003b10:	77fb      	strb	r3, [r7, #31]
90003b12:	e114      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b14:	2304      	movs	r3, #4
90003b16:	77fb      	strb	r3, [r7, #31]
90003b18:	e111      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b1a:	2308      	movs	r3, #8
90003b1c:	77fb      	strb	r3, [r7, #31]
90003b1e:	e10e      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b20:	2310      	movs	r3, #16
90003b22:	77fb      	strb	r3, [r7, #31]
90003b24:	bf00      	nop
90003b26:	e10a      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b28:	687b      	ldr	r3, [r7, #4]
90003b2a:	681b      	ldr	r3, [r3, #0]
90003b2c:	4a71      	ldr	r2, [pc, #452]	; (90003cf4 <UART_SetConfig+0x304>)
90003b2e:	4293      	cmp	r3, r2
90003b30:	d120      	bne.n	90003b74 <UART_SetConfig+0x184>
90003b32:	4b6e      	ldr	r3, [pc, #440]	; (90003cec <UART_SetConfig+0x2fc>)
90003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
90003b3c:	2b10      	cmp	r3, #16
90003b3e:	d00f      	beq.n	90003b60 <UART_SetConfig+0x170>
90003b40:	2b10      	cmp	r3, #16
90003b42:	d802      	bhi.n	90003b4a <UART_SetConfig+0x15a>
90003b44:	2b00      	cmp	r3, #0
90003b46:	d005      	beq.n	90003b54 <UART_SetConfig+0x164>
90003b48:	e010      	b.n	90003b6c <UART_SetConfig+0x17c>
90003b4a:	2b20      	cmp	r3, #32
90003b4c:	d005      	beq.n	90003b5a <UART_SetConfig+0x16a>
90003b4e:	2b30      	cmp	r3, #48	; 0x30
90003b50:	d009      	beq.n	90003b66 <UART_SetConfig+0x176>
90003b52:	e00b      	b.n	90003b6c <UART_SetConfig+0x17c>
90003b54:	2300      	movs	r3, #0
90003b56:	77fb      	strb	r3, [r7, #31]
90003b58:	e0f1      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b5a:	2302      	movs	r3, #2
90003b5c:	77fb      	strb	r3, [r7, #31]
90003b5e:	e0ee      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b60:	2304      	movs	r3, #4
90003b62:	77fb      	strb	r3, [r7, #31]
90003b64:	e0eb      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b66:	2308      	movs	r3, #8
90003b68:	77fb      	strb	r3, [r7, #31]
90003b6a:	e0e8      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b6c:	2310      	movs	r3, #16
90003b6e:	77fb      	strb	r3, [r7, #31]
90003b70:	bf00      	nop
90003b72:	e0e4      	b.n	90003d3e <UART_SetConfig+0x34e>
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	681b      	ldr	r3, [r3, #0]
90003b78:	4a5f      	ldr	r2, [pc, #380]	; (90003cf8 <UART_SetConfig+0x308>)
90003b7a:	4293      	cmp	r3, r2
90003b7c:	d120      	bne.n	90003bc0 <UART_SetConfig+0x1d0>
90003b7e:	4b5b      	ldr	r3, [pc, #364]	; (90003cec <UART_SetConfig+0x2fc>)
90003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003b84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
90003b88:	2b40      	cmp	r3, #64	; 0x40
90003b8a:	d00f      	beq.n	90003bac <UART_SetConfig+0x1bc>
90003b8c:	2b40      	cmp	r3, #64	; 0x40
90003b8e:	d802      	bhi.n	90003b96 <UART_SetConfig+0x1a6>
90003b90:	2b00      	cmp	r3, #0
90003b92:	d005      	beq.n	90003ba0 <UART_SetConfig+0x1b0>
90003b94:	e010      	b.n	90003bb8 <UART_SetConfig+0x1c8>
90003b96:	2b80      	cmp	r3, #128	; 0x80
90003b98:	d005      	beq.n	90003ba6 <UART_SetConfig+0x1b6>
90003b9a:	2bc0      	cmp	r3, #192	; 0xc0
90003b9c:	d009      	beq.n	90003bb2 <UART_SetConfig+0x1c2>
90003b9e:	e00b      	b.n	90003bb8 <UART_SetConfig+0x1c8>
90003ba0:	2300      	movs	r3, #0
90003ba2:	77fb      	strb	r3, [r7, #31]
90003ba4:	e0cb      	b.n	90003d3e <UART_SetConfig+0x34e>
90003ba6:	2302      	movs	r3, #2
90003ba8:	77fb      	strb	r3, [r7, #31]
90003baa:	e0c8      	b.n	90003d3e <UART_SetConfig+0x34e>
90003bac:	2304      	movs	r3, #4
90003bae:	77fb      	strb	r3, [r7, #31]
90003bb0:	e0c5      	b.n	90003d3e <UART_SetConfig+0x34e>
90003bb2:	2308      	movs	r3, #8
90003bb4:	77fb      	strb	r3, [r7, #31]
90003bb6:	e0c2      	b.n	90003d3e <UART_SetConfig+0x34e>
90003bb8:	2310      	movs	r3, #16
90003bba:	77fb      	strb	r3, [r7, #31]
90003bbc:	bf00      	nop
90003bbe:	e0be      	b.n	90003d3e <UART_SetConfig+0x34e>
90003bc0:	687b      	ldr	r3, [r7, #4]
90003bc2:	681b      	ldr	r3, [r3, #0]
90003bc4:	4a4d      	ldr	r2, [pc, #308]	; (90003cfc <UART_SetConfig+0x30c>)
90003bc6:	4293      	cmp	r3, r2
90003bc8:	d124      	bne.n	90003c14 <UART_SetConfig+0x224>
90003bca:	4b48      	ldr	r3, [pc, #288]	; (90003cec <UART_SetConfig+0x2fc>)
90003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90003bd8:	d012      	beq.n	90003c00 <UART_SetConfig+0x210>
90003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90003bde:	d802      	bhi.n	90003be6 <UART_SetConfig+0x1f6>
90003be0:	2b00      	cmp	r3, #0
90003be2:	d007      	beq.n	90003bf4 <UART_SetConfig+0x204>
90003be4:	e012      	b.n	90003c0c <UART_SetConfig+0x21c>
90003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90003bea:	d006      	beq.n	90003bfa <UART_SetConfig+0x20a>
90003bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90003bf0:	d009      	beq.n	90003c06 <UART_SetConfig+0x216>
90003bf2:	e00b      	b.n	90003c0c <UART_SetConfig+0x21c>
90003bf4:	2300      	movs	r3, #0
90003bf6:	77fb      	strb	r3, [r7, #31]
90003bf8:	e0a1      	b.n	90003d3e <UART_SetConfig+0x34e>
90003bfa:	2302      	movs	r3, #2
90003bfc:	77fb      	strb	r3, [r7, #31]
90003bfe:	e09e      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c00:	2304      	movs	r3, #4
90003c02:	77fb      	strb	r3, [r7, #31]
90003c04:	e09b      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c06:	2308      	movs	r3, #8
90003c08:	77fb      	strb	r3, [r7, #31]
90003c0a:	e098      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c0c:	2310      	movs	r3, #16
90003c0e:	77fb      	strb	r3, [r7, #31]
90003c10:	bf00      	nop
90003c12:	e094      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c14:	687b      	ldr	r3, [r7, #4]
90003c16:	681b      	ldr	r3, [r3, #0]
90003c18:	4a39      	ldr	r2, [pc, #228]	; (90003d00 <UART_SetConfig+0x310>)
90003c1a:	4293      	cmp	r3, r2
90003c1c:	d124      	bne.n	90003c68 <UART_SetConfig+0x278>
90003c1e:	4b33      	ldr	r3, [pc, #204]	; (90003cec <UART_SetConfig+0x2fc>)
90003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
90003c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90003c2c:	d012      	beq.n	90003c54 <UART_SetConfig+0x264>
90003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90003c32:	d802      	bhi.n	90003c3a <UART_SetConfig+0x24a>
90003c34:	2b00      	cmp	r3, #0
90003c36:	d007      	beq.n	90003c48 <UART_SetConfig+0x258>
90003c38:	e012      	b.n	90003c60 <UART_SetConfig+0x270>
90003c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90003c3e:	d006      	beq.n	90003c4e <UART_SetConfig+0x25e>
90003c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90003c44:	d009      	beq.n	90003c5a <UART_SetConfig+0x26a>
90003c46:	e00b      	b.n	90003c60 <UART_SetConfig+0x270>
90003c48:	2301      	movs	r3, #1
90003c4a:	77fb      	strb	r3, [r7, #31]
90003c4c:	e077      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c4e:	2302      	movs	r3, #2
90003c50:	77fb      	strb	r3, [r7, #31]
90003c52:	e074      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c54:	2304      	movs	r3, #4
90003c56:	77fb      	strb	r3, [r7, #31]
90003c58:	e071      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c5a:	2308      	movs	r3, #8
90003c5c:	77fb      	strb	r3, [r7, #31]
90003c5e:	e06e      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c60:	2310      	movs	r3, #16
90003c62:	77fb      	strb	r3, [r7, #31]
90003c64:	bf00      	nop
90003c66:	e06a      	b.n	90003d3e <UART_SetConfig+0x34e>
90003c68:	687b      	ldr	r3, [r7, #4]
90003c6a:	681b      	ldr	r3, [r3, #0]
90003c6c:	4a25      	ldr	r2, [pc, #148]	; (90003d04 <UART_SetConfig+0x314>)
90003c6e:	4293      	cmp	r3, r2
90003c70:	d124      	bne.n	90003cbc <UART_SetConfig+0x2cc>
90003c72:	4b1e      	ldr	r3, [pc, #120]	; (90003cec <UART_SetConfig+0x2fc>)
90003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003c78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
90003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90003c80:	d012      	beq.n	90003ca8 <UART_SetConfig+0x2b8>
90003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90003c86:	d802      	bhi.n	90003c8e <UART_SetConfig+0x29e>
90003c88:	2b00      	cmp	r3, #0
90003c8a:	d007      	beq.n	90003c9c <UART_SetConfig+0x2ac>
90003c8c:	e012      	b.n	90003cb4 <UART_SetConfig+0x2c4>
90003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90003c92:	d006      	beq.n	90003ca2 <UART_SetConfig+0x2b2>
90003c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90003c98:	d009      	beq.n	90003cae <UART_SetConfig+0x2be>
90003c9a:	e00b      	b.n	90003cb4 <UART_SetConfig+0x2c4>
90003c9c:	2300      	movs	r3, #0
90003c9e:	77fb      	strb	r3, [r7, #31]
90003ca0:	e04d      	b.n	90003d3e <UART_SetConfig+0x34e>
90003ca2:	2302      	movs	r3, #2
90003ca4:	77fb      	strb	r3, [r7, #31]
90003ca6:	e04a      	b.n	90003d3e <UART_SetConfig+0x34e>
90003ca8:	2304      	movs	r3, #4
90003caa:	77fb      	strb	r3, [r7, #31]
90003cac:	e047      	b.n	90003d3e <UART_SetConfig+0x34e>
90003cae:	2308      	movs	r3, #8
90003cb0:	77fb      	strb	r3, [r7, #31]
90003cb2:	e044      	b.n	90003d3e <UART_SetConfig+0x34e>
90003cb4:	2310      	movs	r3, #16
90003cb6:	77fb      	strb	r3, [r7, #31]
90003cb8:	bf00      	nop
90003cba:	e040      	b.n	90003d3e <UART_SetConfig+0x34e>
90003cbc:	687b      	ldr	r3, [r7, #4]
90003cbe:	681b      	ldr	r3, [r3, #0]
90003cc0:	4a11      	ldr	r2, [pc, #68]	; (90003d08 <UART_SetConfig+0x318>)
90003cc2:	4293      	cmp	r3, r2
90003cc4:	d139      	bne.n	90003d3a <UART_SetConfig+0x34a>
90003cc6:	4b09      	ldr	r3, [pc, #36]	; (90003cec <UART_SetConfig+0x2fc>)
90003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90003cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90003cd4:	d027      	beq.n	90003d26 <UART_SetConfig+0x336>
90003cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90003cda:	d817      	bhi.n	90003d0c <UART_SetConfig+0x31c>
90003cdc:	2b00      	cmp	r3, #0
90003cde:	d01c      	beq.n	90003d1a <UART_SetConfig+0x32a>
90003ce0:	e027      	b.n	90003d32 <UART_SetConfig+0x342>
90003ce2:	bf00      	nop
90003ce4:	efff69f3 	.word	0xefff69f3
90003ce8:	40011000 	.word	0x40011000
90003cec:	40023800 	.word	0x40023800
90003cf0:	40004400 	.word	0x40004400
90003cf4:	40004800 	.word	0x40004800
90003cf8:	40004c00 	.word	0x40004c00
90003cfc:	40005000 	.word	0x40005000
90003d00:	40011400 	.word	0x40011400
90003d04:	40007800 	.word	0x40007800
90003d08:	40007c00 	.word	0x40007c00
90003d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90003d10:	d006      	beq.n	90003d20 <UART_SetConfig+0x330>
90003d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
90003d16:	d009      	beq.n	90003d2c <UART_SetConfig+0x33c>
90003d18:	e00b      	b.n	90003d32 <UART_SetConfig+0x342>
90003d1a:	2300      	movs	r3, #0
90003d1c:	77fb      	strb	r3, [r7, #31]
90003d1e:	e00e      	b.n	90003d3e <UART_SetConfig+0x34e>
90003d20:	2302      	movs	r3, #2
90003d22:	77fb      	strb	r3, [r7, #31]
90003d24:	e00b      	b.n	90003d3e <UART_SetConfig+0x34e>
90003d26:	2304      	movs	r3, #4
90003d28:	77fb      	strb	r3, [r7, #31]
90003d2a:	e008      	b.n	90003d3e <UART_SetConfig+0x34e>
90003d2c:	2308      	movs	r3, #8
90003d2e:	77fb      	strb	r3, [r7, #31]
90003d30:	e005      	b.n	90003d3e <UART_SetConfig+0x34e>
90003d32:	2310      	movs	r3, #16
90003d34:	77fb      	strb	r3, [r7, #31]
90003d36:	bf00      	nop
90003d38:	e001      	b.n	90003d3e <UART_SetConfig+0x34e>
90003d3a:	2310      	movs	r3, #16
90003d3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90003d3e:	687b      	ldr	r3, [r7, #4]
90003d40:	69db      	ldr	r3, [r3, #28]
90003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90003d46:	d17f      	bne.n	90003e48 <UART_SetConfig+0x458>
  {
    switch (clocksource)
90003d48:	7ffb      	ldrb	r3, [r7, #31]
90003d4a:	2b08      	cmp	r3, #8
90003d4c:	d85c      	bhi.n	90003e08 <UART_SetConfig+0x418>
90003d4e:	a201      	add	r2, pc, #4	; (adr r2, 90003d54 <UART_SetConfig+0x364>)
90003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003d54:	90003d79 	.word	0x90003d79
90003d58:	90003d99 	.word	0x90003d99
90003d5c:	90003db9 	.word	0x90003db9
90003d60:	90003e09 	.word	0x90003e09
90003d64:	90003dd1 	.word	0x90003dd1
90003d68:	90003e09 	.word	0x90003e09
90003d6c:	90003e09 	.word	0x90003e09
90003d70:	90003e09 	.word	0x90003e09
90003d74:	90003df1 	.word	0x90003df1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90003d78:	f7ff f9a2 	bl	900030c0 <HAL_RCC_GetPCLK1Freq>
90003d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90003d7e:	68fb      	ldr	r3, [r7, #12]
90003d80:	005a      	lsls	r2, r3, #1
90003d82:	687b      	ldr	r3, [r7, #4]
90003d84:	685b      	ldr	r3, [r3, #4]
90003d86:	085b      	lsrs	r3, r3, #1
90003d88:	441a      	add	r2, r3
90003d8a:	687b      	ldr	r3, [r7, #4]
90003d8c:	685b      	ldr	r3, [r3, #4]
90003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
90003d92:	b29b      	uxth	r3, r3
90003d94:	61bb      	str	r3, [r7, #24]
        break;
90003d96:	e03a      	b.n	90003e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90003d98:	f7ff f9a6 	bl	900030e8 <HAL_RCC_GetPCLK2Freq>
90003d9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90003d9e:	68fb      	ldr	r3, [r7, #12]
90003da0:	005a      	lsls	r2, r3, #1
90003da2:	687b      	ldr	r3, [r7, #4]
90003da4:	685b      	ldr	r3, [r3, #4]
90003da6:	085b      	lsrs	r3, r3, #1
90003da8:	441a      	add	r2, r3
90003daa:	687b      	ldr	r3, [r7, #4]
90003dac:	685b      	ldr	r3, [r3, #4]
90003dae:	fbb2 f3f3 	udiv	r3, r2, r3
90003db2:	b29b      	uxth	r3, r3
90003db4:	61bb      	str	r3, [r7, #24]
        break;
90003db6:	e02a      	b.n	90003e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
90003db8:	687b      	ldr	r3, [r7, #4]
90003dba:	685b      	ldr	r3, [r3, #4]
90003dbc:	085a      	lsrs	r2, r3, #1
90003dbe:	4b5f      	ldr	r3, [pc, #380]	; (90003f3c <UART_SetConfig+0x54c>)
90003dc0:	4413      	add	r3, r2
90003dc2:	687a      	ldr	r2, [r7, #4]
90003dc4:	6852      	ldr	r2, [r2, #4]
90003dc6:	fbb3 f3f2 	udiv	r3, r3, r2
90003dca:	b29b      	uxth	r3, r3
90003dcc:	61bb      	str	r3, [r7, #24]
        break;
90003dce:	e01e      	b.n	90003e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
90003dd0:	f7ff f8b8 	bl	90002f44 <HAL_RCC_GetSysClockFreq>
90003dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90003dd6:	68fb      	ldr	r3, [r7, #12]
90003dd8:	005a      	lsls	r2, r3, #1
90003dda:	687b      	ldr	r3, [r7, #4]
90003ddc:	685b      	ldr	r3, [r3, #4]
90003dde:	085b      	lsrs	r3, r3, #1
90003de0:	441a      	add	r2, r3
90003de2:	687b      	ldr	r3, [r7, #4]
90003de4:	685b      	ldr	r3, [r3, #4]
90003de6:	fbb2 f3f3 	udiv	r3, r2, r3
90003dea:	b29b      	uxth	r3, r3
90003dec:	61bb      	str	r3, [r7, #24]
        break;
90003dee:	e00e      	b.n	90003e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
90003df0:	687b      	ldr	r3, [r7, #4]
90003df2:	685b      	ldr	r3, [r3, #4]
90003df4:	085b      	lsrs	r3, r3, #1
90003df6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	685b      	ldr	r3, [r3, #4]
90003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
90003e02:	b29b      	uxth	r3, r3
90003e04:	61bb      	str	r3, [r7, #24]
        break;
90003e06:	e002      	b.n	90003e0e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
90003e08:	2301      	movs	r3, #1
90003e0a:	75fb      	strb	r3, [r7, #23]
        break;
90003e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90003e0e:	69bb      	ldr	r3, [r7, #24]
90003e10:	2b0f      	cmp	r3, #15
90003e12:	d916      	bls.n	90003e42 <UART_SetConfig+0x452>
90003e14:	69bb      	ldr	r3, [r7, #24]
90003e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003e1a:	d212      	bcs.n	90003e42 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90003e1c:	69bb      	ldr	r3, [r7, #24]
90003e1e:	b29b      	uxth	r3, r3
90003e20:	f023 030f 	bic.w	r3, r3, #15
90003e24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90003e26:	69bb      	ldr	r3, [r7, #24]
90003e28:	085b      	lsrs	r3, r3, #1
90003e2a:	b29b      	uxth	r3, r3
90003e2c:	f003 0307 	and.w	r3, r3, #7
90003e30:	b29a      	uxth	r2, r3
90003e32:	897b      	ldrh	r3, [r7, #10]
90003e34:	4313      	orrs	r3, r2
90003e36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
90003e38:	687b      	ldr	r3, [r7, #4]
90003e3a:	681b      	ldr	r3, [r3, #0]
90003e3c:	897a      	ldrh	r2, [r7, #10]
90003e3e:	60da      	str	r2, [r3, #12]
90003e40:	e070      	b.n	90003f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
90003e42:	2301      	movs	r3, #1
90003e44:	75fb      	strb	r3, [r7, #23]
90003e46:	e06d      	b.n	90003f24 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
90003e48:	7ffb      	ldrb	r3, [r7, #31]
90003e4a:	2b08      	cmp	r3, #8
90003e4c:	d859      	bhi.n	90003f02 <UART_SetConfig+0x512>
90003e4e:	a201      	add	r2, pc, #4	; (adr r2, 90003e54 <UART_SetConfig+0x464>)
90003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003e54:	90003e79 	.word	0x90003e79
90003e58:	90003e97 	.word	0x90003e97
90003e5c:	90003eb5 	.word	0x90003eb5
90003e60:	90003f03 	.word	0x90003f03
90003e64:	90003ecd 	.word	0x90003ecd
90003e68:	90003f03 	.word	0x90003f03
90003e6c:	90003f03 	.word	0x90003f03
90003e70:	90003f03 	.word	0x90003f03
90003e74:	90003eeb 	.word	0x90003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90003e78:	f7ff f922 	bl	900030c0 <HAL_RCC_GetPCLK1Freq>
90003e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
90003e7e:	687b      	ldr	r3, [r7, #4]
90003e80:	685b      	ldr	r3, [r3, #4]
90003e82:	085a      	lsrs	r2, r3, #1
90003e84:	68fb      	ldr	r3, [r7, #12]
90003e86:	441a      	add	r2, r3
90003e88:	687b      	ldr	r3, [r7, #4]
90003e8a:	685b      	ldr	r3, [r3, #4]
90003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
90003e90:	b29b      	uxth	r3, r3
90003e92:	61bb      	str	r3, [r7, #24]
        break;
90003e94:	e038      	b.n	90003f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90003e96:	f7ff f927 	bl	900030e8 <HAL_RCC_GetPCLK2Freq>
90003e9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
90003e9c:	687b      	ldr	r3, [r7, #4]
90003e9e:	685b      	ldr	r3, [r3, #4]
90003ea0:	085a      	lsrs	r2, r3, #1
90003ea2:	68fb      	ldr	r3, [r7, #12]
90003ea4:	441a      	add	r2, r3
90003ea6:	687b      	ldr	r3, [r7, #4]
90003ea8:	685b      	ldr	r3, [r3, #4]
90003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
90003eae:	b29b      	uxth	r3, r3
90003eb0:	61bb      	str	r3, [r7, #24]
        break;
90003eb2:	e029      	b.n	90003f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
90003eb4:	687b      	ldr	r3, [r7, #4]
90003eb6:	685b      	ldr	r3, [r3, #4]
90003eb8:	085a      	lsrs	r2, r3, #1
90003eba:	4b21      	ldr	r3, [pc, #132]	; (90003f40 <UART_SetConfig+0x550>)
90003ebc:	4413      	add	r3, r2
90003ebe:	687a      	ldr	r2, [r7, #4]
90003ec0:	6852      	ldr	r2, [r2, #4]
90003ec2:	fbb3 f3f2 	udiv	r3, r3, r2
90003ec6:	b29b      	uxth	r3, r3
90003ec8:	61bb      	str	r3, [r7, #24]
        break;
90003eca:	e01d      	b.n	90003f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
90003ecc:	f7ff f83a 	bl	90002f44 <HAL_RCC_GetSysClockFreq>
90003ed0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
90003ed2:	687b      	ldr	r3, [r7, #4]
90003ed4:	685b      	ldr	r3, [r3, #4]
90003ed6:	085a      	lsrs	r2, r3, #1
90003ed8:	68fb      	ldr	r3, [r7, #12]
90003eda:	441a      	add	r2, r3
90003edc:	687b      	ldr	r3, [r7, #4]
90003ede:	685b      	ldr	r3, [r3, #4]
90003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
90003ee4:	b29b      	uxth	r3, r3
90003ee6:	61bb      	str	r3, [r7, #24]
        break;
90003ee8:	e00e      	b.n	90003f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
90003eea:	687b      	ldr	r3, [r7, #4]
90003eec:	685b      	ldr	r3, [r3, #4]
90003eee:	085b      	lsrs	r3, r3, #1
90003ef0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
90003ef4:	687b      	ldr	r3, [r7, #4]
90003ef6:	685b      	ldr	r3, [r3, #4]
90003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
90003efc:	b29b      	uxth	r3, r3
90003efe:	61bb      	str	r3, [r7, #24]
        break;
90003f00:	e002      	b.n	90003f08 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
90003f02:	2301      	movs	r3, #1
90003f04:	75fb      	strb	r3, [r7, #23]
        break;
90003f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90003f08:	69bb      	ldr	r3, [r7, #24]
90003f0a:	2b0f      	cmp	r3, #15
90003f0c:	d908      	bls.n	90003f20 <UART_SetConfig+0x530>
90003f0e:	69bb      	ldr	r3, [r7, #24]
90003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003f14:	d204      	bcs.n	90003f20 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
90003f16:	687b      	ldr	r3, [r7, #4]
90003f18:	681b      	ldr	r3, [r3, #0]
90003f1a:	69ba      	ldr	r2, [r7, #24]
90003f1c:	60da      	str	r2, [r3, #12]
90003f1e:	e001      	b.n	90003f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
90003f20:	2301      	movs	r3, #1
90003f22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
90003f24:	687b      	ldr	r3, [r7, #4]
90003f26:	2200      	movs	r2, #0
90003f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
90003f2a:	687b      	ldr	r3, [r7, #4]
90003f2c:	2200      	movs	r2, #0
90003f2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
90003f30:	7dfb      	ldrb	r3, [r7, #23]
}
90003f32:	4618      	mov	r0, r3
90003f34:	3720      	adds	r7, #32
90003f36:	46bd      	mov	sp, r7
90003f38:	bd80      	pop	{r7, pc}
90003f3a:	bf00      	nop
90003f3c:	01e84800 	.word	0x01e84800
90003f40:	00f42400 	.word	0x00f42400

90003f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
90003f44:	b480      	push	{r7}
90003f46:	b083      	sub	sp, #12
90003f48:	af00      	add	r7, sp, #0
90003f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90003f4c:	687b      	ldr	r3, [r7, #4]
90003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003f50:	f003 0301 	and.w	r3, r3, #1
90003f54:	2b00      	cmp	r3, #0
90003f56:	d00a      	beq.n	90003f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90003f58:	687b      	ldr	r3, [r7, #4]
90003f5a:	681b      	ldr	r3, [r3, #0]
90003f5c:	685b      	ldr	r3, [r3, #4]
90003f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
90003f62:	687b      	ldr	r3, [r7, #4]
90003f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90003f66:	687b      	ldr	r3, [r7, #4]
90003f68:	681b      	ldr	r3, [r3, #0]
90003f6a:	430a      	orrs	r2, r1
90003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90003f6e:	687b      	ldr	r3, [r7, #4]
90003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003f72:	f003 0302 	and.w	r3, r3, #2
90003f76:	2b00      	cmp	r3, #0
90003f78:	d00a      	beq.n	90003f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90003f7a:	687b      	ldr	r3, [r7, #4]
90003f7c:	681b      	ldr	r3, [r3, #0]
90003f7e:	685b      	ldr	r3, [r3, #4]
90003f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90003f84:	687b      	ldr	r3, [r7, #4]
90003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90003f88:	687b      	ldr	r3, [r7, #4]
90003f8a:	681b      	ldr	r3, [r3, #0]
90003f8c:	430a      	orrs	r2, r1
90003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90003f90:	687b      	ldr	r3, [r7, #4]
90003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003f94:	f003 0304 	and.w	r3, r3, #4
90003f98:	2b00      	cmp	r3, #0
90003f9a:	d00a      	beq.n	90003fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	685b      	ldr	r3, [r3, #4]
90003fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
90003fa6:	687b      	ldr	r3, [r7, #4]
90003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003faa:	687b      	ldr	r3, [r7, #4]
90003fac:	681b      	ldr	r3, [r3, #0]
90003fae:	430a      	orrs	r2, r1
90003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90003fb2:	687b      	ldr	r3, [r7, #4]
90003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003fb6:	f003 0308 	and.w	r3, r3, #8
90003fba:	2b00      	cmp	r3, #0
90003fbc:	d00a      	beq.n	90003fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90003fbe:	687b      	ldr	r3, [r7, #4]
90003fc0:	681b      	ldr	r3, [r3, #0]
90003fc2:	685b      	ldr	r3, [r3, #4]
90003fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
90003fc8:	687b      	ldr	r3, [r7, #4]
90003fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003fcc:	687b      	ldr	r3, [r7, #4]
90003fce:	681b      	ldr	r3, [r3, #0]
90003fd0:	430a      	orrs	r2, r1
90003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90003fd4:	687b      	ldr	r3, [r7, #4]
90003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003fd8:	f003 0310 	and.w	r3, r3, #16
90003fdc:	2b00      	cmp	r3, #0
90003fde:	d00a      	beq.n	90003ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90003fe0:	687b      	ldr	r3, [r7, #4]
90003fe2:	681b      	ldr	r3, [r3, #0]
90003fe4:	689b      	ldr	r3, [r3, #8]
90003fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
90003fea:	687b      	ldr	r3, [r7, #4]
90003fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90003fee:	687b      	ldr	r3, [r7, #4]
90003ff0:	681b      	ldr	r3, [r3, #0]
90003ff2:	430a      	orrs	r2, r1
90003ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90003ff6:	687b      	ldr	r3, [r7, #4]
90003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003ffa:	f003 0320 	and.w	r3, r3, #32
90003ffe:	2b00      	cmp	r3, #0
90004000:	d00a      	beq.n	90004018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90004002:	687b      	ldr	r3, [r7, #4]
90004004:	681b      	ldr	r3, [r3, #0]
90004006:	689b      	ldr	r3, [r3, #8]
90004008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
9000400c:	687b      	ldr	r3, [r7, #4]
9000400e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90004010:	687b      	ldr	r3, [r7, #4]
90004012:	681b      	ldr	r3, [r3, #0]
90004014:	430a      	orrs	r2, r1
90004016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004020:	2b00      	cmp	r3, #0
90004022:	d01a      	beq.n	9000405a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90004024:	687b      	ldr	r3, [r7, #4]
90004026:	681b      	ldr	r3, [r3, #0]
90004028:	685b      	ldr	r3, [r3, #4]
9000402a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
9000402e:	687b      	ldr	r3, [r7, #4]
90004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004032:	687b      	ldr	r3, [r7, #4]
90004034:	681b      	ldr	r3, [r3, #0]
90004036:	430a      	orrs	r2, r1
90004038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000403a:	687b      	ldr	r3, [r7, #4]
9000403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000403e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004042:	d10a      	bne.n	9000405a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90004044:	687b      	ldr	r3, [r7, #4]
90004046:	681b      	ldr	r3, [r3, #0]
90004048:	685b      	ldr	r3, [r3, #4]
9000404a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
9000404e:	687b      	ldr	r3, [r7, #4]
90004050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90004052:	687b      	ldr	r3, [r7, #4]
90004054:	681b      	ldr	r3, [r3, #0]
90004056:	430a      	orrs	r2, r1
90004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000405a:	687b      	ldr	r3, [r7, #4]
9000405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004062:	2b00      	cmp	r3, #0
90004064:	d00a      	beq.n	9000407c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
90004066:	687b      	ldr	r3, [r7, #4]
90004068:	681b      	ldr	r3, [r3, #0]
9000406a:	685b      	ldr	r3, [r3, #4]
9000406c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
90004070:	687b      	ldr	r3, [r7, #4]
90004072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
90004074:	687b      	ldr	r3, [r7, #4]
90004076:	681b      	ldr	r3, [r3, #0]
90004078:	430a      	orrs	r2, r1
9000407a:	605a      	str	r2, [r3, #4]
  }
}
9000407c:	bf00      	nop
9000407e:	370c      	adds	r7, #12
90004080:	46bd      	mov	sp, r7
90004082:	f85d 7b04 	ldr.w	r7, [sp], #4
90004086:	4770      	bx	lr

90004088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
90004088:	b580      	push	{r7, lr}
9000408a:	b086      	sub	sp, #24
9000408c:	af02      	add	r7, sp, #8
9000408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
90004090:	687b      	ldr	r3, [r7, #4]
90004092:	2200      	movs	r2, #0
90004094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
90004096:	f7fd fbdf 	bl	90001858 <HAL_GetTick>
9000409a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000409c:	687b      	ldr	r3, [r7, #4]
9000409e:	681b      	ldr	r3, [r3, #0]
900040a0:	681b      	ldr	r3, [r3, #0]
900040a2:	f003 0308 	and.w	r3, r3, #8
900040a6:	2b08      	cmp	r3, #8
900040a8:	d10e      	bne.n	900040c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
900040aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
900040ae:	9300      	str	r3, [sp, #0]
900040b0:	68fb      	ldr	r3, [r7, #12]
900040b2:	2200      	movs	r2, #0
900040b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
900040b8:	6878      	ldr	r0, [r7, #4]
900040ba:	f000 f814 	bl	900040e6 <UART_WaitOnFlagUntilTimeout>
900040be:	4603      	mov	r3, r0
900040c0:	2b00      	cmp	r3, #0
900040c2:	d001      	beq.n	900040c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
900040c4:	2303      	movs	r3, #3
900040c6:	e00a      	b.n	900040de <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
900040c8:	687b      	ldr	r3, [r7, #4]
900040ca:	2220      	movs	r2, #32
900040cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
900040ce:	687b      	ldr	r3, [r7, #4]
900040d0:	2220      	movs	r2, #32
900040d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
900040d4:	687b      	ldr	r3, [r7, #4]
900040d6:	2200      	movs	r2, #0
900040d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
900040dc:	2300      	movs	r3, #0
}
900040de:	4618      	mov	r0, r3
900040e0:	3710      	adds	r7, #16
900040e2:	46bd      	mov	sp, r7
900040e4:	bd80      	pop	{r7, pc}

900040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
900040e6:	b580      	push	{r7, lr}
900040e8:	b084      	sub	sp, #16
900040ea:	af00      	add	r7, sp, #0
900040ec:	60f8      	str	r0, [r7, #12]
900040ee:	60b9      	str	r1, [r7, #8]
900040f0:	603b      	str	r3, [r7, #0]
900040f2:	4613      	mov	r3, r2
900040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
900040f6:	e05d      	b.n	900041b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900040f8:	69bb      	ldr	r3, [r7, #24]
900040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
900040fe:	d059      	beq.n	900041b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004100:	f7fd fbaa 	bl	90001858 <HAL_GetTick>
90004104:	4602      	mov	r2, r0
90004106:	683b      	ldr	r3, [r7, #0]
90004108:	1ad3      	subs	r3, r2, r3
9000410a:	69ba      	ldr	r2, [r7, #24]
9000410c:	429a      	cmp	r2, r3
9000410e:	d302      	bcc.n	90004116 <UART_WaitOnFlagUntilTimeout+0x30>
90004110:	69bb      	ldr	r3, [r7, #24]
90004112:	2b00      	cmp	r3, #0
90004114:	d11b      	bne.n	9000414e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90004116:	68fb      	ldr	r3, [r7, #12]
90004118:	681b      	ldr	r3, [r3, #0]
9000411a:	681a      	ldr	r2, [r3, #0]
9000411c:	68fb      	ldr	r3, [r7, #12]
9000411e:	681b      	ldr	r3, [r3, #0]
90004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90004124:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90004126:	68fb      	ldr	r3, [r7, #12]
90004128:	681b      	ldr	r3, [r3, #0]
9000412a:	689a      	ldr	r2, [r3, #8]
9000412c:	68fb      	ldr	r3, [r7, #12]
9000412e:	681b      	ldr	r3, [r3, #0]
90004130:	f022 0201 	bic.w	r2, r2, #1
90004134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
90004136:	68fb      	ldr	r3, [r7, #12]
90004138:	2220      	movs	r2, #32
9000413a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000413c:	68fb      	ldr	r3, [r7, #12]
9000413e:	2220      	movs	r2, #32
90004140:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
90004142:	68fb      	ldr	r3, [r7, #12]
90004144:	2200      	movs	r2, #0
90004146:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
9000414a:	2303      	movs	r3, #3
9000414c:	e042      	b.n	900041d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000414e:	68fb      	ldr	r3, [r7, #12]
90004150:	681b      	ldr	r3, [r3, #0]
90004152:	681b      	ldr	r3, [r3, #0]
90004154:	f003 0304 	and.w	r3, r3, #4
90004158:	2b00      	cmp	r3, #0
9000415a:	d02b      	beq.n	900041b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000415c:	68fb      	ldr	r3, [r7, #12]
9000415e:	681b      	ldr	r3, [r3, #0]
90004160:	69db      	ldr	r3, [r3, #28]
90004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000416a:	d123      	bne.n	900041b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000416c:	68fb      	ldr	r3, [r7, #12]
9000416e:	681b      	ldr	r3, [r3, #0]
90004170:	f44f 6200 	mov.w	r2, #2048	; 0x800
90004174:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90004176:	68fb      	ldr	r3, [r7, #12]
90004178:	681b      	ldr	r3, [r3, #0]
9000417a:	681a      	ldr	r2, [r3, #0]
9000417c:	68fb      	ldr	r3, [r7, #12]
9000417e:	681b      	ldr	r3, [r3, #0]
90004180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90004184:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90004186:	68fb      	ldr	r3, [r7, #12]
90004188:	681b      	ldr	r3, [r3, #0]
9000418a:	689a      	ldr	r2, [r3, #8]
9000418c:	68fb      	ldr	r3, [r7, #12]
9000418e:	681b      	ldr	r3, [r3, #0]
90004190:	f022 0201 	bic.w	r2, r2, #1
90004194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
90004196:	68fb      	ldr	r3, [r7, #12]
90004198:	2220      	movs	r2, #32
9000419a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
9000419c:	68fb      	ldr	r3, [r7, #12]
9000419e:	2220      	movs	r2, #32
900041a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
900041a2:	68fb      	ldr	r3, [r7, #12]
900041a4:	2220      	movs	r2, #32
900041a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
900041a8:	68fb      	ldr	r3, [r7, #12]
900041aa:	2200      	movs	r2, #0
900041ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
900041b0:	2303      	movs	r3, #3
900041b2:	e00f      	b.n	900041d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
900041b4:	68fb      	ldr	r3, [r7, #12]
900041b6:	681b      	ldr	r3, [r3, #0]
900041b8:	69da      	ldr	r2, [r3, #28]
900041ba:	68bb      	ldr	r3, [r7, #8]
900041bc:	4013      	ands	r3, r2
900041be:	68ba      	ldr	r2, [r7, #8]
900041c0:	429a      	cmp	r2, r3
900041c2:	bf0c      	ite	eq
900041c4:	2301      	moveq	r3, #1
900041c6:	2300      	movne	r3, #0
900041c8:	b2db      	uxtb	r3, r3
900041ca:	461a      	mov	r2, r3
900041cc:	79fb      	ldrb	r3, [r7, #7]
900041ce:	429a      	cmp	r2, r3
900041d0:	d092      	beq.n	900040f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
900041d2:	2300      	movs	r3, #0
}
900041d4:	4618      	mov	r0, r3
900041d6:	3710      	adds	r7, #16
900041d8:	46bd      	mov	sp, r7
900041da:	bd80      	pop	{r7, pc}

900041dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
900041dc:	b480      	push	{r7}
900041de:	b085      	sub	sp, #20
900041e0:	af00      	add	r7, sp, #0
900041e2:	6078      	str	r0, [r7, #4]
900041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
900041e6:	2300      	movs	r3, #0
900041e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
900041ea:	2300      	movs	r3, #0
900041ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
900041ee:	683b      	ldr	r3, [r7, #0]
900041f0:	681b      	ldr	r3, [r3, #0]
900041f2:	2b01      	cmp	r3, #1
900041f4:	d027      	beq.n	90004246 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
900041f6:	687b      	ldr	r3, [r7, #4]
900041f8:	681b      	ldr	r3, [r3, #0]
900041fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900041fc:	68fa      	ldr	r2, [r7, #12]
900041fe:	4b2f      	ldr	r3, [pc, #188]	; (900042bc <FMC_SDRAM_Init+0xe0>)
90004200:	4013      	ands	r3, r2
90004202:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004204:	683b      	ldr	r3, [r7, #0]
90004206:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
90004208:	683b      	ldr	r3, [r7, #0]
9000420a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000420c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
9000420e:	683b      	ldr	r3, [r7, #0]
90004210:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
90004212:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
90004214:	683b      	ldr	r3, [r7, #0]
90004216:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
90004218:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
9000421a:	683b      	ldr	r3, [r7, #0]
9000421c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
9000421e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
90004220:	683b      	ldr	r3, [r7, #0]
90004222:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
90004224:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
90004226:	683b      	ldr	r3, [r7, #0]
90004228:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
9000422a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
9000422c:	683b      	ldr	r3, [r7, #0]
9000422e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
90004230:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
90004232:	683b      	ldr	r3, [r7, #0]
90004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
90004236:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004238:	68fa      	ldr	r2, [r7, #12]
9000423a:	4313      	orrs	r3, r2
9000423c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	68fa      	ldr	r2, [r7, #12]
90004242:	601a      	str	r2, [r3, #0]
90004244:	e032      	b.n	900042ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90004246:	687b      	ldr	r3, [r7, #4]
90004248:	681b      	ldr	r3, [r3, #0]
9000424a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
9000424c:	68fb      	ldr	r3, [r7, #12]
9000424e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
90004252:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004254:	683b      	ldr	r3, [r7, #0]
90004256:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
90004258:	683b      	ldr	r3, [r7, #0]
9000425a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000425c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
9000425e:	683b      	ldr	r3, [r7, #0]
90004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
90004262:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004264:	68fa      	ldr	r2, [r7, #12]
90004266:	4313      	orrs	r3, r2
90004268:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
9000426a:	687b      	ldr	r3, [r7, #4]
9000426c:	685b      	ldr	r3, [r3, #4]
9000426e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90004270:	68ba      	ldr	r2, [r7, #8]
90004272:	4b12      	ldr	r3, [pc, #72]	; (900042bc <FMC_SDRAM_Init+0xe0>)
90004274:	4013      	ands	r3, r2
90004276:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004278:	683b      	ldr	r3, [r7, #0]
9000427a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
9000427c:	683b      	ldr	r3, [r7, #0]
9000427e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004280:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
90004282:	683b      	ldr	r3, [r7, #0]
90004284:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
90004286:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
90004288:	683b      	ldr	r3, [r7, #0]
9000428a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
9000428c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
9000428e:	683b      	ldr	r3, [r7, #0]
90004290:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
90004292:	431a      	orrs	r2, r3
                       Init->WriteProtection);
90004294:	683b      	ldr	r3, [r7, #0]
90004296:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
90004298:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000429a:	68ba      	ldr	r2, [r7, #8]
9000429c:	4313      	orrs	r3, r2
9000429e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900042a0:	687b      	ldr	r3, [r7, #4]
900042a2:	68fa      	ldr	r2, [r7, #12]
900042a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
900042a6:	687b      	ldr	r3, [r7, #4]
900042a8:	68ba      	ldr	r2, [r7, #8]
900042aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
900042ac:	2300      	movs	r3, #0
}
900042ae:	4618      	mov	r0, r3
900042b0:	3714      	adds	r7, #20
900042b2:	46bd      	mov	sp, r7
900042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900042b8:	4770      	bx	lr
900042ba:	bf00      	nop
900042bc:	ffff8000 	.word	0xffff8000

900042c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
900042c0:	b480      	push	{r7}
900042c2:	b087      	sub	sp, #28
900042c4:	af00      	add	r7, sp, #0
900042c6:	60f8      	str	r0, [r7, #12]
900042c8:	60b9      	str	r1, [r7, #8]
900042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
900042cc:	2300      	movs	r3, #0
900042ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
900042d0:	2300      	movs	r3, #0
900042d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
900042d4:	687b      	ldr	r3, [r7, #4]
900042d6:	2b01      	cmp	r3, #1
900042d8:	d02e      	beq.n	90004338 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
900042da:	68fb      	ldr	r3, [r7, #12]
900042dc:	689b      	ldr	r3, [r3, #8]
900042de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900042e0:	697b      	ldr	r3, [r7, #20]
900042e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
900042e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900042e8:	68bb      	ldr	r3, [r7, #8]
900042ea:	681b      	ldr	r3, [r3, #0]
900042ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900042ee:	68bb      	ldr	r3, [r7, #8]
900042f0:	685b      	ldr	r3, [r3, #4]
900042f2:	3b01      	subs	r3, #1
900042f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900042f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900042f8:	68bb      	ldr	r3, [r7, #8]
900042fa:	689b      	ldr	r3, [r3, #8]
900042fc:	3b01      	subs	r3, #1
900042fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90004300:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004302:	68bb      	ldr	r3, [r7, #8]
90004304:	68db      	ldr	r3, [r3, #12]
90004306:	3b01      	subs	r3, #1
90004308:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000430a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
9000430c:	68bb      	ldr	r3, [r7, #8]
9000430e:	691b      	ldr	r3, [r3, #16]
90004310:	3b01      	subs	r3, #1
90004312:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004314:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
90004316:	68bb      	ldr	r3, [r7, #8]
90004318:	695b      	ldr	r3, [r3, #20]
9000431a:	3b01      	subs	r3, #1
9000431c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
9000431e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
90004320:	68bb      	ldr	r3, [r7, #8]
90004322:	699b      	ldr	r3, [r3, #24]
90004324:	3b01      	subs	r3, #1
90004326:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004328:	4313      	orrs	r3, r2
9000432a:	697a      	ldr	r2, [r7, #20]
9000432c:	4313      	orrs	r3, r2
9000432e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004330:	68fb      	ldr	r3, [r7, #12]
90004332:	697a      	ldr	r2, [r7, #20]
90004334:	609a      	str	r2, [r3, #8]
90004336:	e039      	b.n	900043ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90004338:	68fb      	ldr	r3, [r7, #12]
9000433a:	689b      	ldr	r3, [r3, #8]
9000433c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
9000433e:	697a      	ldr	r2, [r7, #20]
90004340:	4b1e      	ldr	r3, [pc, #120]	; (900043bc <FMC_SDRAM_Timing_Init+0xfc>)
90004342:	4013      	ands	r3, r2
90004344:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90004346:	68bb      	ldr	r3, [r7, #8]
90004348:	68db      	ldr	r3, [r3, #12]
9000434a:	3b01      	subs	r3, #1
9000434c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
9000434e:	68bb      	ldr	r3, [r7, #8]
90004350:	695b      	ldr	r3, [r3, #20]
90004352:	3b01      	subs	r3, #1
90004354:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90004356:	4313      	orrs	r3, r2
90004358:	697a      	ldr	r2, [r7, #20]
9000435a:	4313      	orrs	r3, r2
9000435c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
9000435e:	68fb      	ldr	r3, [r7, #12]
90004360:	68db      	ldr	r3, [r3, #12]
90004362:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90004364:	693b      	ldr	r3, [r7, #16]
90004366:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000436a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000436c:	68bb      	ldr	r3, [r7, #8]
9000436e:	681b      	ldr	r3, [r3, #0]
90004370:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90004372:	68bb      	ldr	r3, [r7, #8]
90004374:	685b      	ldr	r3, [r3, #4]
90004376:	3b01      	subs	r3, #1
90004378:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000437a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
9000437c:	68bb      	ldr	r3, [r7, #8]
9000437e:	689b      	ldr	r3, [r3, #8]
90004380:	3b01      	subs	r3, #1
90004382:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90004384:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
90004386:	68bb      	ldr	r3, [r7, #8]
90004388:	691b      	ldr	r3, [r3, #16]
9000438a:	3b01      	subs	r3, #1
9000438c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
9000438e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
90004390:	68bb      	ldr	r3, [r7, #8]
90004392:	699b      	ldr	r3, [r3, #24]
90004394:	3b01      	subs	r3, #1
90004396:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004398:	4313      	orrs	r3, r2
9000439a:	693a      	ldr	r2, [r7, #16]
9000439c:	4313      	orrs	r3, r2
9000439e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900043a0:	68fb      	ldr	r3, [r7, #12]
900043a2:	697a      	ldr	r2, [r7, #20]
900043a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
900043a6:	68fb      	ldr	r3, [r7, #12]
900043a8:	693a      	ldr	r2, [r7, #16]
900043aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
900043ac:	2300      	movs	r3, #0
}
900043ae:	4618      	mov	r0, r3
900043b0:	371c      	adds	r7, #28
900043b2:	46bd      	mov	sp, r7
900043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900043b8:	4770      	bx	lr
900043ba:	bf00      	nop
900043bc:	ff0f0fff 	.word	0xff0f0fff

900043c0 <__libc_init_array>:
900043c0:	b570      	push	{r4, r5, r6, lr}
900043c2:	4e0d      	ldr	r6, [pc, #52]	; (900043f8 <__libc_init_array+0x38>)
900043c4:	4c0d      	ldr	r4, [pc, #52]	; (900043fc <__libc_init_array+0x3c>)
900043c6:	1ba4      	subs	r4, r4, r6
900043c8:	10a4      	asrs	r4, r4, #2
900043ca:	2500      	movs	r5, #0
900043cc:	42a5      	cmp	r5, r4
900043ce:	d109      	bne.n	900043e4 <__libc_init_array+0x24>
900043d0:	4e0b      	ldr	r6, [pc, #44]	; (90004400 <__libc_init_array+0x40>)
900043d2:	4c0c      	ldr	r4, [pc, #48]	; (90004404 <__libc_init_array+0x44>)
900043d4:	f000 f820 	bl	90004418 <_init>
900043d8:	1ba4      	subs	r4, r4, r6
900043da:	10a4      	asrs	r4, r4, #2
900043dc:	2500      	movs	r5, #0
900043de:	42a5      	cmp	r5, r4
900043e0:	d105      	bne.n	900043ee <__libc_init_array+0x2e>
900043e2:	bd70      	pop	{r4, r5, r6, pc}
900043e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
900043e8:	4798      	blx	r3
900043ea:	3501      	adds	r5, #1
900043ec:	e7ee      	b.n	900043cc <__libc_init_array+0xc>
900043ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
900043f2:	4798      	blx	r3
900043f4:	3501      	adds	r5, #1
900043f6:	e7f2      	b.n	900043de <__libc_init_array+0x1e>
900043f8:	90004450 	.word	0x90004450
900043fc:	90004450 	.word	0x90004450
90004400:	90004450 	.word	0x90004450
90004404:	90004454 	.word	0x90004454

90004408 <memset>:
90004408:	4402      	add	r2, r0
9000440a:	4603      	mov	r3, r0
9000440c:	4293      	cmp	r3, r2
9000440e:	d100      	bne.n	90004412 <memset+0xa>
90004410:	4770      	bx	lr
90004412:	f803 1b01 	strb.w	r1, [r3], #1
90004416:	e7f9      	b.n	9000440c <memset+0x4>

90004418 <_init>:
90004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000441a:	bf00      	nop
9000441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000441e:	bc08      	pop	{r3}
90004420:	469e      	mov	lr, r3
90004422:	4770      	bx	lr

90004424 <_fini>:
90004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004426:	bf00      	nop
90004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000442a:	bc08      	pop	{r3}
9000442c:	469e      	mov	lr, r3
9000442e:	4770      	bx	lr
